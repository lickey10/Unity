<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 7.0.1.4 -->
<!-- saved from url=(0014)about:internet -->

<head>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0;height: 13px;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2320px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="/4FD8B397F5AF4D68BC7217E2B7C5B70A/F10F2DFE-FB9F-0F48-943E-8A7B213917EE/main.js" charset="UTF-8"></script><script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2320
    var $diffs = [
null,
{d:'Diff 1: Add 2 lines (104 - 105, second file) after line 103 (first file)',l:[103,104]},
{d:'Diff 2: Add 1 line (138, second file) after line 135 (first file)',l:[137,137]},
{d:'Diff 3: Add 2 lines (749 - 750, second file) after line 744 (first file)',l:[748,749]},
{d:'Diff 4: Change 1 line (755, first file) to 1 line (761, second file)',l:[760,760]},
{d:'Diff 5: Add 6 lines (764 - 769, second file) after line 756 (first file)',l:[763,768]},
{d:'Diff 6: Change 2 lines (767 - 768, first file) to 2 lines (780 - 781, second file)',l:[779,780]},
{d:'Diff 7: Add 93 lines (784 - 876, second file) after line 771 (first file)',l:[784,876]},
{d:'Diff 8: Change 5 lines (773 - 777, first file) to 9 lines (879 - 887, second file)',l:[879,887]},
{d:'Diff 9: Change 6 lines (779 - 784, first file) to 89 lines (889 - 977, second file)',l:[889,977]},
{d:'Diff 10: Delete 1 line (787, first file) after line 979 (second file)',l:[980,980]},
{d:'Diff 11: Add 14 lines (1043 - 1056, second file) after line 850 (first file)',l:[1044,1057]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="GameManager(old).cs"><b>GameManager(old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">   1 </div>
<div class="num">   2 </div>
<div class="num">   3 </div>
<div class="num">   4 </div>
<div class="num">   5 </div>
<div class="num">   6 </div>
<div class="num">   7 </div>
<div class="num">   8 </div>
<div class="num">   9 </div>
<div class="num">  10 </div>
<div class="num">  11 </div>
<div class="num">  12 </div>
<div class="num">  13 </div>
<div class="num">  14 </div>
<div class="num">  15 </div>
<div class="num">  16 </div>
<div class="num">  17 </div>
<div class="num">  18 </div>
<div class="num">  19 </div>
<div class="num">  20 </div>
<div class="num">  21 </div>
<div class="num">  22 </div>
<div class="num">  23 </div>
<div class="num">  24 </div>
<div class="num">  25 </div>
<div class="num">  26 </div>
<div class="num">  27 </div>
<div class="num">  28 </div>
<div class="num">  29 </div>
<div class="num">  30 </div>
<div class="num">  31 </div>
<div class="num">  32 </div>
<div class="num">  33 </div>
<div class="num">  34 </div>
<div class="num">  35 </div>
<div class="num">  36 </div>
<div class="num">  37 </div>
<div class="num">  38 </div>
<div class="num">  39 </div>
<div class="num">  40 </div>
<div class="num">  41 </div>
<div class="num">  42 </div>
<div class="num">  43 </div>
<div class="num">  44 </div>
<div class="num">  45 </div>
<div class="num">  46 </div>
<div class="num">  47 </div>
<div class="num">  48 </div>
<div class="num">  49 </div>
<div class="num">  50 </div>
<div class="num">  51 </div>
<div class="num">  52 </div>
<div class="num">  53 </div>
<div class="num">  54 </div>
<div class="num">  55 </div>
<div class="num">  56 </div>
<div class="num">  57 </div>
<div class="num">  58 </div>
<div class="num">  59 </div>
<div class="num">  60 </div>
<div class="num">  61 </div>
<div class="num">  62 </div>
<div class="num">  63 </div>
<div class="num">  64 </div>
<div class="num">  65 </div>
<div class="num">  66 </div>
<div class="num">  67 </div>
<div class="num">  68 </div>
<div class="num">  69 </div>
<div class="num">  70 </div>
<div class="num">  71 </div>
<div class="num">  72 </div>
<div class="num">  73 </div>
<div class="num">  74 </div>
<div class="num">  75 </div>
<div class="num">  76 </div>
<div class="num">  77 </div>
<div class="num">  78 </div>
<div class="num">  79 </div>
<div class="num">  80 </div>
<div class="num">  81 </div>
<div class="num">  82 </div>
<div class="num">  83 </div>
<div class="num">  84 </div>
<div class="num">  85 </div>
<div class="num">  86 </div>
<div class="num">  87 </div>
<div class="num">  88 </div>
<div class="num">  89 </div>
<div class="num">  90 </div>
<div class="num">  91 </div>
<div class="num">  92 </div>
<div class="num">  93 </div>
<div class="num">  94 </div>
<div class="num">  95 </div>
<div class="num">  96 </div>
<div class="num">  97 </div>
<div class="num">  98 </div>
<div class="num">  99 </div>
<div class="num"> 100 </div>
<div class="num"> 101 </div>
<div class="num"> 102 </div>
<div class="num"> 103 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 104 </div>
<div class="num"> 105 </div>
<div class="num"> 106 </div>
<div class="num"> 107 </div>
<div class="num"> 108 </div>
<div class="num"> 109 </div>
<div class="num"> 110 </div>
<div class="num"> 111 </div>
<div class="num"> 112 </div>
<div class="num"> 113 </div>
<div class="num"> 114 </div>
<div class="num"> 115 </div>
<div class="num"> 116 </div>
<div class="num"> 117 </div>
<div class="num"> 118 </div>
<div class="num"> 119 </div>
<div class="num"> 120 </div>
<div class="num"> 121 </div>
<div class="num"> 122 </div>
<div class="num"> 123 </div>
<div class="num"> 124 </div>
<div class="num"> 125 </div>
<div class="num"> 126 </div>
<div class="num"> 127 </div>
<div class="num"> 128 </div>
<div class="num"> 129 </div>
<div class="num"> 130 </div>
<div class="num"> 131 </div>
<div class="num"> 132 </div>
<div class="num"> 133 </div>
<div class="num"> 134 </div>
<div class="num"> 135 </div>
<div class="num">     </div>
<div class="num"> 136 </div>
<div class="num"> 137 </div>
<div class="num"> 138 </div>
<div class="num"> 139 </div>
<div class="num"> 140 </div>
<div class="num"> 141 </div>
<div class="num"> 142 </div>
<div class="num"> 143 </div>
<div class="num"> 144 </div>
<div class="num"> 145 </div>
<div class="num"> 146 </div>
<div class="num"> 147 </div>
<div class="num"> 148 </div>
<div class="num"> 149 </div>
<div class="num"> 150 </div>
<div class="num"> 151 </div>
<div class="num"> 152 </div>
<div class="num"> 153 </div>
<div class="num"> 154 </div>
<div class="num"> 155 </div>
<div class="num"> 156 </div>
<div class="num"> 157 </div>
<div class="num"> 158 </div>
<div class="num"> 159 </div>
<div class="num"> 160 </div>
<div class="num"> 161 </div>
<div class="num"> 162 </div>
<div class="num"> 163 </div>
<div class="num"> 164 </div>
<div class="num"> 165 </div>
<div class="num"> 166 </div>
<div class="num"> 167 </div>
<div class="num"> 168 </div>
<div class="num"> 169 </div>
<div class="num"> 170 </div>
<div class="num"> 171 </div>
<div class="num"> 172 </div>
<div class="num"> 173 </div>
<div class="num"> 174 </div>
<div class="num"> 175 </div>
<div class="num"> 176 </div>
<div class="num"> 177 </div>
<div class="num"> 178 </div>
<div class="num"> 179 </div>
<div class="num"> 180 </div>
<div class="num"> 181 </div>
<div class="num"> 182 </div>
<div class="num"> 183 </div>
<div class="num"> 184 </div>
<div class="num"> 185 </div>
<div class="num"> 186 </div>
<div class="num"> 187 </div>
<div class="num"> 188 </div>
<div class="num"> 189 </div>
<div class="num"> 190 </div>
<div class="num"> 191 </div>
<div class="num"> 192 </div>
<div class="num"> 193 </div>
<div class="num"> 194 </div>
<div class="num"> 195 </div>
<div class="num"> 196 </div>
<div class="num"> 197 </div>
<div class="num"> 198 </div>
<div class="num"> 199 </div>
<div class="num"> 200 </div>
<div class="num"> 201 </div>
<div class="num"> 202 </div>
<div class="num"> 203 </div>
<div class="num"> 204 </div>
<div class="num"> 205 </div>
<div class="num"> 206 </div>
<div class="num"> 207 </div>
<div class="num"> 208 </div>
<div class="num"> 209 </div>
<div class="num"> 210 </div>
<div class="num"> 211 </div>
<div class="num"> 212 </div>
<div class="num"> 213 </div>
<div class="num"> 214 </div>
<div class="num"> 215 </div>
<div class="num"> 216 </div>
<div class="num"> 217 </div>
<div class="num"> 218 </div>
<div class="num"> 219 </div>
<div class="num"> 220 </div>
<div class="num"> 221 </div>
<div class="num"> 222 </div>
<div class="num"> 223 </div>
<div class="num"> 224 </div>
<div class="num"> 225 </div>
<div class="num"> 226 </div>
<div class="num"> 227 </div>
<div class="num"> 228 </div>
<div class="num"> 229 </div>
<div class="num"> 230 </div>
<div class="num"> 231 </div>
<div class="num"> 232 </div>
<div class="num"> 233 </div>
<div class="num"> 234 </div>
<div class="num"> 235 </div>
<div class="num"> 236 </div>
<div class="num"> 237 </div>
<div class="num"> 238 </div>
<div class="num"> 239 </div>
<div class="num"> 240 </div>
<div class="num"> 241 </div>
<div class="num"> 242 </div>
<div class="num"> 243 </div>
<div class="num"> 244 </div>
<div class="num"> 245 </div>
<div class="num"> 246 </div>
<div class="num"> 247 </div>
<div class="num"> 248 </div>
<div class="num"> 249 </div>
<div class="num"> 250 </div>
<div class="num"> 251 </div>
<div class="num"> 252 </div>
<div class="num"> 253 </div>
<div class="num"> 254 </div>
<div class="num"> 255 </div>
<div class="num"> 256 </div>
<div class="num"> 257 </div>
<div class="num"> 258 </div>
<div class="num"> 259 </div>
<div class="num"> 260 </div>
<div class="num"> 261 </div>
<div class="num"> 262 </div>
<div class="num"> 263 </div>
<div class="num"> 264 </div>
<div class="num"> 265 </div>
<div class="num"> 266 </div>
<div class="num"> 267 </div>
<div class="num"> 268 </div>
<div class="num"> 269 </div>
<div class="num"> 270 </div>
<div class="num"> 271 </div>
<div class="num"> 272 </div>
<div class="num"> 273 </div>
<div class="num"> 274 </div>
<div class="num"> 275 </div>
<div class="num"> 276 </div>
<div class="num"> 277 </div>
<div class="num"> 278 </div>
<div class="num"> 279 </div>
<div class="num"> 280 </div>
<div class="num"> 281 </div>
<div class="num"> 282 </div>
<div class="num"> 283 </div>
<div class="num"> 284 </div>
<div class="num"> 285 </div>
<div class="num"> 286 </div>
<div class="num"> 287 </div>
<div class="num"> 288 </div>
<div class="num"> 289 </div>
<div class="num"> 290 </div>
<div class="num"> 291 </div>
<div class="num"> 292 </div>
<div class="num"> 293 </div>
<div class="num"> 294 </div>
<div class="num"> 295 </div>
<div class="num"> 296 </div>
<div class="num"> 297 </div>
<div class="num"> 298 </div>
<div class="num"> 299 </div>
<div class="num"> 300 </div>
<div class="num"> 301 </div>
<div class="num"> 302 </div>
<div class="num"> 303 </div>
<div class="num"> 304 </div>
<div class="num"> 305 </div>
<div class="num"> 306 </div>
<div class="num"> 307 </div>
<div class="num"> 308 </div>
<div class="num"> 309 </div>
<div class="num"> 310 </div>
<div class="num"> 311 </div>
<div class="num"> 312 </div>
<div class="num"> 313 </div>
<div class="num"> 314 </div>
<div class="num"> 315 </div>
<div class="num"> 316 </div>
<div class="num"> 317 </div>
<div class="num"> 318 </div>
<div class="num"> 319 </div>
<div class="num"> 320 </div>
<div class="num"> 321 </div>
<div class="num"> 322 </div>
<div class="num"> 323 </div>
<div class="num"> 324 </div>
<div class="num"> 325 </div>
<div class="num"> 326 </div>
<div class="num"> 327 </div>
<div class="num"> 328 </div>
<div class="num"> 329 </div>
<div class="num"> 330 </div>
<div class="num"> 331 </div>
<div class="num"> 332 </div>
<div class="num"> 333 </div>
<div class="num"> 334 </div>
<div class="num"> 335 </div>
<div class="num"> 336 </div>
<div class="num"> 337 </div>
<div class="num"> 338 </div>
<div class="num"> 339 </div>
<div class="num"> 340 </div>
<div class="num"> 341 </div>
<div class="num"> 342 </div>
<div class="num"> 343 </div>
<div class="num"> 344 </div>
<div class="num"> 345 </div>
<div class="num"> 346 </div>
<div class="num"> 347 </div>
<div class="num"> 348 </div>
<div class="num"> 349 </div>
<div class="num"> 350 </div>
<div class="num"> 351 </div>
<div class="num"> 352 </div>
<div class="num"> 353 </div>
<div class="num"> 354 </div>
<div class="num"> 355 </div>
<div class="num"> 356 </div>
<div class="num"> 357 </div>
<div class="num"> 358 </div>
<div class="num"> 359 </div>
<div class="num"> 360 </div>
<div class="num"> 361 </div>
<div class="num"> 362 </div>
<div class="num"> 363 </div>
<div class="num"> 364 </div>
<div class="num"> 365 </div>
<div class="num"> 366 </div>
<div class="num"> 367 </div>
<div class="num"> 368 </div>
<div class="num"> 369 </div>
<div class="num"> 370 </div>
<div class="num"> 371 </div>
<div class="num"> 372 </div>
<div class="num"> 373 </div>
<div class="num"> 374 </div>
<div class="num"> 375 </div>
<div class="num"> 376 </div>
<div class="num"> 377 </div>
<div class="num"> 378 </div>
<div class="num"> 379 </div>
<div class="num"> 380 </div>
<div class="num"> 381 </div>
<div class="num"> 382 </div>
<div class="num"> 383 </div>
<div class="num"> 384 </div>
<div class="num"> 385 </div>
<div class="num"> 386 </div>
<div class="num"> 387 </div>
<div class="num"> 388 </div>
<div class="num"> 389 </div>
<div class="num"> 390 </div>
<div class="num"> 391 </div>
<div class="num"> 392 </div>
<div class="num"> 393 </div>
<div class="num"> 394 </div>
<div class="num"> 395 </div>
<div class="num"> 396 </div>
<div class="num"> 397 </div>
<div class="num"> 398 </div>
<div class="num"> 399 </div>
<div class="num"> 400 </div>
<div class="num"> 401 </div>
<div class="num"> 402 </div>
<div class="num"> 403 </div>
<div class="num"> 404 </div>
<div class="num"> 405 </div>
<div class="num"> 406 </div>
<div class="num"> 407 </div>
<div class="num"> 408 </div>
<div class="num"> 409 </div>
<div class="num"> 410 </div>
<div class="num"> 411 </div>
<div class="num"> 412 </div>
<div class="num"> 413 </div>
<div class="num"> 414 </div>
<div class="num"> 415 </div>
<div class="num"> 416 </div>
<div class="num"> 417 </div>
<div class="num"> 418 </div>
<div class="num"> 419 </div>
<div class="num"> 420 </div>
<div class="num"> 421 </div>
<div class="num"> 422 </div>
<div class="num"> 423 </div>
<div class="num"> 424 </div>
<div class="num"> 425 </div>
<div class="num"> 426 </div>
<div class="num"> 427 </div>
<div class="num"> 428 </div>
<div class="num"> 429 </div>
<div class="num"> 430 </div>
<div class="num"> 431 </div>
<div class="num"> 432 </div>
<div class="num"> 433 </div>
<div class="num"> 434 </div>
<div class="num"> 435 </div>
<div class="num"> 436 </div>
<div class="num"> 437 </div>
<div class="num"> 438 </div>
<div class="num"> 439 </div>
<div class="num"> 440 </div>
<div class="num"> 441 </div>
<div class="num"> 442 </div>
<div class="num"> 443 </div>
<div class="num"> 444 </div>
<div class="num"> 445 </div>
<div class="num"> 446 </div>
<div class="num"> 447 </div>
<div class="num"> 448 </div>
<div class="num"> 449 </div>
<div class="num"> 450 </div>
<div class="num"> 451 </div>
<div class="num"> 452 </div>
<div class="num"> 453 </div>
<div class="num"> 454 </div>
<div class="num"> 455 </div>
<div class="num"> 456 </div>
<div class="num"> 457 </div>
<div class="num"> 458 </div>
<div class="num"> 459 </div>
<div class="num"> 460 </div>
<div class="num"> 461 </div>
<div class="num"> 462 </div>
<div class="num"> 463 </div>
<div class="num"> 464 </div>
<div class="num"> 465 </div>
<div class="num"> 466 </div>
<div class="num"> 467 </div>
<div class="num"> 468 </div>
<div class="num"> 469 </div>
<div class="num"> 470 </div>
<div class="num"> 471 </div>
<div class="num"> 472 </div>
<div class="num"> 473 </div>
<div class="num"> 474 </div>
<div class="num"> 475 </div>
<div class="num"> 476 </div>
<div class="num"> 477 </div>
<div class="num"> 478 </div>
<div class="num"> 479 </div>
<div class="num"> 480 </div>
<div class="num"> 481 </div>
<div class="num"> 482 </div>
<div class="num"> 483 </div>
<div class="num"> 484 </div>
<div class="num"> 485 </div>
<div class="num"> 486 </div>
<div class="num"> 487 </div>
<div class="num"> 488 </div>
<div class="num"> 489 </div>
<div class="num"> 490 </div>
<div class="num"> 491 </div>
<div class="num"> 492 </div>
<div class="num"> 493 </div>
<div class="num"> 494 </div>
<div class="num"> 495 </div>
<div class="num"> 496 </div>
<div class="num"> 497 </div>
<div class="num"> 498 </div>
<div class="num"> 499 </div>
<div class="num"> 500 </div>
<div class="num"> 501 </div>
<div class="num"> 502 </div>
<div class="num"> 503 </div>
<div class="num"> 504 </div>
<div class="num"> 505 </div>
<div class="num"> 506 </div>
<div class="num"> 507 </div>
<div class="num"> 508 </div>
<div class="num"> 509 </div>
<div class="num"> 510 </div>
<div class="num"> 511 </div>
<div class="num"> 512 </div>
<div class="num"> 513 </div>
<div class="num"> 514 </div>
<div class="num"> 515 </div>
<div class="num"> 516 </div>
<div class="num"> 517 </div>
<div class="num"> 518 </div>
<div class="num"> 519 </div>
<div class="num"> 520 </div>
<div class="num"> 521 </div>
<div class="num"> 522 </div>
<div class="num"> 523 </div>
<div class="num"> 524 </div>
<div class="num"> 525 </div>
<div class="num"> 526 </div>
<div class="num"> 527 </div>
<div class="num"> 528 </div>
<div class="num"> 529 </div>
<div class="num"> 530 </div>
<div class="num"> 531 </div>
<div class="num"> 532 </div>
<div class="num"> 533 </div>
<div class="num"> 534 </div>
<div class="num"> 535 </div>
<div class="num"> 536 </div>
<div class="num"> 537 </div>
<div class="num"> 538 </div>
<div class="num"> 539 </div>
<div class="num"> 540 </div>
<div class="num"> 541 </div>
<div class="num"> 542 </div>
<div class="num"> 543 </div>
<div class="num"> 544 </div>
<div class="num"> 545 </div>
<div class="num"> 546 </div>
<div class="num"> 547 </div>
<div class="num"> 548 </div>
<div class="num"> 549 </div>
<div class="num"> 550 </div>
<div class="num"> 551 </div>
<div class="num"> 552 </div>
<div class="num"> 553 </div>
<div class="num"> 554 </div>
<div class="num"> 555 </div>
<div class="num"> 556 </div>
<div class="num"> 557 </div>
<div class="num"> 558 </div>
<div class="num"> 559 </div>
<div class="num"> 560 </div>
<div class="num"> 561 </div>
<div class="num"> 562 </div>
<div class="num"> 563 </div>
<div class="num"> 564 </div>
<div class="num"> 565 </div>
<div class="num"> 566 </div>
<div class="num"> 567 </div>
<div class="num"> 568 </div>
<div class="num"> 569 </div>
<div class="num"> 570 </div>
<div class="num"> 571 </div>
<div class="num"> 572 </div>
<div class="num"> 573 </div>
<div class="num"> 574 </div>
<div class="num"> 575 </div>
<div class="num"> 576 </div>
<div class="num"> 577 </div>
<div class="num"> 578 </div>
<div class="num"> 579 </div>
<div class="num"> 580 </div>
<div class="num"> 581 </div>
<div class="num"> 582 </div>
<div class="num"> 583 </div>
<div class="num"> 584 </div>
<div class="num"> 585 </div>
<div class="num"> 586 </div>
<div class="num"> 587 </div>
<div class="num"> 588 </div>
<div class="num"> 589 </div>
<div class="num"> 590 </div>
<div class="num"> 591 </div>
<div class="num"> 592 </div>
<div class="num"> 593 </div>
<div class="num"> 594 </div>
<div class="num"> 595 </div>
<div class="num"> 596 </div>
<div class="num"> 597 </div>
<div class="num"> 598 </div>
<div class="num"> 599 </div>
<div class="num"> 600 </div>
<div class="num"> 601 </div>
<div class="num"> 602 </div>
<div class="num"> 603 </div>
<div class="num"> 604 </div>
<div class="num"> 605 </div>
<div class="num"> 606 </div>
<div class="num"> 607 </div>
<div class="num"> 608 </div>
<div class="num"> 609 </div>
<div class="num"> 610 </div>
<div class="num"> 611 </div>
<div class="num"> 612 </div>
<div class="num"> 613 </div>
<div class="num"> 614 </div>
<div class="num"> 615 </div>
<div class="num"> 616 </div>
<div class="num"> 617 </div>
<div class="num"> 618 </div>
<div class="num"> 619 </div>
<div class="num"> 620 </div>
<div class="num"> 621 </div>
<div class="num"> 622 </div>
<div class="num"> 623 </div>
<div class="num"> 624 </div>
<div class="num"> 625 </div>
<div class="num"> 626 </div>
<div class="num"> 627 </div>
<div class="num"> 628 </div>
<div class="num"> 629 </div>
<div class="num"> 630 </div>
<div class="num"> 631 </div>
<div class="num"> 632 </div>
<div class="num"> 633 </div>
<div class="num"> 634 </div>
<div class="num"> 635 </div>
<div class="num"> 636 </div>
<div class="num"> 637 </div>
<div class="num"> 638 </div>
<div class="num"> 639 </div>
<div class="num"> 640 </div>
<div class="num"> 641 </div>
<div class="num"> 642 </div>
<div class="num"> 643 </div>
<div class="num"> 644 </div>
<div class="num"> 645 </div>
<div class="num"> 646 </div>
<div class="num"> 647 </div>
<div class="num"> 648 </div>
<div class="num"> 649 </div>
<div class="num"> 650 </div>
<div class="num"> 651 </div>
<div class="num"> 652 </div>
<div class="num"> 653 </div>
<div class="num"> 654 </div>
<div class="num"> 655 </div>
<div class="num"> 656 </div>
<div class="num"> 657 </div>
<div class="num"> 658 </div>
<div class="num"> 659 </div>
<div class="num"> 660 </div>
<div class="num"> 661 </div>
<div class="num"> 662 </div>
<div class="num"> 663 </div>
<div class="num"> 664 </div>
<div class="num"> 665 </div>
<div class="num"> 666 </div>
<div class="num"> 667 </div>
<div class="num"> 668 </div>
<div class="num"> 669 </div>
<div class="num"> 670 </div>
<div class="num"> 671 </div>
<div class="num"> 672 </div>
<div class="num"> 673 </div>
<div class="num"> 674 </div>
<div class="num"> 675 </div>
<div class="num"> 676 </div>
<div class="num"> 677 </div>
<div class="num"> 678 </div>
<div class="num"> 679 </div>
<div class="num"> 680 </div>
<div class="num"> 681 </div>
<div class="num"> 682 </div>
<div class="num"> 683 </div>
<div class="num"> 684 </div>
<div class="num"> 685 </div>
<div class="num"> 686 </div>
<div class="num"> 687 </div>
<div class="num"> 688 </div>
<div class="num"> 689 </div>
<div class="num"> 690 </div>
<div class="num"> 691 </div>
<div class="num"> 692 </div>
<div class="num"> 693 </div>
<div class="num"> 694 </div>
<div class="num"> 695 </div>
<div class="num"> 696 </div>
<div class="num"> 697 </div>
<div class="num"> 698 </div>
<div class="num"> 699 </div>
<div class="num"> 700 </div>
<div class="num"> 701 </div>
<div class="num"> 702 </div>
<div class="num"> 703 </div>
<div class="num"> 704 </div>
<div class="num"> 705 </div>
<div class="num"> 706 </div>
<div class="num"> 707 </div>
<div class="num"> 708 </div>
<div class="num"> 709 </div>
<div class="num"> 710 </div>
<div class="num"> 711 </div>
<div class="num"> 712 </div>
<div class="num"> 713 </div>
<div class="num"> 714 </div>
<div class="num"> 715 </div>
<div class="num"> 716 </div>
<div class="num"> 717 </div>
<div class="num"> 718 </div>
<div class="num"> 719 </div>
<div class="num"> 720 </div>
<div class="num"> 721 </div>
<div class="num"> 722 </div>
<div class="num"> 723 </div>
<div class="num"> 724 </div>
<div class="num"> 725 </div>
<div class="num"> 726 </div>
<div class="num"> 727 </div>
<div class="num"> 728 </div>
<div class="num"> 729 </div>
<div class="num"> 730 </div>
<div class="num"> 731 </div>
<div class="num"> 732 </div>
<div class="num"> 733 </div>
<div class="num"> 734 </div>
<div class="num"> 735 </div>
<div class="num"> 736 </div>
<div class="num"> 737 </div>
<div class="num"> 738 </div>
<div class="num"> 739 </div>
<div class="num"> 740 </div>
<div class="num"> 741 </div>
<div class="num"> 742 </div>
<div class="num"> 743 </div>
<div class="num"> 744 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 745 </div>
<div class="num"> 746 </div>
<div class="num"> 747 </div>
<div class="num"> 748 </div>
<div class="num"> 749 </div>
<div class="num"> 750 </div>
<div class="num"> 751 </div>
<div class="num"> 752 </div>
<div class="num"> 753 </div>
<div class="num"> 754 </div>
<div class="num"> 755 </div>
<div class="num"> 756 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 757 </div>
<div class="num"> 758 </div>
<div class="num"> 759 </div>
<div class="num"> 760 </div>
<div class="num"> 761 </div>
<div class="num"> 762 </div>
<div class="num"> 763 </div>
<div class="num"> 764 </div>
<div class="num"> 765 </div>
<div class="num"> 766 </div>
<div class="num"> 767 </div>
<div class="num"> 768 </div>
<div class="num"> 769 </div>
<div class="num"> 770 </div>
<div class="num"> 771 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 772 </div>
<div class="num"> 773 </div>
<div class="num"> 774 </div>
<div class="num"> 775 </div>
<div class="num"> 776 </div>
<div class="num"> 777 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 778 </div>
<div class="num"> 779 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 780 </div>
<div class="num"> 781 </div>
<div class="num"> 782 </div>
<div class="num"> 783 </div>
<div class="num"> 784 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 785 </div>
<div class="num"> 786 </div>
<div class="num"> 787 </div>
<div class="num"> 788 </div>
<div class="num"> 789 </div>
<div class="num"> 790 </div>
<div class="num"> 791 </div>
<div class="num"> 792 </div>
<div class="num"> 793 </div>
<div class="num"> 794 </div>
<div class="num"> 795 </div>
<div class="num"> 796 </div>
<div class="num"> 797 </div>
<div class="num"> 798 </div>
<div class="num"> 799 </div>
<div class="num"> 800 </div>
<div class="num"> 801 </div>
<div class="num"> 802 </div>
<div class="num"> 803 </div>
<div class="num"> 804 </div>
<div class="num"> 805 </div>
<div class="num"> 806 </div>
<div class="num"> 807 </div>
<div class="num"> 808 </div>
<div class="num"> 809 </div>
<div class="num"> 810 </div>
<div class="num"> 811 </div>
<div class="num"> 812 </div>
<div class="num"> 813 </div>
<div class="num"> 814 </div>
<div class="num"> 815 </div>
<div class="num"> 816 </div>
<div class="num"> 817 </div>
<div class="num"> 818 </div>
<div class="num"> 819 </div>
<div class="num"> 820 </div>
<div class="num"> 821 </div>
<div class="num"> 822 </div>
<div class="num"> 823 </div>
<div class="num"> 824 </div>
<div class="num"> 825 </div>
<div class="num"> 826 </div>
<div class="num"> 827 </div>
<div class="num"> 828 </div>
<div class="num"> 829 </div>
<div class="num"> 830 </div>
<div class="num"> 831 </div>
<div class="num"> 832 </div>
<div class="num"> 833 </div>
<div class="num"> 834 </div>
<div class="num"> 835 </div>
<div class="num"> 836 </div>
<div class="num"> 837 </div>
<div class="num"> 838 </div>
<div class="num"> 839 </div>
<div class="num"> 840 </div>
<div class="num"> 841 </div>
<div class="num"> 842 </div>
<div class="num"> 843 </div>
<div class="num"> 844 </div>
<div class="num"> 845 </div>
<div class="num"> 846 </div>
<div class="num"> 847 </div>
<div class="num"> 848 </div>
<div class="num"> 849 </div>
<div class="num"> 850 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 851 </div>
<div class="num"> 852 </div>
<div class="num"> 853 </div>
<div class="num"> 854 </div>
<div class="num"> 855 </div>
<div class="num"> 856 </div>
<div class="num"> 857 </div>
<div class="num"> 858 </div>
<div class="num"> 859 </div>
<div class="num"> 860 </div>
<div class="num"> 861 </div>
<div class="num"> 862 </div>
<div class="num"> 863 </div>
<div class="num"> 864 </div>
<div class="num"> 865 </div>
<div class="num"> 866 </div>
<div class="num"> 867 </div>
<div class="num"> 868 </div>
<div class="num"> 869 </div>
<div class="num"> 870 </div>
<div class="num"> 871 </div>
<div class="num"> 872 </div>
<div class="num"> 873 </div>
<div class="num"> 874 </div>
<div class="num"> 875 </div>
<div class="num"> 876 </div>
<div class="num"> 877 </div>
<div class="num"> 878 </div>
<div class="num"> 879 </div>
<div class="num"> 880 </div>
<div class="num"> 881 </div>
<div class="num"> 882 </div>
<div class="num"> 883 </div>
<div class="num"> 884 </div>
<div class="num"> 885 </div>
<div class="num"> 886 </div>
<div class="num"> 887 </div>
<div class="num"> 888 </div>
<div class="num"> 889 </div>
<div class="num"> 890 </div>
<div class="num"> 891 </div>
<div class="num"> 892 </div>
<div class="num"> 893 </div>
<div class="num"> 894 </div>
<div class="num"> 895 </div>
<div class="num"> 896 </div>
<div class="num"> 897 </div>
<div class="num"> 898 </div>
<div class="num"> 899 </div>
<div class="num"> 900 </div>
<div class="num"> 901 </div>
<div class="num"> 902 </div>
<div class="num"> 903 </div>
<div class="num"> 904 </div>
<div class="num"> 905 </div>
<div class="num"> 906 </div>
<div class="num"> 907 </div>
<div class="num"> 908 </div>
<div class="num"> 909 </div>
<div class="num"> 910 </div>
<div class="num"> 911 </div>
<div class="num"> 912 </div>
<div class="num"> 913 </div>
<div class="num"> 914 </div>
<div class="num"> 915 </div>
<div class="num"> 916 </div>
<div class="num"> 917 </div>
<div class="num"> 918 </div>
<div class="num"> 919 </div>
<div class="num"> 920 </div>
<div class="num"> 921 </div>
<div class="num"> 922 </div>
<div class="num"> 923 </div>
<div class="num"> 924 </div>
<div class="num"> 925 </div>
<div class="num"> 926 </div>
<div class="num"> 927 </div>
<div class="num"> 928 </div>
<div class="num"> 929 </div>
<div class="num"> 930 </div>
<div class="num"> 931 </div>
<div class="num"> 932 </div>
<div class="num"> 933 </div>
<div class="num"> 934 </div>
<div class="num"> 935 </div>
<div class="num"> 936 </div>
<div class="num"> 937 </div>
<div class="num"> 938 </div>
<div class="num"> 939 </div>
<div class="num"> 940 </div>
<div class="num"> 941 </div>
<div class="num"> 942 </div>
<div class="num"> 943 </div>
<div class="num"> 944 </div>
<div class="num"> 945 </div>
<div class="num"> 946 </div>
<div class="num"> 947 </div>
<div class="num"> 948 </div>
<div class="num"> 949 </div>
<div class="num"> 950 </div>
<div class="num"> 951 </div>
<div class="num"> 952 </div>
<div class="num"> 953 </div>
<div class="num"> 954 </div>
<div class="num"> 955 </div>
<div class="num"> 956 </div>
<div class="num"> 957 </div>
<div class="num"> 958 </div>
<div class="num"> 959 </div>
<div class="num"> 960 </div>
<div class="num"> 961 </div>
<div class="num"> 962 </div>
<div class="num"> 963 </div>
<div class="num"> 964 </div>
<div class="num"> 965 </div>
<div class="num"> 966 </div>
<div class="num"> 967 </div>
<div class="num"> 968 </div>
<div class="num"> 969 </div>
<div class="num"> 970 </div>
<div class="num"> 971 </div>
<div class="num"> 972 </div>
<div class="num"> 973 </div>
<div class="num"> 974 </div>
<div class="num"> 975 </div>
<div class="num"> 976 </div>
<div class="num"> 977 </div>
<div class="num"> 978 </div>
<div class="num"> 979 </div>
<div class="num"> 980 </div>
<div class="num"> 981 </div>
<div class="num"> 982 </div>
<div class="num"> 983 </div>
<div class="num"> 984 </div>
<div class="num"> 985 </div>
<div class="num"> 986 </div>
<div class="num"> 987 </div>
<div class="num"> 988 </div>
<div class="num"> 989 </div>
<div class="num"> 990 </div>
<div class="num"> 991 </div>
<div class="num"> 992 </div>
<div class="num"> 993 </div>
<div class="num"> 994 </div>
<div class="num"> 995 </div>
<div class="num"> 996 </div>
<div class="num"> 997 </div>
<div class="num"> 998 </div>
<div class="num"> 999 </div>
<div class="num">1000 </div>
<div class="num">1001 </div>
<div class="num">1002 </div>
<div class="num">1003 </div>
<div class="num">1004 </div>
<div class="num">1005 </div>
<div class="num">1006 </div>
<div class="num">1007 </div>
<div class="num">1008 </div>
<div class="num">1009 </div>
<div class="num">1010 </div>
<div class="num">1011 </div>
<div class="num">1012 </div>
<div class="num">1013 </div>
<div class="num">1014 </div>
<div class="num">1015 </div>
<div class="num">1016 </div>
<div class="num">1017 </div>
<div class="num">1018 </div>
<div class="num">1019 </div>
<div class="num">1020 </div>
<div class="num">1021 </div>
<div class="num">1022 </div>
<div class="num">1023 </div>
<div class="num">1024 </div>
<div class="num">1025 </div>
<div class="num">1026 </div>
<div class="num">1027 </div>
<div class="num">1028 </div>
<div class="num">1029 </div>
<div class="num">1030 </div>
<div class="num">1031 </div>
<div class="num">1032 </div>
<div class="num">1033 </div>
<div class="num">1034 </div>
<div class="num">1035 </div>
<div class="num">1036 </div>
<div class="num">1037 </div>
<div class="num">1038 </div>
<div class="num">1039 </div>
<div class="num">1040 </div>
<div class="num">1041 </div>
<div class="num">1042 </div>
<div class="num">1043 </div>
<div class="num">1044 </div>
<div class="num">1045 </div>
<div class="num">1046 </div>
<div class="num">1047 </div>
<div class="num">1048 </div>
<div class="num">1049 </div>
<div class="num">1050 </div>
<div class="num">1051 </div>
<div class="num">1052 </div>
<div class="num">1053 </div>
<div class="num">1054 </div>
<div class="num">1055 </div>
<div class="num">1056 </div>
<div class="num">1057 </div>
<div class="num">1058 </div>
<div class="num">1059 </div>
<div class="num">1060 </div>
<div class="num">1061 </div>
<div class="num">1062 </div>
<div class="num">1063 </div>
<div class="num">1064 </div>
<div class="num">1065 </div>
<div class="num">1066 </div>
<div class="num">1067 </div>
<div class="num">1068 </div>
<div class="num">1069 </div>
<div class="num">1070 </div>
<div class="num">1071 </div>
<div class="num">1072 </div>
<div class="num">1073 </div>
<div class="num">1074 </div>
<div class="num">1075 </div>
<div class="num">1076 </div>
<div class="num">1077 </div>
<div class="num">1078 </div>
<div class="num">1079 </div>
<div class="num">1080 </div>
<div class="num">1081 </div>
<div class="num">1082 </div>
<div class="num">1083 </div>
<div class="num">1084 </div>
<div class="num">1085 </div>
<div class="num">1086 </div>
<div class="num">1087 </div>
<div class="num">1088 </div>
<div class="num">1089 </div>
<div class="num">1090 </div>
<div class="num">1091 </div>
<div class="num">1092 </div>
<div class="num">1093 </div>
<div class="num">1094 </div>
<div class="num">1095 </div>
<div class="num">1096 </div>
<div class="num">1097 </div>
<div class="num">1098 </div>
<div class="num">1099 </div>
<div class="num">1100 </div>
<div class="num">1101 </div>
<div class="num">1102 </div>
<div class="num">1103 </div>
<div class="num">1104 </div>
<div class="num">1105 </div>
<div class="num">1106 </div>
<div class="num">1107 </div>
<div class="num">1108 </div>
<div class="num">1109 </div>
<div class="num">1110 </div>
<div class="num">1111 </div>
<div class="num">1112 </div>
<div class="num">1113 </div>
<div class="num">1114 </div>
<div class="num">1115 </div>
<div class="num">1116 </div>
<div class="num">1117 </div>
<div class="num">1118 </div>
<div class="num">1119 </div>
<div class="num">1120 </div>
<div class="num">1121 </div>
<div class="num">1122 </div>
<div class="num">1123 </div>
<div class="num">1124 </div>
<div class="num">1125 </div>
<div class="num">1126 </div>
<div class="num">1127 </div>
<div class="num">1128 </div>
<div class="num">1129 </div>
<div class="num">1130 </div>
<div class="num">1131 </div>
<div class="num">1132 </div>
<div class="num">1133 </div>
<div class="num">1134 </div>
<div class="num">1135 </div>
<div class="num">1136 </div>
<div class="num">1137 </div>
<div class="num">1138 </div>
<div class="num">1139 </div>
<div class="num">1140 </div>
<div class="num">1141 </div>
<div class="num">1142 </div>
<div class="num">1143 </div>
<div class="num">1144 </div>
<div class="num">1145 </div>
<div class="num">1146 </div>
<div class="num">1147 </div>
<div class="num">1148 </div>
<div class="num">1149 </div>
<div class="num">1150 </div>
<div class="num">1151 </div>
<div class="num">1152 </div>
<div class="num">1153 </div>
<div class="num">1154 </div>
<div class="num">1155 </div>
<div class="num">1156 </div>
<div class="num">1157 </div>
<div class="num">1158 </div>
<div class="num">1159 </div>
<div class="num">1160 </div>
<div class="num">1161 </div>
<div class="num">1162 </div>
<div class="num">1163 </div>
<div class="num">1164 </div>
<div class="num">1165 </div>
<div class="num">1166 </div>
<div class="num">1167 </div>
<div class="num">1168 </div>
<div class="num">1169 </div>
<div class="num">1170 </div>
<div class="num">1171 </div>
<div class="num">1172 </div>
<div class="num">1173 </div>
<div class="num">1174 </div>
<div class="num">1175 </div>
<div class="num">1176 </div>
<div class="num">1177 </div>
<div class="num">1178 </div>
<div class="num">1179 </div>
<div class="num">1180 </div>
<div class="num">1181 </div>
<div class="num">1182 </div>
<div class="num">1183 </div>
<div class="num">1184 </div>
<div class="num">1185 </div>
<div class="num">1186 </div>
<div class="num">1187 </div>
<div class="num">1188 </div>
<div class="num">1189 </div>
<div class="num">1190 </div>
<div class="num">1191 </div>
<div class="num">1192 </div>
<div class="num">1193 </div>
<div class="num">1194 </div>
<div class="num">1195 </div>
<div class="num">1196 </div>
<div class="num">1197 </div>
<div class="num">1198 </div>
<div class="num">1199 </div>
<div class="num">1200 </div>
<div class="num">1201 </div>
<div class="num">1202 </div>
<div class="num">1203 </div>
<div class="num">1204 </div>
<div class="num">1205 </div>
<div class="num">1206 </div>
<div class="num">1207 </div>
<div class="num">1208 </div>
<div class="num">1209 </div>
<div class="num">1210 </div>
<div class="num">1211 </div>
<div class="num">1212 </div>
<div class="num">1213 </div>
<div class="num">1214 </div>
<div class="num">1215 </div>
<div class="num">1216 </div>
<div class="num">1217 </div>
<div class="num">1218 </div>
<div class="num">1219 </div>
<div class="num">1220 </div>
<div class="num">1221 </div>
<div class="num">1222 </div>
<div class="num">1223 </div>
<div class="num">1224 </div>
<div class="num">1225 </div>
<div class="num">1226 </div>
<div class="num">1227 </div>
<div class="num">1228 </div>
<div class="num">1229 </div>
<div class="num">1230 </div>
<div class="num">1231 </div>
<div class="num">1232 </div>
<div class="num">1233 </div>
<div class="num">1234 </div>
<div class="num">1235 </div>
<div class="num">1236 </div>
<div class="num">1237 </div>
<div class="num">1238 </div>
<div class="num">1239 </div>
<div class="num">1240 </div>
<div class="num">1241 </div>
<div class="num">1242 </div>
<div class="num">1243 </div>
<div class="num">1244 </div>
<div class="num">1245 </div>
<div class="num">1246 </div>
<div class="num">1247 </div>
<div class="num">1248 </div>
<div class="num">1249 </div>
<div class="num">1250 </div>
<div class="num">1251 </div>
<div class="num">1252 </div>
<div class="num">1253 </div>
<div class="num">1254 </div>
<div class="num">1255 </div>
<div class="num">1256 </div>
<div class="num">1257 </div>
<div class="num">1258 </div>
<div class="num">1259 </div>
<div class="num">1260 </div>
<div class="num">1261 </div>
<div class="num">1262 </div>
<div class="num">1263 </div>
<div class="num">1264 </div>
<div class="num">1265 </div>
<div class="num">1266 </div>
<div class="num">1267 </div>
<div class="num">1268 </div>
<div class="num">1269 </div>
<div class="num">1270 </div>
<div class="num">1271 </div>
<div class="num">1272 </div>
<div class="num">1273 </div>
<div class="num">1274 </div>
<div class="num">1275 </div>
<div class="num">1276 </div>
<div class="num">1277 </div>
<div class="num">1278 </div>
<div class="num">1279 </div>
<div class="num">1280 </div>
<div class="num">1281 </div>
<div class="num">1282 </div>
<div class="num">1283 </div>
<div class="num">1284 </div>
<div class="num">1285 </div>
<div class="num">1286 </div>
<div class="num">1287 </div>
<div class="num">1288 </div>
<div class="num">1289 </div>
<div class="num">1290 </div>
<div class="num">1291 </div>
<div class="num">1292 </div>
<div class="num">1293 </div>
<div class="num">1294 </div>
<div class="num">1295 </div>
<div class="num">1296 </div>
<div class="num">1297 </div>
<div class="num">1298 </div>
<div class="num">1299 </div>
<div class="num">1300 </div>
<div class="num">1301 </div>
<div class="num">1302 </div>
<div class="num">1303 </div>
<div class="num">1304 </div>
<div class="num">1305 </div>
<div class="num">1306 </div>
<div class="num">1307 </div>
<div class="num">1308 </div>
<div class="num">1309 </div>
<div class="num">1310 </div>
<div class="num">1311 </div>
<div class="num">1312 </div>
<div class="num">1313 </div>
<div class="num">1314 </div>
<div class="num">1315 </div>
<div class="num">1316 </div>
<div class="num">1317 </div>
<div class="num">1318 </div>
<div class="num">1319 </div>
<div class="num">1320 </div>
<div class="num">1321 </div>
<div class="num">1322 </div>
<div class="num">1323 </div>
<div class="num">1324 </div>
<div class="num">1325 </div>
<div class="num">1326 </div>
<div class="num">1327 </div>
<div class="num">1328 </div>
<div class="num">1329 </div>
<div class="num">1330 </div>
<div class="num">1331 </div>
<div class="num">1332 </div>
<div class="num">1333 </div>
<div class="num">1334 </div>
<div class="num">1335 </div>
<div class="num">1336 </div>
<div class="num">1337 </div>
<div class="num">1338 </div>
<div class="num">1339 </div>
<div class="num">1340 </div>
<div class="num">1341 </div>
<div class="num">1342 </div>
<div class="num">1343 </div>
<div class="num">1344 </div>
<div class="num">1345 </div>
<div class="num">1346 </div>
<div class="num">1347 </div>
<div class="num">1348 </div>
<div class="num">1349 </div>
<div class="num">1350 </div>
<div class="num">1351 </div>
<div class="num">1352 </div>
<div class="num">1353 </div>
<div class="num">1354 </div>
<div class="num">1355 </div>
<div class="num">1356 </div>
<div class="num">1357 </div>
<div class="num">1358 </div>
<div class="num">1359 </div>
<div class="num">1360 </div>
<div class="num">1361 </div>
<div class="num">1362 </div>
<div class="num">1363 </div>
<div class="num">1364 </div>
<div class="num">1365 </div>
<div class="num">1366 </div>
<div class="num">1367 </div>
<div class="num">1368 </div>
<div class="num">1369 </div>
<div class="num">1370 </div>
<div class="num">1371 </div>
<div class="num">1372 </div>
<div class="num">1373 </div>
<div class="num">1374 </div>
<div class="num">1375 </div>
<div class="num">1376 </div>
<div class="num">1377 </div>
<div class="num">1378 </div>
<div class="num">1379 </div>
<div class="num">1380 </div>
<div class="num">1381 </div>
<div class="num">1382 </div>
<div class="num">1383 </div>
<div class="num">1384 </div>
<div class="num">1385 </div>
<div class="num">1386 </div>
<div class="num">1387 </div>
<div class="num">1388 </div>
<div class="num">1389 </div>
<div class="num">1390 </div>
<div class="num">1391 </div>
<div class="num">1392 </div>
<div class="num">1393 </div>
<div class="num">1394 </div>
<div class="num">1395 </div>
<div class="num">1396 </div>
<div class="num">1397 </div>
<div class="num">1398 </div>
<div class="num">1399 </div>
<div class="num">1400 </div>
<div class="num">1401 </div>
<div class="num">1402 </div>
<div class="num">1403 </div>
<div class="num">1404 </div>
<div class="num">1405 </div>
<div class="num">1406 </div>
<div class="num">1407 </div>
<div class="num">1408 </div>
<div class="num">1409 </div>
<div class="num">1410 </div>
<div class="num">1411 </div>
<div class="num">1412 </div>
<div class="num">1413 </div>
<div class="num">1414 </div>
<div class="num">1415 </div>
<div class="num">1416 </div>
<div class="num">1417 </div>
<div class="num">1418 </div>
<div class="num">1419 </div>
<div class="num">1420 </div>
<div class="num">1421 </div>
<div class="num">1422 </div>
<div class="num">1423 </div>
<div class="num">1424 </div>
<div class="num">1425 </div>
<div class="num">1426 </div>
<div class="num">1427 </div>
<div class="num">1428 </div>
<div class="num">1429 </div>
<div class="num">1430 </div>
<div class="num">1431 </div>
<div class="num">1432 </div>
<div class="num">1433 </div>
<div class="num">1434 </div>
<div class="num">1435 </div>
<div class="num">1436 </div>
<div class="num">1437 </div>
<div class="num">1438 </div>
<div class="num">1439 </div>
<div class="num">1440 </div>
<div class="num">1441 </div>
<div class="num">1442 </div>
<div class="num">1443 </div>
<div class="num">1444 </div>
<div class="num">1445 </div>
<div class="num">1446 </div>
<div class="num">1447 </div>
<div class="num">1448 </div>
<div class="num">1449 </div>
<div class="num">1450 </div>
<div class="num">1451 </div>
<div class="num">1452 </div>
<div class="num">1453 </div>
<div class="num">1454 </div>
<div class="num">1455 </div>
<div class="num">1456 </div>
<div class="num">1457 </div>
<div class="num">1458 </div>
<div class="num">1459 </div>
<div class="num">1460 </div>
<div class="num">1461 </div>
<div class="num">1462 </div>
<div class="num">1463 </div>
<div class="num">1464 </div>
<div class="num">1465 </div>
<div class="num">1466 </div>
<div class="num">1467 </div>
<div class="num">1468 </div>
<div class="num">1469 </div>
<div class="num">1470 </div>
<div class="num">1471 </div>
<div class="num">1472 </div>
<div class="num">1473 </div>
<div class="num">1474 </div>
<div class="num">1475 </div>
<div class="num">1476 </div>
<div class="num">1477 </div>
<div class="num">1478 </div>
<div class="num">1479 </div>
<div class="num">1480 </div>
<div class="num">1481 </div>
<div class="num">1482 </div>
<div class="num">1483 </div>
<div class="num">1484 </div>
<div class="num">1485 </div>
<div class="num">1486 </div>
<div class="num">1487 </div>
<div class="num">1488 </div>
<div class="num">1489 </div>
<div class="num">1490 </div>
<div class="num">1491 </div>
<div class="num">1492 </div>
<div class="num">1493 </div>
<div class="num">1494 </div>
<div class="num">1495 </div>
<div class="num">1496 </div>
<div class="num">1497 </div>
<div class="num">1498 </div>
<div class="num">1499 </div>
<div class="num">1500 </div>
<div class="num">1501 </div>
<div class="num">1502 </div>
<div class="num">1503 </div>
<div class="num">1504 </div>
<div class="num">1505 </div>
<div class="num">1506 </div>
<div class="num">1507 </div>
<div class="num">1508 </div>
<div class="num">1509 </div>
<div class="num">1510 </div>
<div class="num">1511 </div>
<div class="num">1512 </div>
<div class="num">1513 </div>
<div class="num">1514 </div>
<div class="num">1515 </div>
<div class="num">1516 </div>
<div class="num">1517 </div>
<div class="num">1518 </div>
<div class="num">1519 </div>
<div class="num">1520 </div>
<div class="num">1521 </div>
<div class="num">1522 </div>
<div class="num">1523 </div>
<div class="num">1524 </div>
<div class="num">1525 </div>
<div class="num">1526 </div>
<div class="num">1527 </div>
<div class="num">1528 </div>
<div class="num">1529 </div>
<div class="num">1530 </div>
<div class="num">1531 </div>
<div class="num">1532 </div>
<div class="num">1533 </div>
<div class="num">1534 </div>
<div class="num">1535 </div>
<div class="num">1536 </div>
<div class="num">1537 </div>
<div class="num">1538 </div>
<div class="num">1539 </div>
<div class="num">1540 </div>
<div class="num">1541 </div>
<div class="num">1542 </div>
<div class="num">1543 </div>
<div class="num">1544 </div>
<div class="num">1545 </div>
<div class="num">1546 </div>
<div class="num">1547 </div>
<div class="num">1548 </div>
<div class="num">1549 </div>
<div class="num">1550 </div>
<div class="num">1551 </div>
<div class="num">1552 </div>
<div class="num">1553 </div>
<div class="num">1554 </div>
<div class="num">1555 </div>
<div class="num">1556 </div>
<div class="num">1557 </div>
<div class="num">1558 </div>
<div class="num">1559 </div>
<div class="num">1560 </div>
<div class="num">1561 </div>
<div class="num">1562 </div>
<div class="num">1563 </div>
<div class="num">1564 </div>
<div class="num">1565 </div>
<div class="num">1566 </div>
<div class="num">1567 </div>
<div class="num">1568 </div>
<div class="num">1569 </div>
<div class="num">1570 </div>
<div class="num">1571 </div>
<div class="num">1572 </div>
<div class="num">1573 </div>
<div class="num">1574 </div>
<div class="num">1575 </div>
<div class="num">1576 </div>
<div class="num">1577 </div>
<div class="num">1578 </div>
<div class="num">1579 </div>
<div class="num">1580 </div>
<div class="num">1581 </div>
<div class="num">1582 </div>
<div class="num">1583 </div>
<div class="num">1584 </div>
<div class="num">1585 </div>
<div class="num">1586 </div>
<div class="num">1587 </div>
<div class="num">1588 </div>
<div class="num">1589 </div>
<div class="num">1590 </div>
<div class="num">1591 </div>
<div class="num">1592 </div>
<div class="num">1593 </div>
<div class="num">1594 </div>
<div class="num">1595 </div>
<div class="num">1596 </div>
<div class="num">1597 </div>
<div class="num">1598 </div>
<div class="num">1599 </div>
<div class="num">1600 </div>
<div class="num">1601 </div>
<div class="num">1602 </div>
<div class="num">1603 </div>
<div class="num">1604 </div>
<div class="num">1605 </div>
<div class="num">1606 </div>
<div class="num">1607 </div>
<div class="num">1608 </div>
<div class="num">1609 </div>
<div class="num">1610 </div>
<div class="num">1611 </div>
<div class="num">1612 </div>
<div class="num">1613 </div>
<div class="num">1614 </div>
<div class="num">1615 </div>
<div class="num">1616 </div>
<div class="num">1617 </div>
<div class="num">1618 </div>
<div class="num">1619 </div>
<div class="num">1620 </div>
<div class="num">1621 </div>
<div class="num">1622 </div>
<div class="num">1623 </div>
<div class="num">1624 </div>
<div class="num">1625 </div>
<div class="num">1626 </div>
<div class="num">1627 </div>
<div class="num">1628 </div>
<div class="num">1629 </div>
<div class="num">1630 </div>
<div class="num">1631 </div>
<div class="num">1632 </div>
<div class="num">1633 </div>
<div class="num">1634 </div>
<div class="num">1635 </div>
<div class="num">1636 </div>
<div class="num">1637 </div>
<div class="num">1638 </div>
<div class="num">1639 </div>
<div class="num">1640 </div>
<div class="num">1641 </div>
<div class="num">1642 </div>
<div class="num">1643 </div>
<div class="num">1644 </div>
<div class="num">1645 </div>
<div class="num">1646 </div>
<div class="num">1647 </div>
<div class="num">1648 </div>
<div class="num">1649 </div>
<div class="num">1650 </div>
<div class="num">1651 </div>
<div class="num">1652 </div>
<div class="num">1653 </div>
<div class="num">1654 </div>
<div class="num">1655 </div>
<div class="num">1656 </div>
<div class="num">1657 </div>
<div class="num">1658 </div>
<div class="num">1659 </div>
<div class="num">1660 </div>
<div class="num">1661 </div>
<div class="num">1662 </div>
<div class="num">1663 </div>
<div class="num">1664 </div>
<div class="num">1665 </div>
<div class="num">1666 </div>
<div class="num">1667 </div>
<div class="num">1668 </div>
<div class="num">1669 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// NOTICE :</span></div>
<div class="l li"><span class="s1-89">/// This script is the Mother of all script~!</span></div>
<div class="l li"><span class="s1-89">/// Everything that happens during the game will be controlled in this script.</span></div>
<div class="l li"><span class="s1-89">/// (with public references from support scripts too ofcourse.)</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">// ---</span></div>
<div class="l li"><span class="s1-89">// global access board checking enums</span></div>
<div class="l li"><span class="s1-89">// ---</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> Check{ UP, DOWN, LEFT, RIGHT, TopRight, TopLeft, BottomLeft, BottomRight}; </span><span class="s1-89">// for scenario check of match directions</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> Gravity{ UP, DOWN, LEFT, RIGHT};</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> BoardType{ Square, Hexagon};</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> SquareMode{ CrossType, Box9x9Type};</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> NewPieceMethod{ Appear, FallByGravity};</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> GameState{GamePending,GameActive,GameFinalizing,GameOver};</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">// special pieces</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> PowerType{ NONE,POWH ,POWV, POWT, POW5, POW6};</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">[RequireComponent(</span><span class="s1-90">typeof</span><span class="si">(CustomAnimations), </span><span class="s1-90">typeof</span><span class="si">(BoardLayout), </span><span class="s1-90">typeof</span><span class="si">(WinningConditions))]</span></div>
<div class="l li"><span class="si">[RequireComponent(</span><span class="s1-90">typeof</span><span class="si">(AudioPlayer), </span><span class="s1-90">typeof</span><span class="si">(VisualManager), </span><span class="s1-90">typeof</span><span class="si">(VisualizedGrid) )]</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> GameManager : MonoBehaviour {</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// GLOBAL VARIABLES</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The type of board you want to use for this game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> BoardType boardType = BoardType.Square;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If you have the original 'PoolManager' asset, and want to use the integrated pooling feature.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> usingPoolManager = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The current board's Width in boxes&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,20)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> boardWidth=4;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The current board's Height in boxes&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,20)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> boardHeight=4;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The current board's display size (visible in the Scene View if 'Show Grid' is enabled)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> size = 4; </span><span class="s1-89">// the size we want the board to be</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of spacing between each board box. (Does not affect board size)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(0.0f,100.0f)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> spacingPercentage = 0f; </span><span class="s1-89">// the percentage of spacing user wants</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of padding you want for the pieces inside the board box&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(0.0f,100.0f)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> paddingPercentage = 20f; </span><span class="s1-89">// the percentage of padding user wants</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> boxPadding = 0; </span><span class="s1-89">// the padding in each box **updated during &quot;Awake()&quot;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Visualize Grid : shows Corners of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showCorners = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Visualize Grid : shows the Grids of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showGrid = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Visualize Grid : shows the padded Tiles for the pieces of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showPaddedTile = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Visualize Grid : shows the extra information relating to the board grid in the scene view&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showToolTips = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The number of active colors in the game. (For non-special pieces)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,9)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> NumOfActiveType = 3; </span><span class="s1-89">// remember not to exceed the normalPieces array~!</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Helps eliminate pre-start game matches. (works best with minimum 3 active types)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> eliminatePreStartMatch = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;if Enabled, Players can only swipe when the board has settled during the last move.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> moveOnlyAfterSettle = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// must the player wait for board to settle before next move?</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If Enabled, each move the player takes resets the current Combo.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> movingResetsCombo = </span><span class="s1-90">true</span><span class="si">;</span><span class="s1-89">// player moving will reset the combo?</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;How the new pieces will be created after being destroyed.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> NewPieceMethod newPieceMode = NewPieceMethod.FallByGravity;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// appear type...</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s1-85">&quot;The delay before the new pieces start appearing in 'Appear Mode'&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> appearModeDelay = 0.6f;</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s1-85">&quot;How fast the new piece will appear in 'Appear Mode' after the delay.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> appearModeSpeed = 0.8f;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// gravity type...</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s1-85">&quot;if Enabled, the pieces will be delayed (by the specified amount) before any gravity call&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> delayedGravity = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// delay before a piece drops when there's an empty space</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s1-85">&quot;The amount of delay before gravity takes affect for each individual piece.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> gravityDelayTime = 0.3f; </span><span class="s1-89">// the delay in float seconds</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s1-85">&quot;How fast the pieces will drop to the next board box.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> gravityDropSpeed = 0.25f;</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s1-85">&quot;Makes the pieces drop faster the longer the distance to the bottom.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> acceleratedVelocity = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// drop pieces fall faster if it need to cover more distance</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s1-85">&quot;Give an extra effect when pieces reach the bottom of the box (hardcoded effect)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> pieceDropExtraEffect = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s1-85">&quot;The current gravity direction for the board.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> Gravity currentGravity = Gravity.DOWN; </span><span class="s1-89">// initial gravity of the game</span></div>
<div class="l li"><span class="si">        Vector3 gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">        BoardDirection[] bd = </span><span class="s1-90">null</span><span class="si">; </span><span class="s1-89">// the direction array for landslide</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The speed for the next Match-Check by the Game Engine&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> matchCheckSpeed = 0.2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The update speed for the Game Engine (the routine checks of Gravity &amp; possible moves)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> gameUpdateSpeed = 0.2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of delay before the board initiates a board reset when no more moves are available.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> noMoreMoveResetTime = 2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of delay before the board shows the player a legal suggested move.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> suggestionTimer = 5f;</span></div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The speed the pieces will switch with each other.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> gemSwitchSpeed = 0.2f;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// pieces &amp; panels prefabs</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The reference for the PieceManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject pieceManager;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The reference for the PanelManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject panelManager;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The reference for the PanelManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject subPanelManager;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> PieceDefinition[] pieceTypes;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> PanelDefinition[] panelTypes;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> SubPanelDefinition[] subPanelTypes;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Board[,] board; </span><span class="s1-89">// the board array</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel[,,] subPanelH; </span><span class="s1-89">// the sub-panel array on the horizontal axis</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel[,] subPanelV; </span><span class="s1-89">// the sub-panel array on the vertical axis</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// scoring stuff</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">long</span><span class="si"> score = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> currentCombo = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> maxCombo = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> ComboPopUp comboScript;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> moves = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] matchCount = </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[9];</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// suggestion variables</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> checkedPossibleMove = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isCheckingPossibleMoves = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    List&lt;GameObject&gt; suggestedPieces = </span><span class="s1-90">new</span><span class="si"> List&lt;GameObject&gt;(); </span><span class="s1-89">// to hold all the possible moves</span></div>
<div class="l li"><span class="si">    List&lt;Board&gt; suggestedBoards = </span><span class="s1-90">new</span><span class="si"> List&lt;Board&gt;(); </span><span class="s1-89">// to hold all the possible moves</span></div>
<div class="l la d2"> </div>
<div class="l li"><span class="si">    Vector3 pieceOriginalSize;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> canMove = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// switch to determine if player can make the next move</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// other helper scripts</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> AudioPlayer audioScript;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> CustomAnimations animScript;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// environment control variable</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> GameState gameState = GameState.GameActive;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    Vector3 currentPosition;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">float</span><span class="si"> currentSize;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ENGINE FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ================================================</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Easy Access Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Easy Access FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// an easy access function to call the board from an int-array</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Board iBoard(</span><span class="s1-90">int</span><span class="si">[] arrayRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> board[arrayRef[0],arrayRef[1]];</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector3 getBoardPosition(</span><span class="s1-90">int</span><span class="si">[] boardPosition){ </span><span class="s1-89">// OVERLOAD METHOD for int array</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> board[boardPosition[0],boardPosition[1]].position;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector3 getBoardPosition(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){ </span><span class="s1-89">// OVERLOAD METHOD for int x &amp; y</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> board[x,y].position;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Easy Access Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region pre-game functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> preGameSetup(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// call the board panels preGameSetup...</span></div>
<div class="l li"><span class="si">        GetComponent&lt;BoardLayout&gt;().setupGamePanels();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// call the board piece preGameSetup...</span></div>
<div class="l li"><span class="si">        GetComponent&lt;BoardLayout&gt;().setupGamePieces();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion pre-game functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Misc Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Misc. functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// start game preparation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> initializeGame() {</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        boxPadding = 1f-(paddingPercentage/100); </span><span class="s1-89">// set the padding value</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        pieceTypes = pieceManager.GetComponents&lt;PieceDefinition&gt;();</span></div>
<div class="l li"><span class="si">        panelTypes = panelManager.GetComponents&lt;PanelDefinition&gt;();</span></div>
<div class="l li"><span class="si">        subPanelTypes = subPanelManager.GetComponents&lt;SubPanelDefinition&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// support sub-scripts initialization</span></div>
<div class="l li"><span class="si">        audioScript = GetComponent&lt;AudioPlayer&gt;();</span></div>
<div class="l li"><span class="si">        animScript = GetComponent&lt;CustomAnimations&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// creates a 2D board</span></div>
<div class="l li"><span class="si">        board = </span><span class="s1-90">new</span><span class="si"> Board[boardWidth,boardHeight];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// loop to create the board with blocks</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-89">/// For square type</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) { </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) { </span><span class="s1-89">// for the board height size</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                    Vector3 pos = </span><span class="s1-90">new</span><span class="si"> Vector3( x - (boardWidth/2.0f) + 0.5f, y -(boardHeight/2.0f) + 0.5f, 0);</span></div>
<div class="l li"><span class="si">                    board[x,y] = </span><span class="s1-90">new</span><span class="si"> Board(</span><span class="s1-90">this</span><span class="si">, </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[2]{x,y}, pos*size ) ;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            subPanelV = </span><span class="s1-90">new</span><span class="si"> SubBoardPanel[boardWidth+1,boardHeight+1]; </span><span class="s1-89">// create subPanels-V</span></div>
<div class="l li"><span class="si">            subPanelH = </span><span class="s1-90">new</span><span class="si"> SubBoardPanel[boardWidth+1,boardHeight+1,1]; </span><span class="s1-89">// create subPanels-H</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth+1; x++) { </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight+1; y++) { </span><span class="s1-89">// for the board height size</span></div>
<div class="l li"><span class="si">                    subPanelV[x,y] = </span><span class="s1-90">new</span><span class="si"> SubBoardPanel();</span></div>
<div class="l li"><span class="si">                    subPanelH[x,y,0] = </span><span class="s1-90">new</span><span class="si"> SubBoardPanel();</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon : </span><span class="s1-89">/// For hexagon type</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) { </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) { </span><span class="s1-89">// for the board height size</span></div>
<div class="l li"><span class="si">                    Vector3 pos;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(x%2 == 0){ </span><span class="s1-89">// displacement for hexagon type</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                        pos = </span><span class="s1-90">new</span><span class="si"> Vector3( (x - (boardWidth/2.0f) + 0.5f)*0.865f, y -(boardHeight/2.0f) + 0.75f, 0);</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                        pos = </span><span class="s1-90">new</span><span class="si"> Vector3( (x - (boardWidth/2.0f) + 0.5f)*0.865f, y -(boardHeight/2.0f) + 0.25f, 0);</span></div>
<div class="l li"><span class="si">                    } </span></div>
<div class="l li"><span class="si">                    board[x,y] = </span><span class="s1-90">new</span><span class="si"> Board(</span><span class="s1-90">this</span><span class="si">, </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[2]{x,y}, pos*size ) ;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            subPanelV = </span><span class="s1-90">new</span><span class="si"> SubBoardPanel[boardWidth+1,boardHeight+1]; </span><span class="s1-89">// create subPanels-V</span></div>
<div class="l li"><span class="si">            subPanelH = </span><span class="s1-90">new</span><span class="si"> SubBoardPanel[boardWidth+1,boardHeight+1,2]; </span><span class="s1-89">// create subPanels-H</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth+1; x++) { </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight+1; y++) { </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">                    subPanelV[x,y] = </span><span class="s1-90">new</span><span class="si"> SubBoardPanel();</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> z = 0; z &lt; 2; z++) { </span><span class="s1-89">// for the board height size</span></div>
<div class="l li"><span class="si">                        subPanelH[x,y,z] = </span><span class="s1-90">new</span><span class="si"> SubBoardPanel();</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.initNeighbourReferences();</span></div>
<div class="l li"><span class="si">            _board.syncSubPanelReference();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the gravity check as a function call - to keep the updater() neat</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> gravityCheck(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth ; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                dropPieces(x,y);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// primarily for the suggestion functions... but you can do other stuff when the board change as you like...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> notifyBoardHasChanged(){</span></div>
<div class="l li"><span class="si">        checkedPossibleMove = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// board has changed, will check possible moves again</span></div>
<div class="l li"><span class="si">        StopCoroutine(</span><span class="s1-85">&quot;suggestPiece&quot;</span><span class="si">); </span><span class="s1-89">// clears the suggestion animation if any</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// increase the combo counter &amp; display to GUI(dont worry, combo is reset elsewhere)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> increaseCombo() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// increase combo count!</span></div>
<div class="l li"><span class="si">        currentCombo += 1;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        JMFRelay.onCombo();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// relay to the combo script</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(currentCombo &gt; 1 &amp;&amp; comboScript != </span><span class="s1-90">null</span><span class="si">){ </span><span class="s1-89">// only show if 2 or more combo</span></div>
<div class="l li"><span class="si">            comboScript.StopCoroutine(</span><span class="s1-85">&quot;displayCombo&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            comboScript.StartCoroutine(</span><span class="s1-85">&quot;displayCombo&quot;</span><span class="si">,currentCombo);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(maxCombo &lt; currentCombo){</span></div>
<div class="l li"><span class="si">            maxCombo = currentCombo; </span><span class="s1-89">// just to keep track of the max combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD FUNCTION for increaseScore</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> increaseScore(</span><span class="s1-90">int</span><span class="si"> num, </span><span class="s1-90">int</span><span class="si">[] arrayRef) {</span></div>
<div class="l li"><span class="si">        increaseScore(num,arrayRef[0],arrayRef[1]);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// increase the score counter (for external scripts to update)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> increaseScore(</span><span class="s1-90">int</span><span class="si"> num, </span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        num = JMFRelay.onScoreIssue(num,x,y); </span><span class="s1-89">// relay call for modified score</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(currentCombo &gt; 0){</span></div>
<div class="l li"><span class="si">            num = (</span><span class="s1-90">int</span><span class="si">) (num * (1.5+(currentCombo/10.0)) ); </span><span class="s1-89">// increase with multiplier from combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(JMFUtils.vm.displayScoreHUD &amp;&amp; board[x,y].scoreHUD != </span><span class="s1-90">null</span><span class="si">){ </span><span class="s1-89">// display the HUD?</span></div>
<div class="l li"><span class="si">            board[x,y].scoreHUD.display(num);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        score += num; </span><span class="s1-89">// add to the game score</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTime(</span><span class="s1-90">int</span><span class="si">[] arrayRef, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTime(iBoard(arrayRef),delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTime(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y,</span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTime(board[x,y],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTime(Board _board,</span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeRoutine(_board,delay,mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTime(GamePiece gp,</span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeRoutine(gp.master,delay,mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// destroys the box after a given time so that it looks cooler</span></div>
<div class="l li"><span class="si">    IEnumerator destroyInTimeRoutine(Board _board,</span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( _board.isFilled &amp;&amp; _board.piece.markedForDestroy ){ </span><span class="s1-89">// ignore those marked for destroy</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not continue... it is already marked</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(delay); </span><span class="s1-89">// wait for it...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(_board.isFilled &amp;&amp; _board.piece.pd.isDestructible){</span></div>
<div class="l li"><span class="si">            increaseScore( mScore, _board.arrayRef[0] , _board.arrayRef[1] ); </span><span class="s1-89">// add to the score</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        _board.destroyBox();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!_board.panel.isDestructible()){ </span><span class="s1-89">// if the panel is NOT a solid type with no piece to destroy...</span></div>
<div class="l li"><span class="si">            _board.panelHit(); </span><span class="s1-89">// got hit by power attack~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTimeMarked(</span><span class="s1-90">int</span><span class="si">[] arrayRef, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(arrayRef[0],arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTimeMarked(GamePiece gp, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(gp.master.arrayRef[0],gp.master.arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTimeMarked(Board _board, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(_board.arrayRef[0],_board.arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTimeMarked(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeMarkedRoutine(x, y, delay, mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// destroys the box after a given time so that it looks cooler - object being marked for delayed destruction</span></div>
<div class="l li"><span class="si">    IEnumerator destroyInTimeMarkedRoutine(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            board[x,y].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// save the piece reference</span></div>
<div class="l li"><span class="si">        GamePiece refPiece = board[x,y].piece;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(refPiece.markedForDestroy){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not continue as it is already marked...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// mark the piece as to be destroyed later</span></div>
<div class="l li"><span class="si">        refPiece.markedForDestroy = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        refPiece.thisPiece.GetComponent&lt;PieceTracker&gt;().enabled = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// no longer movable</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(delay); </span><span class="s1-89">// wait for it...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(refPiece.master.isFilled){</span></div>
<div class="l li"><span class="si">            increaseScore( mScore, refPiece.master.arrayRef[0], refPiece.master.arrayRef[1] ); </span><span class="s1-89">// add to the score</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        refPiece.master.destroyMarked();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!refPiece.master.panel.isDestructible()){ </span><span class="s1-89">// if the panel is a solid type with no piece to destroy...</span></div>
<div class="l li"><span class="si">            refPiece.master.panelHit(); </span><span class="s1-89">// got hit by power attack~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function call for the ieNumerator version</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> lockJustCreated (</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">float</span><span class="si"> time){</span></div>
<div class="l li"><span class="si">        StartCoroutine( lockJustCreatedRoutine(x,y,time) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to lock a piece from being destroyed with a cooldown timer</span></div>
<div class="l li"><span class="si">    IEnumerator lockJustCreatedRoutine (</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">float</span><span class="si"> time){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// lock the piece so that it isnt destroyed so fast</span></div>
<div class="l li"><span class="si">        GamePiece refPiece = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            refPiece = board[x,y].piece;</span></div>
<div class="l li"><span class="si">            refPiece.justCreated = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            refPiece.master.isActive = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(time); </span><span class="s1-89">// wait for it...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// un-lock the piece again</span></div>
<div class="l li"><span class="si">            refPiece.justCreated = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            refPiece.master.isActive = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED Method for mergePieces (non ieNumerator</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> mergePieces(</span><span class="s1-90">int</span><span class="si">[] arrayRef1, </span><span class="s1-90">int</span><span class="si">[] arrayRef2, </span><span class="s1-90">bool</span><span class="si"> both) {</span></div>
<div class="l li"><span class="si">        StartCoroutine( mergePiecesRoutine(arrayRef1[0],arrayRef1[1],arrayRef2[0],arrayRef2[1],both) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED Method for mergePieces (non ieNumerator</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> mergePieces(</span><span class="s1-90">int</span><span class="si"> posX1, </span><span class="s1-90">int</span><span class="si"> posY1, </span><span class="s1-90">int</span><span class="si"> posX2, </span><span class="s1-90">int</span><span class="si"> posY2,</span><span class="s1-90">bool</span><span class="si"> both) {</span></div>
<div class="l li"><span class="si">        StartCoroutine( mergePiecesRoutine(posX1,posY1,posX2,posY2,both) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// tween the merging piece ( mostly for gui effect only to show something is happening...)</span></div>
<div class="l li"><span class="si">    IEnumerator mergePiecesRoutine (</span><span class="s1-90">int</span><span class="si"> posX1, </span><span class="s1-90">int</span><span class="si"> posY1, </span><span class="s1-90">int</span><span class="si"> posX2, </span><span class="s1-90">int</span><span class="si"> posY2,</span><span class="s1-90">bool</span><span class="si"> both) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// freeze the boxes involved</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isFalling = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isFalling = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// switch the two pieces around in memory (not visual in GUI yet)</span></div>
<div class="l li"><span class="si">        GamePiece holder = board[posX1,posY1].piece;</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].piece = board[posX2,posY2].piece;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].piece = holder;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// since the pieceTracker info</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].piece.thisPiece.GetComponent&lt;PieceTracker&gt;().arrayRef = board[posX1,posY1].arrayRef;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].piece.thisPiece.GetComponent&lt;PieceTracker&gt;().arrayRef = board[posX2,posY2].arrayRef;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// tween it ( now only visual in GUI)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(both){</span></div>
<div class="l li"><span class="si">            board[posX1,posY1].applyTweening(gemSwitchSpeed); </span><span class="s1-89">// two sided if u want, else disabled</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].applyTweening(gemSwitchSpeed); </span><span class="s1-89">// one sided tweening</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(gemSwitchSpeed); </span><span class="s1-89">// the timer</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// un-freeze the boxes involved</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED function for splashFromHere</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> splashFromHere(</span><span class="s1-90">int</span><span class="si">[] arrayRef){</span></div>
<div class="l li"><span class="si">        splashFromHere(arrayRef[0],arrayRef[1]);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// helper function - called by matchType class to splash damage to its neighbouring boards</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> splashFromHere(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(SubBoardPanel sbp </span><span class="s1-90">in</span><span class="si"> board[x,y].allSubPanels){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(sbp.gotHit()) { </span><span class="s1-89">// splash all connected sub panels</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(Board master </span><span class="s1-90">in</span><span class="si"> sbp.masters){</span></div>
<div class="l li"><span class="si">                    master.isActive = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board[x,y].allNeighbourBoards){</span></div>
<div class="l li"><span class="si">            _board.SplashDamage(); </span><span class="s1-89">// splash all neighbour boards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// resets the board due to no more moves</span></div>
<div class="l li"><span class="si">    IEnumerator resetBoard() {</span></div>
<div class="l li"><span class="si">        animScript.doAnim(animType.NOMOREMOVES,0,0);</span></div>
<div class="l li"><span class="si">        JMFRelay.onNoMoreMoves();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(noMoreMoveResetTime);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// for the board height size</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">//reset the pieces with a random type..</span></div>
<div class="l li"><span class="si">                board[x,y].reset(pieceTypes[0], ranType());</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        JMFRelay.onComboEnd();</span></div>
<div class="l li"><span class="si">        JMFRelay.onBoardReset();</span></div>
<div class="l li"><span class="si">        isCheckingPossibleMoves = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// used to determine the number of unfilled board boxes beyond the current panel</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// limited by panels that pieces cannot pass through</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> countUnfilled(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">bool</span><span class="si"> ignoreTotalCount){ </span><span class="s1-89">// extra function currently un-used by GameManager...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        BoardDirection bd;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Top;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.DOWN : </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Bottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.RIGHT : </span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Right;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Left;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board[x,y].getAllBoardInDirection(bd)){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(_board.replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">            } </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!_board.panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// used to determine the number of unfilled board boxes beyond the current panel</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// limited by panels that block gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> countBlockedUnfilled(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">bool</span><span class="si"> ignoreTotalCount){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        BoardDirection bd;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Top;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.DOWN : </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Bottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.RIGHT : </span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Right;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Left;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!board[x,y].panel.isStealable() || !board[x,y].getSubPanelFrom(bd).allowsGravity() ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// cannot proceed.. distance = 0</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board[x,y].getAllBoardInDirection(bd)){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(_board.replacementNeeded()){</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!_board.panel.allowsGravity() || !_board.panel.isStealable() ||</span></div>
<div class="l li"><span class="si">               !_board.getSubPanelFrom(bd).allowsGravity() ){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!_board.panel.pnd.hasStartingPiece ) count--; </span><span class="s1-89">// cater for empty panels</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// used to determine the number of unfilled board boxes in a line to fall through.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> emptyBoxesBeyond(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){ </span><span class="s1-89">// extra function currently un-used by GameManager...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        BoardDirection bd;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Top;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.DOWN : </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Bottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.RIGHT : </span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Right;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Left;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board[x,y].getAllBoardInDirection(bd)){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(_board.replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> playerMadeAMove(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(movingResetsCombo) JMFRelay.onComboEnd(); </span><span class="s1-89">// end the combo if no special override...</span></div>
<div class="l li"><span class="si">        moves++; </span><span class="s1-89">// merging, so number of moves increase</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s1-89">// notify the board has changed...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        JMFRelay.onPlayerMove();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Misc Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region loop routine &amp; related</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// looper for the boardCheck based on the set interval</span></div>
<div class="l li"><span class="si">    IEnumerator boardCheckLooper () {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si"> (gameState != GameState.GameOver){  </span><span class="s1-89">// loop again (infinite) until game over</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(matchCheckSpeed); </span><span class="s1-89">// wait for the given intervals</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// then check the board</span></div>
<div class="l li"><span class="si">            boardChecker();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// status update on given intervals</span></div>
<div class="l li"><span class="si">    IEnumerator updater () {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si"> (gameState != GameState.GameOver){  </span><span class="s1-89">// loop again (infinite) until game over</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-89">// if the GameManager size / position was changed...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si"> (currentPosition != transform.position || currentSize != size) {</span></div>
<div class="l li"><span class="si">                currentPosition = transform.position; </span><span class="s1-89">// save the new position value..</span></div>
<div class="l li"><span class="si">                currentSize = size; </span><span class="s1-89">// save the new size value..</span></div>
<div class="l li"><span class="si">                refreshPosition(); </span><span class="s1-89">// update the board's position</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            gravityCheck(); </span><span class="s1-89">// for dropping pieces into empty board box</span></div>
<div class="l li"><span class="si">            detectPossibleMoves(); </span><span class="s1-89">// to make sure the game doesn't get stuck with no more possible moves</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(gameUpdateSpeed); </span><span class="s1-89">// wait for the given intervals</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Matcher functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Matcher - phase 1 : board block checker for potential matches</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> boardChecker () {</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> i =  pieceTypes.Length - 1 ; i &gt;= 0 ; i--){ </span><span class="s1-89">// loop for each special piece + normal match 3</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) { </span><span class="s1-89">// iterate through each board block</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> (board[x,y].isFilled &amp;&amp; !board[x,y].isFalling &amp;&amp; board[x,y].isActive) { </span><span class="s1-89">// means the board block has a ready cube</span></div>
<div class="l li"><span class="si">                        pieceTypes[i].checkPattern(x,y,i); </span><span class="s1-89">// check pattern based on piece definition</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ( i == 0){ </span><span class="s1-89">// finished cycling through each matching criteria</span></div>
<div class="l li"><span class="si">                        board[x,y].isActive = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// turns this block to passive</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Matcher - phase 2 : perform clean up matches based on external script's decision</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> validateMatch(</span><span class="s1-90">int</span><span class="si"> checkNum, </span><span class="s1-90">int</span><span class="si"> xPos, </span><span class="s1-90">int</span><span class="si"> yPos, List&lt;Board&gt; linkedCubesX,</span></div>
<div class="l li"><span class="si">                List&lt;Board&gt; linkedCubesY, List&lt;Board&gt; linkedCubesTRBL, List&lt;Board&gt; linkedCubesTLBR){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pieceTypes[checkNum].matchConditions(xPos,yPos,linkedCubesX,linkedCubesY,linkedCubesTRBL,linkedCubesTLBR)){</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> scorePerCube = pieceTypes[checkNum].scorePerCube;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            audioScript.matchSoundFx.play(); </span><span class="s1-89">// play the match sound fx</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// manage the combo</span></div>
<div class="l li"><span class="si">            increaseCombo();</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            increaseScore(scorePerCube,xPos,yPos); </span><span class="s1-89">// give out score for the main reference piece</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">            splashFromHere(xPos,yPos); </span><span class="s1-89">// splash from the origin board</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si"> (Board mBoardX </span><span class="s1-90">in</span><span class="si"> linkedCubesX) {</span></div>
<div class="l li"><span class="si">                mBoardX.destroyBox(); </span><span class="s1-89">// destroy the linked boxes too</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">                splashFromHere(mBoardX.arrayRef);</span></div>
<div class="l li"><span class="si">                increaseScore(scorePerCube, mBoardX.arrayRef); </span><span class="s1-89">// give out score</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si"> (Board mBoardY </span><span class="s1-90">in</span><span class="si"> linkedCubesY) {</span></div>
<div class="l li"><span class="si">                mBoardY.destroyBox(); </span><span class="s1-89">// destroy the linked boxes too</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">                splashFromHere(mBoardY.arrayRef);</span></div>
<div class="l li"><span class="si">                increaseScore(scorePerCube, mBoardY.arrayRef); </span><span class="s1-89">// give out score</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si"> (Board mBoardTRBL </span><span class="s1-90">in</span><span class="si"> linkedCubesTRBL) {</span></div>
<div class="l li"><span class="si">                mBoardTRBL.destroyBox(); </span><span class="s1-89">// destroy the linked boxes too</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">                splashFromHere(mBoardTRBL.arrayRef);</span></div>
<div class="l li"><span class="si">                increaseScore(scorePerCube, mBoardTRBL.arrayRef); </span><span class="s1-89">// give out score</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si"> (Board mBoardTLBR </span><span class="s1-90">in</span><span class="si"> linkedCubesTLBR) {</span></div>
<div class="l li"><span class="si">                mBoardTLBR.destroyBox(); </span><span class="s1-89">// destroy the linked boxes too</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">                splashFromHere(mBoardTLBR.arrayRef);</span></div>
<div class="l li"><span class="si">                increaseScore(scorePerCube, mBoardTLBR.arrayRef); </span><span class="s1-89">// give out score</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// free the memory just in case? or perhaps not neccesary for auto GC...</span></div>
<div class="l li"><span class="si">            linkedCubesX.Clear();</span></div>
<div class="l li"><span class="si">            linkedCubesY.Clear();</span></div>
<div class="l li"><span class="si">            linkedCubesTRBL.Clear();</span></div>
<div class="l li"><span class="si">            linkedCubesTLBR.Clear();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// possible moves detector + suggestor  ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// moves detector phase 1</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> detectPossibleMoves() {</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//checks through each board boxes</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!checkedPossibleMove &amp;&amp; !isCheckingPossibleMoves){</span></div>
<div class="l li"><span class="si">            isCheckingPossibleMoves = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth ; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">( board[x,y].isBeingDelayed || board[x,y].isFalling || board[x,y].isActive ) {</span></div>
<div class="l li"><span class="si">                        isCheckingPossibleMoves = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// do not continue, wait for board to clear and stabilize</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            checkedPossibleMove = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// once we checked, no need to check again until needed</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            JMFRelay.onBoardStabilize();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            suggestedBoards.Clear(); </span><span class="s1-89">// remove any outstanding suggested boards...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">( _board.isFilled &amp;&amp; _board.panel.isSwitchable() &amp;&amp;</span></div>
<div class="l li"><span class="si">                   checkNeighbourMatch(_board,_board.piece.slotNum) ) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// recognize possible moves and save the piece location</span></div>
<div class="l li"><span class="si">                    suggestedBoards.Add(_board);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si"> (suggestedBoards.Count == 0) { </span><span class="s1-89">// no more possible moves</span></div>
<div class="l li"><span class="si">                StartCoroutine( resetBoard() ); </span><span class="s1-89">// reset board in co-routine mode for delayed event</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// suggest the found possible move to player</span></div>
<div class="l li"><span class="si">                suggestedPieces.Clear(); </span><span class="s1-89">// clear the current list</span></div>
<div class="l li"> </div>
<div class="l la d3"> </div>
<div class="l la d3"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s1-89">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// to show all the suggested piece..</span></div>
<div class="l li"><span class="s1-89">//              foreach(Board _board in suggestedBoards){</span></div>
<div class="l li"><span class="s1-89">//                  suggestedPieces.Add(_board.piece.thisPiece); // add the new chain to the list</span></div>
<div class="l li"><span class="s1-89">//              }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s1-89">// ====================================</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// to show a random suggested piece...</span></div>
<div class="l lc d4"><span class="sc">                suggestedPieces.Add(</span><span class="sc2">suggestedBoards</span><span class="sd">[Random.Range(0,suggestedBoards.Count)]</span><span class="sc">.piece.thisPiece);</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// ====================================</span></div>
<div class="l li"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">                suggestedBoards.Clear(); </span><span class="s1-89">// remove stored memory</span></div>
<div class="l li"><span class="si">                pieceOriginalSize = suggestedPieces[0].transform.localScale; </span><span class="s1-89">// remember the current size</span></div>
<div class="l li"><span class="si">                StartCoroutine(</span><span class="s1-85">&quot;suggestPiece&quot;</span><span class="si">); </span><span class="s1-89">// its a string coroutine so that we can use StopCoroutine!</span></div>
<div class="l li"><span class="si">                isCheckingPossibleMoves = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l lc d6"><span class="sc">    // </span><span class="sc2">moves detector sub-routine phase 2</span><span class="sd">-a - check its surroundings</span></div>
<div class="l lc d6"><span class="sc">    </span><span class="sc2">bool checkNeighbourMatch</span><span class="sc">(Board temp</span><span class="sd">, int type</span><span class="sc">) {</span></div>
<div class="l lg"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// this piece is a power piece that can be merged?</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si"> ( !(temp.piece.pd </span><span class="s1-90">is</span><span class="si"> NormalPiece) ) {</span></div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l la d7"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l lc d8"><span class="sc">            case BoardType.Square : // square </span><span class="sc2">special merge.</span><span class="sd">..</span></div>
<div class="l lc d8"><span class="sc">                </span><span class="sc2">// can the special piece move to merge with</span><span class="sc"> </span><span class="sd">it's neighbour?</span></div>
<div class="l lc d8"><span class="sc">                </span><span class="sc2">if</span><span class="sc">(</span><span class="sc2">specialToPosition</span><span class="sc">(</span><span class="sc2">temp.top</span><span class="sd">, temp</span><span class="sc">) </span><span class="sc2">|| specialToPosition(temp.bottom, temp</span><span class="sc">) </span><span class="sc2">||</span></div>
<div class="l lc d8"><span class="sc">                   </span><span class="sc2">specialToPosition</span><span class="sc">(</span><span class="sc2">temp.left</span><span class="sc">, </span><span class="sc2">temp)</span><span class="sc"> </span><span class="sd">|| specialToPosition(temp</span><span class="sc">.</span><span class="sc2">right</span><span class="sc">, </span><span class="sc2">temp)</span><span class="sc"> )</span><span class="sc2">{</span></div>
<div class="l lc d8"><span class="sc">                    </span><span class="sc2">return true; // can special merge</span><span class="sc"> </span></div>
<div class="l lc d8"> </div>
<div class="l lc d8"> </div>
<div class="l lc d8"> </div>
<div class="l lc d8"> </div>
<div class="l li"><span class="si">                }</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sc2">break</span><span class="sd">;</span></div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"><span class="sc">            case BoardType.Hexagon : // hex </span><span class="sc2">special merge</span></div>
<div class="l lc d9"><span class="sc">                // </span><span class="sc2">can the special piece move to merge with it's neighbour?</span></div>
<div class="l lc d9"><span class="sc">                if(</span><span class="sc2">specialToPosition(temp</span><span class="sc">.</span><span class="sc2">top</span><span class="sd">, temp</span><span class="sc">) </span><span class="sc2">|| specialToPosition(temp.bottom, temp)</span><span class="sc"> </span><span class="sd">||</span></div>
<div class="l lc d9"><span class="sc">                   </span><span class="sc2">specialToPosition</span><span class="sc">(</span><span class="sc2">temp.topLeft</span><span class="sc">, </span><span class="sc2">temp) ||</span><span class="sc"> </span><span class="sd">specialToPosition</span><span class="sc">(</span><span class="sc2">temp</span><span class="sc">.</span><span class="sc2">topRight,</span><span class="sc"> </span><span class="sd">temp</span><span class="sc">) </span><span class="sc2">|</span><span class="sd">|</span></div>
<div class="l lc d9"><span class="sc">                   </span><span class="sc2">specialToPosition</span><span class="sc">(</span><span class="sc2">temp</span><span class="sc">.</span><span class="sc2">bottomLeft</span><span class="sd">, temp) || specialToPosition</span><span class="sc">(</span><span class="sc2">temp</span><span class="sc">.</span><span class="sc2">bottomRight</span><span class="sd">, temp</span><span class="sc">) ) {</span></div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l lc d9"> </div>
<div class="l li"><span class="si">                    </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// can special merge </span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l ld d10"><span class="sd">                break;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(temp.piece.pd.isSpecial){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// piece cannot match normally.. return</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-89">// square check...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check if the piece is moved in all directions</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(checkThisPosition(temp.top, type, Check.UP) || checkThisPosition(temp.bottom, type, Check.DOWN) ||</span></div>
<div class="l li"><span class="si">               checkThisPosition(temp.left, type, Check.LEFT) || checkThisPosition(temp.right, type, Check.RIGHT) ){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// can special merge </span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon : </span><span class="s1-89">// hex check...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check if the piece is moved in all directions</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(checkThisPosition(temp.top, type, Check.UP) || checkThisPosition(temp.bottom, type, Check.DOWN) ||</span></div>
<div class="l li"><span class="si">               checkThisPosition(temp.topLeft, type, Check.TopLeft) || checkThisPosition(temp.topRight, type, Check.TopRight) ||</span></div>
<div class="l li"><span class="si">               checkThisPosition(temp.bottomLeft, type, Check.BottomLeft) || checkThisPosition(temp.bottomRight, type, Check.BottomRight) ) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// it can make a match if this piece moved...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// if it reaches here, means no match if this piece moved...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// moves detector sub-routine phase 2-b - can this piece move here to special merge?</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> specialToPosition(Board _board, Board origin ){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(_board == </span><span class="s1-90">null</span><span class="si"> || !_board.isFilled || _board.isFalling ||</span></div>
<div class="l li"><span class="si">           !_board.panel.isSwitchable() ){ </span><span class="s1-89">// no board / the piece cannot move here, quit ~!</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> x1 = origin.arrayRef[0]; </span><span class="s1-90">int</span><span class="si"> y1 = origin.arrayRef[1];</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> x2 = _board.arrayRef[0]; </span><span class="s1-90">int</span><span class="si"> y2 = _board.arrayRef[1];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(origin.pd.powerMatched(x1,y1,x2,y2,</span><span class="s1-90">false</span><span class="si">,origin.pd,_board.pd) ||</span></div>
<div class="l li"><span class="si">           _board.pd.powerMatched(x1,y1,x2,y2,</span><span class="s1-90">false</span><span class="si">,_board.pd,origin.pd) ||</span></div>
<div class="l li"><span class="si">           origin.pd.powerMatched(origin.arrayRef,_board.arrayRef,</span><span class="s1-90">false</span><span class="si">,origin.piece,_board.piece) ||</span></div>
<div class="l li"><span class="si">           _board.pd.powerMatched(origin.arrayRef,_board.arrayRef,</span><span class="s1-90">false</span><span class="si">,_board.piece,origin.piece)){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// is a power piece combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// not a power piece combo</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED Method for checkThisPosition</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> checkThisPosition(Board _board, </span><span class="s1-90">int</span><span class="si"> type, Check dir){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(_board != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; _board.isFilled){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> checkThisPosition(_board.arrayRef[0],_board.arrayRef[1],type,dir);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// moves detector sub-routine phase 2-c - scenario when this piece is moved in this direction</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> checkThisPosition(</span><span class="s1-90">int</span><span class="si"> xPos,</span><span class="s1-90">int</span><span class="si"> yPos ,</span><span class="s1-90">int</span><span class="si"> mType, Check dir){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(xPos &lt; 0 || xPos &gt;= boardWidth || yPos &lt; 0 || yPos &gt;= boardHeight ) {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// assumption is out of bounds ... stop this check</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!board[xPos,yPos].isFilled || !board[xPos,yPos].panel.isSwitchable() ||</span></div>
<div class="l li"><span class="si">           board[xPos,yPos].pd.isSpecial ){ </span><span class="s1-89">// the piece cannot move here, quit too~!</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l la d11"> </div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// count of possible matching blocks</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// up &amp; down check...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dir != Check.UP) {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> y = (yPos-1) ; y &gt;= 0; y--) { </span><span class="s1-89">//check the bottom side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si"> ( board[xPos,y].canBeMatched(board[xPos,y].subPanelTop) &amp;&amp;</span></div>
<div class="l li"><span class="si">                    board[xPos,y].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    count++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dir != Check.DOWN) {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> y = (yPos+1) ; y &lt; boardHeight ; y++) { </span><span class="s1-89">//check the top side of the cube </span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si"> ( board[xPos,y].canBeMatched(board[xPos,y].subPanelBottom) &amp;&amp;</span></div>
<div class="l li"><span class="si">                    board[xPos,y].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    count++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( count &gt; 1) { </span><span class="s1-89">// there is a matching row...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// no need to go further as there is already a possible match</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            count = 0; </span><span class="s1-89">// reset count for column matching...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-90">default</span><span class="si"> : </span><span class="s1-89">// square type position check</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(dir != Check.RIGHT) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> x = (xPos-1) ; x &gt;= 0; x--) { </span><span class="s1-89">//check the left side of the cube </span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ( board[x,yPos].canBeMatched(board[x,yPos].subPanelRight) &amp;&amp;</span></div>
<div class="l li"><span class="si">                        board[x,yPos].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(dir != Check.LEFT){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> x = (xPos+1) ; x &lt; boardWidth ; x++) { </span><span class="s1-89">//check the right side of the cube </span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ( board[x,yPos].canBeMatched(board[x,yPos].subPanelLeft) &amp;&amp;</span></div>
<div class="l li"><span class="si">                        board[x,yPos].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( count &gt; 1) { </span><span class="s1-89">// there is a matching row...</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// no need to go further as there is already a possible match</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset count for column matching...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon : </span><span class="s1-89">// hex type position check</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// TopLeft &lt;&gt; BottomRight check... =========================================</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(dir != Check.TopLeft) { </span><span class="s1-89">// check the BottomRight side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board[xPos,yPos].getAllBoardInDirection(BoardDirection.BottomRight)) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ( _board.canBeMatched(_board.subPanelTopLeft) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(dir != Check.BottomRight) { </span><span class="s1-89">// check the TopLeft side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopLeft)) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ( _board.canBeMatched(_board.subPanelBottomRight) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( count &gt; 1) { </span><span class="s1-89">// there is a matching row...</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// no need to go further as there is already a possible match</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                count = 0; </span><span class="s1-89">// reset count for column matching...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// TopRight &lt;&gt; BottomLeft check... =========================================</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(dir != Check.TopRight) { </span><span class="s1-89">// check the BottomLeft side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board[xPos,yPos].getAllBoardInDirection(BoardDirection.BottomLeft)) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ( _board.canBeMatched(_board.subPanelTopRight) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(dir != Check.BottomLeft) { </span><span class="s1-89">// check the TopRight side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopRight)) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ( _board.canBeMatched(_board.subPanelBottomLeft) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( count &gt; 1) { </span><span class="s1-89">// there is a matching row...</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// no need to go further as there is already a possible match</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// if it reaches here, means no match in this position...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// suggest a piece after a given time...</span></div>
<div class="l li"><span class="si">    IEnumerator suggestPiece() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(suggestionTimer); </span><span class="s1-89">// wait till it's time</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gameState != GameState.GameActive){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// game no longer active... do not display suggestion...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(GameObject go </span><span class="s1-90">in</span><span class="si"> suggestedPieces){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(go == </span><span class="s1-90">null</span><span class="si"> || !go.activeSelf){</span></div>
<div class="l li"><span class="si">                notifyBoardHasChanged(); </span><span class="s1-89">// something changed... perform checks again!</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">float</span><span class="si"> currentSize = pieceOriginalSize.x;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// main scaler loop</span></div>
<div class="l li"><span class="si">            LeanTween.value(go,suggestPieceScaler,currentSize*0.75f,currentSize*1.25f,1f)</span></div>
<div class="l li"><span class="si">                .setLoopPingPong().setOnUpdateParam(go);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// sub rotate loop</span></div>
<div class="l li"><span class="si">            go.transform.localEulerAngles = </span><span class="s1-90">new</span><span class="si"> Vector3(0,0,340f);</span></div>
<div class="l li"><span class="si">            LeanTween.rotateZ(go,20f,0.8f).setLoopPingPong();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the function for leanTween to scale the suggested pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> suggestPieceScaler(</span><span class="s1-90">float</span><span class="si"> val, </span><span class="s1-90">object</span><span class="si"> go){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(checkedPossibleMove){</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localScale = </span><span class="s1-90">new</span><span class="si"> Vector3(val,val,1); </span><span class="s1-89">// scale to value</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            LeanTween.cancel((GameObject)go); </span><span class="s1-89">// cancel all tweens</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localScale = pieceOriginalSize; </span><span class="s1-89">// resets scale to normal</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localEulerAngles = Vector3.zero; </span><span class="s1-89">// resets rotate to normal</span></div>
<div class="l li"><span class="si">            JMFUtils.autoScalePadded((GameObject)go); </span><span class="s1-89">// as a precaution to reset size</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Board Piece position Fall by gravity function ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// (main gravity function)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> dropPieces(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( !(x &gt;= 0 &amp;&amp; x &lt; boardWidth &amp;&amp; y &gt;=0 &amp;&amp; y &lt; boardHeight) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// index out of bounds... do not continue~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( board[x,y].replacementNeeded()) {</span></div>
<div class="l li"><span class="si">            board[x,y].isBeingDelayed = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// status to verify that board already active in drop sequence</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(newPieceMode){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> NewPieceMethod.FallByGravity : </span><span class="s1-89">// gravity replacement</span></div>
<div class="l li"><span class="si">                StartCoroutine( movePieces(x,y) ); </span><span class="s1-89">// coroutine that can be delayed</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> NewPieceMethod.Appear : </span><span class="s1-89">// self replacement (appear from itself)</span></div>
<div class="l li"><span class="si">                StartCoroutine( appearModePieces(x,y) ); </span><span class="s1-89">// coroutine that can be delayed</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    IEnumerator appearModePieces(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(appearModeDelay); </span><span class="s1-89">// wait for the delay..</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// for custom pieces spawn rate</span></div>
<div class="l li"><span class="si">        PieceDefinition spawned;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> w = 0; w &lt; pieceTypes.Length; w++){</span></div>
<div class="l li"><span class="si">            spawned = pieceTypes[w].chanceToSpawnThis(x,y);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(spawned != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNewAppear(spawned,appearModeSpeed,spawned.skinToUseDuringSpawn(x,y) );</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( w == pieceTypes.Length - 1){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// reached the end, no custom spawn... spawn the default</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNewAppear(pieceTypes[0],appearModeSpeed,ranType());</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(appearModeSpeed); </span><span class="s1-89">// wait for appear mode speed</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].isBeingDelayed = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset status once delay is over</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// secondary gravity function as a coroutine for delay ability</span></div>
<div class="l li"><span class="si">    IEnumerator movePieces(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(delayedGravity &amp;&amp; board[x,y].mustWait){ </span><span class="s1-89">// if delay is required by GameManager or by board</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(gravityDelayTime); </span><span class="s1-89">// delay time between each dropped pieces</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        board[x,y].mustWait = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// change status of board to drop other pieces without delay</span></div>
<div class="l li"><span class="si">        board[x,y].isBeingDelayed = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset status once delay is over</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        Board tBoard = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        SubBoardPanel sbp = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.DOWN :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(0,-size,0); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            tBoard = board[x,y].top;</span></div>
<div class="l li"><span class="si">            sbp = board[x,y].subPanelTop;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){ </span><span class="s1-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Left,</span></div>
<div class="l li"><span class="si">                    BoardDirection.Right,BoardDirection.Bottom};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.BottomLeft,</span></div>
<div class="l li"><span class="si">                    BoardDirection.BottomRight, BoardDirection.Bottom};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(0,size,0); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            tBoard = board[x,y].bottom;</span></div>
<div class="l li"><span class="si">            sbp = board[x,y].subPanelBottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){ </span><span class="s1-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Left,</span></div>
<div class="l li"><span class="si">                    BoardDirection.Right,BoardDirection.Top};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.TopLeft,</span></div>
<div class="l li"><span class="si">                    BoardDirection.TopRight, BoardDirection.Top};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(-size,0,0); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){ </span><span class="s1-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                tBoard = board[x,y].right;</span></div>
<div class="l li"><span class="si">                sbp = board[x,y].subPanelRight;</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                    BoardDirection.Bottom,BoardDirection.Left};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(Random.Range(0,2) == 0){</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].bottomRight;</span></div>
<div class="l li"><span class="si">                    sbp = board[x,y].subPanelBottomRight;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        BoardDirection.Bottom, BoardDirection.TopLeft};</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].topRight;</span></div>
<div class="l li"><span class="si">                    sbp = board[x,y].subPanelTopRight;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        BoardDirection.Bottom, BoardDirection.BottomLeft};</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.RIGHT :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(size,0,0); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){ </span><span class="s1-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                tBoard = board[x,y].left;</span></div>
<div class="l li"><span class="si">                sbp = board[x,y].subPanelLeft;</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                    BoardDirection.Bottom,BoardDirection.Right};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(Random.Range(0,2) == 0){</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].bottomLeft;</span></div>
<div class="l li"><span class="si">                    sbp = board[x,y].subPanelBottomLeft;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        BoardDirection.Bottom, BoardDirection.TopRight};</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].topLeft;</span></div>
<div class="l li"><span class="si">                    sbp = board[x,y].subPanelTopLeft;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s1-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        BoardDirection.Bottom, BoardDirection.BottomRight};</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(tBoard == </span><span class="s1-90">null</span><span class="si"> ){ </span><span class="s1-89">// if no board to steal from &amp;&amp; no sub-panel wall</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(sbp.allowsGravity()){</span></div>
<div class="l li"><span class="si">                StartCoroutine(spawnNew(x,y,gravityVector)); </span><span class="s1-89">// spawn a new piece</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// finished gravity on this pass... move to the next</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        Board boardL = tBoard.boardEnumToReference(bd[0]); </span><span class="s1-89">// the reference board's hypothetical left</span></div>
<div class="l li"><span class="si">        Board boardR = tBoard.boardEnumToReference(bd[1]); </span><span class="s1-89">// the reference board's hypothetical right</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// if there is 'NO' valid piece here; check for landslide effect    </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( !(tBoard.isFilled &amp;&amp; tBoard.allowGravity() &amp;&amp; sbp.allowsGravity() ) &amp;&amp; (</span></div>
<div class="l li"><span class="si">            (boardL != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; boardL.isFilled &amp;&amp; boardL.pd.landslideEffect) ||</span></div>
<div class="l li"><span class="si">            (boardR != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; boardR.isFilled &amp;&amp; boardR.pd.landslideEffect) ||</span></div>
<div class="l li"><span class="si">            sbp.isSolid() || tBoard.panel.isSolid() ) ){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            SubBoardPanel sbpL,sbpR,sbpUL,sbpUR;</span></div>
<div class="l li"><span class="si">            sbpL = sbpR = sbpUL = sbpUR = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(boardL != </span><span class="s1-90">null</span><span class="si">) sbpUL = boardL.getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (boardL.boardEnumToReference(bd[2])); </span><span class="s1-89">// the board's SubBoardPanel left</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(boardR != </span><span class="s1-90">null</span><span class="si">) sbpUR = boardR.getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (boardR.boardEnumToReference(bd[2])); </span><span class="s1-89">// the board's SubBoardPanel right</span></div>
<div class="l li"><span class="si">                sbpL = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (board[x,y].boardEnumToReference(bd[0])); </span><span class="s1-89">// the board's SubBoardPanel left</span></div>
<div class="l li"><span class="si">                sbpR = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (board[x,y].boardEnumToReference(bd[1])); </span><span class="s1-89">// the board's SubBoardPanel right</span></div>
<div class="l li"><span class="si">                </span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// landslide code</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(boardL != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; sbpUL.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">                   boardL.allowGravity() ){ </span><span class="s1-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                    sbp = sbpL; </span><span class="s1-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                    tBoard = boardL;</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(boardR != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbpR.allowsGravity() &amp;&amp; sbpUR.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">                          boardR.allowGravity() ){ </span><span class="s1-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                    sbp = sbpR; </span><span class="s1-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                    tBoard = boardR;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                sbpL= board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (tBoard.boardEnumToReference(bd[0])); </span><span class="s1-89">// the board's SubBoardPanel topLeft</span></div>
<div class="l li"><span class="si">                sbpR = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (tBoard.boardEnumToReference(bd[1])); </span><span class="s1-89">// the board's SubBoardPanel topRight</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s1-89">// landslide code</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(boardL != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; boardL.allowGravity() ){ </span><span class="s1-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                    sbp = sbpL; </span><span class="s1-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                    tBoard = boardL;</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(boardR != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; boardR.allowGravity() ){ </span><span class="s1-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                    sbp = sbpR; </span><span class="s1-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                    tBoard = boardR;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(tBoard != boardL &amp;&amp; tBoard != boardR ){ </span><span class="s1-89">// needs to look deeper down...</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// cause landslide below as the top is blocked...</span></div>
<div class="l li"><span class="si">                List&lt;Board&gt; list = tBoard.getAllBoardInDirection(bd[2]); </span><span class="s1-89">// list of boards hypothetical bottom</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">bool</span><span class="si"> exitLoop = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// variable to exit a loop</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(Board boardB </span><span class="s1-90">in</span><span class="si"> list){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(boardB.boardEnumToReference(bd[2]) == </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// we reached the bottom of the board... do not continue...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    x = boardB.boardEnumToReference(bd[2]).arrayRef[0];</span></div>
<div class="l li"><span class="si">                    y = boardB.boardEnumToReference(bd[2]).arrayRef[1];</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(!board[x,y].replacementNeeded()){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// if the board here already has a piece, do not continue...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    boardL = boardB.boardEnumToReference(bd[0]); </span><span class="s1-89">// the board's hypothetical left</span></div>
<div class="l li"><span class="si">                    boardR = boardB.boardEnumToReference(bd[1]); </span><span class="s1-89">// the board's hypothetical right</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                    </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(boardL != </span><span class="s1-90">null</span><span class="si">) sbpUL = boardL.getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (boardL.boardEnumToReference(bd[2])); </span><span class="s1-89">// the board's SubBoardPanel left</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(boardR != </span><span class="s1-90">null</span><span class="si">) sbpUR = boardR.getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (boardR.boardEnumToReference(bd[2])); </span><span class="s1-89">// the board's SubBoardPanel right</span></div>
<div class="l li"><span class="si">                        sbpL = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (board[x,y].boardEnumToReference(bd[0])); </span><span class="s1-89">// the board's SubBoardPanel left</span></div>
<div class="l li"><span class="si">                        sbpR = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (board[x,y].boardEnumToReference(bd[1])); </span><span class="s1-89">// the board's SubBoardPanel right</span></div>
<div class="l li"><span class="si">                        </span></div>
<div class="l li"><span class="si">                        </span><span class="s1-89">// landslide code</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(boardL != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; sbpUL.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">                           boardL.allowGravity() ){ </span><span class="s1-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                            sbp = sbpL; </span><span class="s1-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                            tBoard = boardL;</span></div>
<div class="l li"><span class="si">                            exitLoop = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(boardR != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbpR.allowsGravity() &amp;&amp; sbpUR.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">                                  boardR.allowGravity() ){ </span><span class="s1-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                            sbp = sbpR; </span><span class="s1-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                            tBoard = boardR;</span></div>
<div class="l li"><span class="si">                            exitLoop = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        </span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                        sbpL= board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (boardB.boardEnumToReference(bd[0])); </span><span class="s1-89">// the board's SubBoardPanel topLeft</span></div>
<div class="l li"><span class="si">                        sbpR = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (boardB.boardEnumToReference(bd[1])); </span><span class="s1-89">// the board's SubBoardPanel topRight</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                        </span><span class="s1-89">// landslide code</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(boardL != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; boardL.allowGravity() ){ </span><span class="s1-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                            sbp = sbpL; </span><span class="s1-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                            tBoard = boardL;</span></div>
<div class="l li"><span class="si">                            exitLoop = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(boardR != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbpR.allowsGravity() &amp;&amp; boardR.allowGravity() ){ </span><span class="s1-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                            sbp = sbpR; </span><span class="s1-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                            tBoard = boardR;</span></div>
<div class="l li"><span class="si">                            exitLoop = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(exitLoop){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// break out of loop</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( tBoard != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; sbp.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">           tBoard.allowGravity() ){ </span><span class="s1-89">// a valid target to steal a piece from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(board[x,y].piece != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].piece.removePiece(); </span><span class="s1-89">// just in case the reference is lost without removal</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            board[x,y].piece = tBoard.piece; </span><span class="s1-89">// steal the piece</span></div>
<div class="l li"><span class="si">            tBoard.piece = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            StartCoroutine(animateMove(x,y)); </span><span class="s1-89">// animate the change</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// do the same check on the board we stole from as itself needs replacement</span></div>
<div class="l li"><span class="si">            dropPieces(tBoard.arrayRef[0],tBoard.arrayRef[1]);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// finished gravity on this pass... move to the next</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// sub-function to update the board box and tween the piece due to gravity movement</span></div>
<div class="l li"><span class="si">    IEnumerator animateMove (</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// update the local data...</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// board is falling...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> distance = countBlockedUnfilled(x,y, </span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">float</span><span class="si"> delay = gravityDropSpeed;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(acceleratedVelocity){</span></div>
<div class="l li"><span class="si">            delay =  gravityDropSpeed / Mathf.Max(distance, 1);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        board[x,y].applyTweening(delay);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// the timer according to the drop speed or updatespeed (whichever longer)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(delay);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// update the board box once animation has finished..</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// no longer falling into position</span></div>
<div class="l li"><span class="si">        board[x,y].isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// piece is active for checks</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( distance &lt; 1 ){ </span><span class="s1-89">// check if it has reached bottom</span></div>
<div class="l li"><span class="si">            board[x,y].mustWait = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// reached bottom, re-activate gravity delay</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(pieceDropExtraEffect){ </span><span class="s1-89">// if extra effect is enabled</span></div>
<div class="l li"><span class="si">                board[x,y].applyTweeningAfterEffects(gravityDropSpeed, getVectorEffect(x,y) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            audioScript.DropSoundFx.play(); </span><span class="s1-89">// play the drop sound</span></div>
<div class="l li"><span class="si">        }</span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check if this new piece needs to fall or not...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(board[x,y].boardEnumToReference(bd[2]) != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                dropPieces(board[x,y].boardEnumToReference(bd[2]).arrayRef[0],</span></div>
<div class="l li"><span class="si">                           board[x,y].boardEnumToReference(bd[2]).arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// gravity effect after falling down - simulates easeInBack</span></div>
<div class="l li"><span class="si">    Vector3[] getVectorEffect(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">float</span><span class="si"> offset = 0.35f * size; </span><span class="s1-89">// the amount of offset you wish for effect</span></div>
<div class="l li"><span class="si">        Vector3 position = board[x,y].position;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            position.z = board[x,y].piece.thisPiece.transform.position.z; </span><span class="s1-89">// ensure the Z order stays when tweening</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        Vector3 pos;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.DOWN : </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s1-90">new</span><span class="si"> Vector3( 0f , offset, 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3[] {position, (position - pos ), position, position};</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s1-90">new</span><span class="si"> Vector3( 0f , offset/2.5f, 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3[] {(position + pos), position, position, position };</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s1-90">new</span><span class="si"> Vector3( offset/3, 0f , 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3[] {(position - pos), position, position, position };</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> Gravity.RIGHT :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s1-90">new</span><span class="si"> Vector3( offset/3, 0f , 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3[] {(position + pos), position, position, position };</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// sub-function to compensate delay of a new spawned piece tweening process</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> IEnumerator spawnNew (</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, Vector3 spawnPoint){</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// board is falling...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> distance = countBlockedUnfilled(x,y, </span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">float</span><span class="si"> delay = gravityDropSpeed;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(acceleratedVelocity){</span></div>
<div class="l li"><span class="si">            delay =  gravityDropSpeed / Mathf.Max(distance, 1);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// for custom pieces spawn rate</span></div>
<div class="l li"><span class="si">        PieceDefinition spawned;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> w = 0; w &lt; pieceTypes.Length; w++){</span></div>
<div class="l li"><span class="si">            spawned = pieceTypes[w].chanceToSpawnThis(x,y);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(spawned != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNew(spawned, spawnPoint, delay, spawned.skinToUseDuringSpawn(x,y) );</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( w == pieceTypes.Length - 1){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// reached the end, no custom spawn... spawn the default</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNew(pieceTypes[0],spawnPoint, delay, ranType() );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// the timer according to the drop speed or updatespeed (whichever longer)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(delay);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// update the board box once animation has finished..</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].isActive = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].mustWait = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// reached bottom, re-activate gravity delay</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( distance &lt; 1 ){ </span><span class="s1-89">// check if it has reached bottom            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(pieceDropExtraEffect){ </span><span class="s1-89">// if extra effect is enabled</span></div>
<div class="l li"><span class="si">                board[x,y].applyTweeningAfterEffects(gravityDropSpeed, getVectorEffect(x,y) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            audioScript.DropSoundFx.play(); </span><span class="s1-89">// play the drop sound</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check if this new piece needs to fall or not...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(board[x,y].boardEnumToReference(bd[2]) != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                dropPieces(board[x,y].boardEnumToReference(bd[2]).arrayRef[0],</span></div>
<div class="l li"><span class="si">                           board[x,y].boardEnumToReference(bd[2]).arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion loop routine &amp; related</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region PieceTracker related</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// PieceTracker movement notifier ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// for external source call method (called from PieceTracker.cs script), </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// this is to drag gems on the board</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> draggedFromHere(</span><span class="s1-90">int</span><span class="si">[] pos, </span><span class="s1-90">int</span><span class="si">[] partner){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(moveOnlyAfterSettle){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!checkedPossibleMove){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// player needs to wait for board to settle before making the next move...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si"> (!canMove){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// if cannot move, exit~! ( player perhaps made a bad move previously )</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> posX1,posY1; </span><span class="s1-89">// the calling board position</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> posX2,posY2; </span><span class="s1-89">// the partner board position</span></div>
<div class="l li"><span class="si">        posX1 = pos[0]; posY1 = pos[1]; </span><span class="s1-89">// get the calling position</span></div>
<div class="l li"><span class="si">        posX2 = partner[0]; posY2 = partner[1]; </span><span class="s1-89">// get the partner</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// get the direction of swap</span></div>
<div class="l li"><span class="si">        SubBoardPanel sbp = iBoard(pos).getSubPanelBetween(iBoard(partner));</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// extra conditioning check if pieces can be moved</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!(posX2 &gt;=0 &amp;&amp; posX2 &lt; boardWidth) || !(posY2 &gt;=0 &amp;&amp; posY2 &lt; boardHeight) ||</span></div>
<div class="l li"><span class="si">           ( sbp.spnd != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; !sbp.isSwitchable() ) ||</span></div>
<div class="l li"><span class="si">           !board[posX1,posY1].panel.isSwitchable() || !board[posX2,posY2].panel.isSwitchable() ||</span></div>
<div class="l li"><span class="si">           board[posX1,posY1].isFalling || !board[posX1,posY1].isFilled ||</span></div>
<div class="l li"><span class="si">           board[posX2,posY2].isFalling || !board[posX2,posY2].isFilled ||</span></div>
<div class="l li"><span class="si">           !board[posX1,posY1].piece.thisPiece.GetComponent&lt;PieceTracker&gt;().enabled ||</span></div>
<div class="l li"><span class="si">           !board[posX2,posY2].piece.thisPiece.GetComponent&lt;PieceTracker&gt;().enabled){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// condition above states the box are not legit selections, do not proceed!!!</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        PieceDefinition pdMain = board[posX1,posY1].piece.pd; </span><span class="s1-89">// the calling piece definition</span></div>
<div class="l li"><span class="si">        PieceDefinition pdSub = board[posX2,posY2].piece.pd; </span><span class="s1-89">// the partner piece definition</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// check if we are merging two power gems</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pdMain.powerMatched(posX1,posY1,posX2,posY2,</span><span class="s1-90">true</span><span class="si">,pdMain,pdSub) ||</span></div>
<div class="l li"><span class="si">           pdSub.powerMatched(posX1,posY1,posX2,posY2,</span><span class="s1-90">true</span><span class="si">,pdSub,pdMain) ||</span></div>
<div class="l li"><span class="si">           pdMain.powerMatched(pos,partner,</span><span class="s1-90">true</span><span class="si">,iBoard(pos).piece,iBoard(partner).piece) ||</span></div>
<div class="l li"><span class="si">           pdSub.powerMatched(pos,partner,</span><span class="s1-90">true</span><span class="si">,iBoard(partner).piece,iBoard(pos).piece)){</span></div>
<div class="l li"><span class="si">            playerMadeAMove(); </span><span class="s1-89">// call the function when player makes a valid move</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// we are merging, so it is handled elsewhere, job done here...so, return!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// initiate the switch if the two board pieces are switchable</span></div>
<div class="l li"><span class="si">        StartCoroutine(switchPositions(posX1,posY1,posX2,posY2));</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// tween the pieces and perform actions after the given time (to accomodate the tweening)</span></div>
<div class="l li"><span class="si">    IEnumerator switchPositions (</span><span class="s1-90">int</span><span class="si"> posX1, </span><span class="s1-90">int</span><span class="si"> posY1, </span><span class="s1-90">int</span><span class="si"> posX2, </span><span class="s1-90">int</span><span class="si"> posY2) {</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        audioScript.switchSoundFx.play(); </span><span class="s1-89">// play the switch sound fx</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// freeze the boxes involved</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isFalling = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isFalling = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// switch the two pieces around in memory (not visual in GUI yet)</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].ignoreNotifyOnce = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// ignore notify to keep the suggested piece</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].ignoreNotifyOnce = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// ignore notify to keep the suggested piece</span></div>
<div class="l li"><span class="si">        GamePiece holder = board[posX1,posY1].piece;</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].piece = board[posX2,posY2].piece;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].piece = holder;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// tween it ( now only visual in GUI)</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].applyTweening(gemSwitchSpeed);</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].applyTweening(gemSwitchSpeed);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(gemSwitchSpeed); </span><span class="s1-89">// the timer</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// assign the type in a shorter reference just for easier usage</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> t1 = board[posX1,posY1].piece.slotNum;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> t2 = board[posX2,posY2].piece.slotNum;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// extensive check to verify that the move is legit</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( checkThisPosition(posX1,posY1,t1,Check.UP)|| checkThisPosition(posX1,posY1,t1,Check.DOWN)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX1,posY1,t1,Check.LEFT) || checkThisPosition(posX1,posY1,t1,Check.RIGHT)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX1,posY1,t1,Check.TopLeft) || checkThisPosition(posX1,posY1,t1,Check.TopRight)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX1,posY1,t1,Check.BottomLeft) || checkThisPosition(posX1,posY1,t1,Check.BottomRight)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX2,posY2,t2,Check.UP)|| checkThisPosition(posX2,posY2,t2,Check.DOWN)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX2,posY2,t2,Check.LEFT) || checkThisPosition(posX2,posY2,t2,Check.RIGHT)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX2,posY2,t2,Check.TopLeft) || checkThisPosition(posX2,posY2,t2,Check.TopRight)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX2,posY2,t2,Check.BottomLeft) || checkThisPosition(posX2,posY2,t2,Check.BottomRight) ) {</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// if legit, un- freeze the boxes involved</span></div>
<div class="l li"><span class="si">            board[posX1,posY1].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            board[posX2,posY2].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            board[posX1,posY1].isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// make the piece active for checks</span></div>
<div class="l li"><span class="si">            board[posX2,posY2].isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// make the piece active for checks</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            playerMadeAMove(); </span><span class="s1-89">// call the function when player makes a valid move</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// if move is not legit, revert it back</span></div>
<div class="l li"><span class="si">            StartCoroutine(revertMove(posX1,posY1,posX2,posY2)); </span><span class="s1-89">// to revert the last move</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// to revert the actions if the last move was an invalid move</span></div>
<div class="l li"><span class="si">    IEnumerator revertMove (</span><span class="s1-90">int</span><span class="si"> posX1, </span><span class="s1-90">int</span><span class="si"> posY1, </span><span class="s1-90">int</span><span class="si"> posX2, </span><span class="s1-90">int</span><span class="si"> posY2) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// NOTE : remember that the boxes is still frozen... (in switchPositions() )</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        audioScript.badMoveSoundFx.play(); </span><span class="s1-89">// play the bad move sound fx</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        canMove = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// player cannot move until it is reverted</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// switch it back around...</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].ignoreNotifyOnce = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// ignore notify to keep the suggested piece</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].ignoreNotifyOnce = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// ignore notify to keep the suggested piece</span></div>
<div class="l li"><span class="si">        GamePiece holder = board[posX1,posY1].piece;</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].piece = board[posX2,posY2].piece;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].piece = holder;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// tween it ( make it visual in GUI)</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].applyTweening(gemSwitchSpeed);</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].applyTweening(gemSwitchSpeed);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(gemSwitchSpeed); </span><span class="s1-89">// the timer</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// un- freeze the boxes involved for checks</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// make the piece active for checks</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// make the piece active for checks</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        canMove = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// give power back to the player</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion PieceTracker related</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Helper Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Helper FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// random cubeType generator , just coz the code is too long</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> ranType() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> Random.Range(0,Mathf.Min( NumOfActiveType, pieceTypes[0].skin.Length) );</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// limited by normalpieces types available if numOfActiveType is declared out of bounds</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// refresh the position if you have moved the gameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> refreshPosition(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.refreshBoardPosition();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED FUNCTION of getBoardsDistance *range of distance Type*</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;Board&gt; getBoardsFromDistance(</span><span class="s1-90">int</span><span class="si">[] point, </span><span class="s1-90">int</span><span class="si"> distMin, </span><span class="s1-90">int</span><span class="si"> distMax){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> getBoardsFromDistance(iBoard(point),distMin, distMax );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// get all the board from a specific distance range~!</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;Board&gt; getBoardsFromDistance(Board point, </span><span class="s1-90">int</span><span class="si"> distMin, </span><span class="s1-90">int</span><span class="si"> distMax){</span></div>
<div class="l li"><span class="si">        List&lt;Board&gt; temp = </span><span class="s1-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = distMin; x &lt;= distMax; x++){</span></div>
<div class="l li"><span class="si">            temp.AddRange(getBoardsFromDistance(point,x)); </span><span class="s1-89">// add the boards within the range specified</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> temp;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED FUNCTION of getBoardsDistance</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;Board&gt; getBoardsFromDistance(</span><span class="s1-90">int</span><span class="si">[] point, </span><span class="s1-90">int</span><span class="si"> dist){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> getBoardsFromDistance(iBoard(point),dist);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// get all the board from a specific distance</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;Board&gt; getBoardsFromDistance(Board point, </span><span class="s1-90">int</span><span class="si"> dist){</span></div>
<div class="l li"><span class="si">        List&lt;Board&gt; temp = </span><span class="s1-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board itr </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(boardRadiusDistance(point,itr) == dist){ </span><span class="s1-89">// is on this specific distance</span></div>
<div class="l li"><span class="si">                temp.Add(itr); </span><span class="s1-89">// add the board to the list</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> temp;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED FUNCTION of boardRadiusDistance</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> boardRadiusDistance(Board boardA, Board boardB ){ </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si">  boardRadiusDistance(boardA.arrayRef,boardB.arrayRef);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to calculate the relative distance between two board locations</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> boardRadiusDistance(</span><span class="s1-90">int</span><span class="si">[] bPosA, </span><span class="s1-90">int</span><span class="si">[] bPosB ){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> totalX = Mathf.Abs( bPosA[0] - bPosB[0] );</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> totalY = Mathf.Abs( bPosA[1] - bPosB[1] );</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-89">// TODO squareMode not available in JMFP...</span></div>
<div class="l li"><span class="s1-89">//          if(squareMode == squareMode.CrossType){ // specific for cross-type square</span></div>
<div class="l li"><span class="s1-89">//              return totalX + totalY; // each box = 1 distance... no diagonals</span></div>
<div class="l li"><span class="s1-89">//          } else {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si">  Mathf.Max(totalX, Mathf.Max(totalY, Mathf.Abs( totalX - totalY ) ) );</span></div>
<div class="l li"><span class="s1-89">//          }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            Vector3 vecA = hexGetCalcVector(bPosA);</span></div>
<div class="l li"><span class="si">            Vector3 vecB = hexGetCalcVector(bPosB);</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> (</span><span class="s1-90">int</span><span class="si">) Mathf.Max(</span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">float</span><span class="si">[]{ </span><span class="s1-89">// hex distance formula</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.x - vecB.x),</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.y - vecB.y),</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.z - vecB.z)</span></div>
<div class="l li"><span class="si">            });</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Helper Functions</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region HEXAGON related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// HEXAGON FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// returns the unsquiggled Hexagon grid</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] hexUnsquiggleArray(</span><span class="s1-90">int</span><span class="si">[] array){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] { array[0],array[1] - array[0] + (array[0]/2)};</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// returns a vector3 array for distance calculation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector3 hexGetCalcVector(</span><span class="s1-90">int</span><span class="si">[] array){</span></div>
<div class="l li"><span class="si">        array = hexUnsquiggleArray(array);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3(array[0],array[1],(array[0] + array[1])*-1);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion HEXAGON related functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region game-start sequence</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> StartGame() { </span><span class="s1-89">// when the game is actually running...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gameState == GameState.GamePending){</span></div>
<div class="l li"><span class="si">            gameState = GameState.GameActive; </span><span class="s1-89">// change the state to active...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// Initialize Timers and settings</span></div>
<div class="l li"><span class="si">            StartCoroutine(updater()); </span><span class="s1-89">// initiate the update loop</span></div>
<div class="l li"><span class="si">            StartCoroutine(boardCheckLooper()); </span><span class="s1-89">// initiate the check loop</span></div>
<div class="l li"><span class="si">            canMove = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// allows player to move the pieces</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            JMFRelay.onGameStart();</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s1-85">&quot;Game already started... cannot start the game again!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion game-start sequence</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Unity Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// UNITY FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> Awake () { </span><span class="s1-89">// board needs to be initialized before other scripts can access it</span></div>
<div class="l li"><span class="si">        JMFUtils.gm = </span><span class="s1-90">this</span><span class="si">; </span><span class="s1-89">// make a easy reference to the GameManager ( this script ! ) </span></div>
<div class="l li"><span class="si">        JMFUtils.wc = GetComponent&lt;WinningConditions&gt;(); </span><span class="s1-89">// make a easy reference to the WinningConditions script~!</span></div>
<div class="l li"><span class="si">        JMFUtils.vm = GetComponent&lt;VisualManager&gt;(); </span><span class="s1-89">// make a easy reference to the VisualManager script~!</span></div>
<div class="l li"><span class="si">        JMFRelay.onPreGameStart();</span></div>
<div class="l li"><span class="si">        initializeGame();</span></div>
<div class="l li"><span class="si">        preGameSetup();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        canMove = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// initially cannot be moved...</span></div>
<div class="l li"><span class="si">        gameState = GameState.GamePending; </span><span class="s1-89">// game is waiting to be started...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> Start(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// init the board objects</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.init(); </span><span class="s1-89">// inits the GUIs for the object</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// save the current position &amp; size of the GameManager as reference</span></div>
<div class="l li"><span class="si">        currentPosition = transform.position;</span></div>
<div class="l li"><span class="si">        currentSize = size;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Update is called once per frame</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> Update () {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// woohoo~ nothing here??</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Unity Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="GameManager(new).cs"><b>GameManager(new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">   1 </div>
<div class="num">   2 </div>
<div class="num">   3 </div>
<div class="num">   4 </div>
<div class="num">   5 </div>
<div class="num">   6 </div>
<div class="num">   7 </div>
<div class="num">   8 </div>
<div class="num">   9 </div>
<div class="num">  10 </div>
<div class="num">  11 </div>
<div class="num">  12 </div>
<div class="num">  13 </div>
<div class="num">  14 </div>
<div class="num">  15 </div>
<div class="num">  16 </div>
<div class="num">  17 </div>
<div class="num">  18 </div>
<div class="num">  19 </div>
<div class="num">  20 </div>
<div class="num">  21 </div>
<div class="num">  22 </div>
<div class="num">  23 </div>
<div class="num">  24 </div>
<div class="num">  25 </div>
<div class="num">  26 </div>
<div class="num">  27 </div>
<div class="num">  28 </div>
<div class="num">  29 </div>
<div class="num">  30 </div>
<div class="num">  31 </div>
<div class="num">  32 </div>
<div class="num">  33 </div>
<div class="num">  34 </div>
<div class="num">  35 </div>
<div class="num">  36 </div>
<div class="num">  37 </div>
<div class="num">  38 </div>
<div class="num">  39 </div>
<div class="num">  40 </div>
<div class="num">  41 </div>
<div class="num">  42 </div>
<div class="num">  43 </div>
<div class="num">  44 </div>
<div class="num">  45 </div>
<div class="num">  46 </div>
<div class="num">  47 </div>
<div class="num">  48 </div>
<div class="num">  49 </div>
<div class="num">  50 </div>
<div class="num">  51 </div>
<div class="num">  52 </div>
<div class="num">  53 </div>
<div class="num">  54 </div>
<div class="num">  55 </div>
<div class="num">  56 </div>
<div class="num">  57 </div>
<div class="num">  58 </div>
<div class="num">  59 </div>
<div class="num">  60 </div>
<div class="num">  61 </div>
<div class="num">  62 </div>
<div class="num">  63 </div>
<div class="num">  64 </div>
<div class="num">  65 </div>
<div class="num">  66 </div>
<div class="num">  67 </div>
<div class="num">  68 </div>
<div class="num">  69 </div>
<div class="num">  70 </div>
<div class="num">  71 </div>
<div class="num">  72 </div>
<div class="num">  73 </div>
<div class="num">  74 </div>
<div class="num">  75 </div>
<div class="num">  76 </div>
<div class="num">  77 </div>
<div class="num">  78 </div>
<div class="num">  79 </div>
<div class="num">  80 </div>
<div class="num">  81 </div>
<div class="num">  82 </div>
<div class="num">  83 </div>
<div class="num">  84 </div>
<div class="num">  85 </div>
<div class="num">  86 </div>
<div class="num">  87 </div>
<div class="num">  88 </div>
<div class="num">  89 </div>
<div class="num">  90 </div>
<div class="num">  91 </div>
<div class="num">  92 </div>
<div class="num">  93 </div>
<div class="num">  94 </div>
<div class="num">  95 </div>
<div class="num">  96 </div>
<div class="num">  97 </div>
<div class="num">  98 </div>
<div class="num">  99 </div>
<div class="num"> 100 </div>
<div class="num"> 101 </div>
<div class="num"> 102 </div>
<div class="num"> 103 </div>
<div class="num"> 104 </div>
<div class="num"> 105 </div>
<div class="num"> 106 </div>
<div class="num"> 107 </div>
<div class="num"> 108 </div>
<div class="num"> 109 </div>
<div class="num"> 110 </div>
<div class="num"> 111 </div>
<div class="num"> 112 </div>
<div class="num"> 113 </div>
<div class="num"> 114 </div>
<div class="num"> 115 </div>
<div class="num"> 116 </div>
<div class="num"> 117 </div>
<div class="num"> 118 </div>
<div class="num"> 119 </div>
<div class="num"> 120 </div>
<div class="num"> 121 </div>
<div class="num"> 122 </div>
<div class="num"> 123 </div>
<div class="num"> 124 </div>
<div class="num"> 125 </div>
<div class="num"> 126 </div>
<div class="num"> 127 </div>
<div class="num"> 128 </div>
<div class="num"> 129 </div>
<div class="num"> 130 </div>
<div class="num"> 131 </div>
<div class="num"> 132 </div>
<div class="num"> 133 </div>
<div class="num"> 134 </div>
<div class="num"> 135 </div>
<div class="num"> 136 </div>
<div class="num"> 137 </div>
<div class="num"> 138 </div>
<div class="num"> 139 </div>
<div class="num"> 140 </div>
<div class="num"> 141 </div>
<div class="num"> 142 </div>
<div class="num"> 143 </div>
<div class="num"> 144 </div>
<div class="num"> 145 </div>
<div class="num"> 146 </div>
<div class="num"> 147 </div>
<div class="num"> 148 </div>
<div class="num"> 149 </div>
<div class="num"> 150 </div>
<div class="num"> 151 </div>
<div class="num"> 152 </div>
<div class="num"> 153 </div>
<div class="num"> 154 </div>
<div class="num"> 155 </div>
<div class="num"> 156 </div>
<div class="num"> 157 </div>
<div class="num"> 158 </div>
<div class="num"> 159 </div>
<div class="num"> 160 </div>
<div class="num"> 161 </div>
<div class="num"> 162 </div>
<div class="num"> 163 </div>
<div class="num"> 164 </div>
<div class="num"> 165 </div>
<div class="num"> 166 </div>
<div class="num"> 167 </div>
<div class="num"> 168 </div>
<div class="num"> 169 </div>
<div class="num"> 170 </div>
<div class="num"> 171 </div>
<div class="num"> 172 </div>
<div class="num"> 173 </div>
<div class="num"> 174 </div>
<div class="num"> 175 </div>
<div class="num"> 176 </div>
<div class="num"> 177 </div>
<div class="num"> 178 </div>
<div class="num"> 179 </div>
<div class="num"> 180 </div>
<div class="num"> 181 </div>
<div class="num"> 182 </div>
<div class="num"> 183 </div>
<div class="num"> 184 </div>
<div class="num"> 185 </div>
<div class="num"> 186 </div>
<div class="num"> 187 </div>
<div class="num"> 188 </div>
<div class="num"> 189 </div>
<div class="num"> 190 </div>
<div class="num"> 191 </div>
<div class="num"> 192 </div>
<div class="num"> 193 </div>
<div class="num"> 194 </div>
<div class="num"> 195 </div>
<div class="num"> 196 </div>
<div class="num"> 197 </div>
<div class="num"> 198 </div>
<div class="num"> 199 </div>
<div class="num"> 200 </div>
<div class="num"> 201 </div>
<div class="num"> 202 </div>
<div class="num"> 203 </div>
<div class="num"> 204 </div>
<div class="num"> 205 </div>
<div class="num"> 206 </div>
<div class="num"> 207 </div>
<div class="num"> 208 </div>
<div class="num"> 209 </div>
<div class="num"> 210 </div>
<div class="num"> 211 </div>
<div class="num"> 212 </div>
<div class="num"> 213 </div>
<div class="num"> 214 </div>
<div class="num"> 215 </div>
<div class="num"> 216 </div>
<div class="num"> 217 </div>
<div class="num"> 218 </div>
<div class="num"> 219 </div>
<div class="num"> 220 </div>
<div class="num"> 221 </div>
<div class="num"> 222 </div>
<div class="num"> 223 </div>
<div class="num"> 224 </div>
<div class="num"> 225 </div>
<div class="num"> 226 </div>
<div class="num"> 227 </div>
<div class="num"> 228 </div>
<div class="num"> 229 </div>
<div class="num"> 230 </div>
<div class="num"> 231 </div>
<div class="num"> 232 </div>
<div class="num"> 233 </div>
<div class="num"> 234 </div>
<div class="num"> 235 </div>
<div class="num"> 236 </div>
<div class="num"> 237 </div>
<div class="num"> 238 </div>
<div class="num"> 239 </div>
<div class="num"> 240 </div>
<div class="num"> 241 </div>
<div class="num"> 242 </div>
<div class="num"> 243 </div>
<div class="num"> 244 </div>
<div class="num"> 245 </div>
<div class="num"> 246 </div>
<div class="num"> 247 </div>
<div class="num"> 248 </div>
<div class="num"> 249 </div>
<div class="num"> 250 </div>
<div class="num"> 251 </div>
<div class="num"> 252 </div>
<div class="num"> 253 </div>
<div class="num"> 254 </div>
<div class="num"> 255 </div>
<div class="num"> 256 </div>
<div class="num"> 257 </div>
<div class="num"> 258 </div>
<div class="num"> 259 </div>
<div class="num"> 260 </div>
<div class="num"> 261 </div>
<div class="num"> 262 </div>
<div class="num"> 263 </div>
<div class="num"> 264 </div>
<div class="num"> 265 </div>
<div class="num"> 266 </div>
<div class="num"> 267 </div>
<div class="num"> 268 </div>
<div class="num"> 269 </div>
<div class="num"> 270 </div>
<div class="num"> 271 </div>
<div class="num"> 272 </div>
<div class="num"> 273 </div>
<div class="num"> 274 </div>
<div class="num"> 275 </div>
<div class="num"> 276 </div>
<div class="num"> 277 </div>
<div class="num"> 278 </div>
<div class="num"> 279 </div>
<div class="num"> 280 </div>
<div class="num"> 281 </div>
<div class="num"> 282 </div>
<div class="num"> 283 </div>
<div class="num"> 284 </div>
<div class="num"> 285 </div>
<div class="num"> 286 </div>
<div class="num"> 287 </div>
<div class="num"> 288 </div>
<div class="num"> 289 </div>
<div class="num"> 290 </div>
<div class="num"> 291 </div>
<div class="num"> 292 </div>
<div class="num"> 293 </div>
<div class="num"> 294 </div>
<div class="num"> 295 </div>
<div class="num"> 296 </div>
<div class="num"> 297 </div>
<div class="num"> 298 </div>
<div class="num"> 299 </div>
<div class="num"> 300 </div>
<div class="num"> 301 </div>
<div class="num"> 302 </div>
<div class="num"> 303 </div>
<div class="num"> 304 </div>
<div class="num"> 305 </div>
<div class="num"> 306 </div>
<div class="num"> 307 </div>
<div class="num"> 308 </div>
<div class="num"> 309 </div>
<div class="num"> 310 </div>
<div class="num"> 311 </div>
<div class="num"> 312 </div>
<div class="num"> 313 </div>
<div class="num"> 314 </div>
<div class="num"> 315 </div>
<div class="num"> 316 </div>
<div class="num"> 317 </div>
<div class="num"> 318 </div>
<div class="num"> 319 </div>
<div class="num"> 320 </div>
<div class="num"> 321 </div>
<div class="num"> 322 </div>
<div class="num"> 323 </div>
<div class="num"> 324 </div>
<div class="num"> 325 </div>
<div class="num"> 326 </div>
<div class="num"> 327 </div>
<div class="num"> 328 </div>
<div class="num"> 329 </div>
<div class="num"> 330 </div>
<div class="num"> 331 </div>
<div class="num"> 332 </div>
<div class="num"> 333 </div>
<div class="num"> 334 </div>
<div class="num"> 335 </div>
<div class="num"> 336 </div>
<div class="num"> 337 </div>
<div class="num"> 338 </div>
<div class="num"> 339 </div>
<div class="num"> 340 </div>
<div class="num"> 341 </div>
<div class="num"> 342 </div>
<div class="num"> 343 </div>
<div class="num"> 344 </div>
<div class="num"> 345 </div>
<div class="num"> 346 </div>
<div class="num"> 347 </div>
<div class="num"> 348 </div>
<div class="num"> 349 </div>
<div class="num"> 350 </div>
<div class="num"> 351 </div>
<div class="num"> 352 </div>
<div class="num"> 353 </div>
<div class="num"> 354 </div>
<div class="num"> 355 </div>
<div class="num"> 356 </div>
<div class="num"> 357 </div>
<div class="num"> 358 </div>
<div class="num"> 359 </div>
<div class="num"> 360 </div>
<div class="num"> 361 </div>
<div class="num"> 362 </div>
<div class="num"> 363 </div>
<div class="num"> 364 </div>
<div class="num"> 365 </div>
<div class="num"> 366 </div>
<div class="num"> 367 </div>
<div class="num"> 368 </div>
<div class="num"> 369 </div>
<div class="num"> 370 </div>
<div class="num"> 371 </div>
<div class="num"> 372 </div>
<div class="num"> 373 </div>
<div class="num"> 374 </div>
<div class="num"> 375 </div>
<div class="num"> 376 </div>
<div class="num"> 377 </div>
<div class="num"> 378 </div>
<div class="num"> 379 </div>
<div class="num"> 380 </div>
<div class="num"> 381 </div>
<div class="num"> 382 </div>
<div class="num"> 383 </div>
<div class="num"> 384 </div>
<div class="num"> 385 </div>
<div class="num"> 386 </div>
<div class="num"> 387 </div>
<div class="num"> 388 </div>
<div class="num"> 389 </div>
<div class="num"> 390 </div>
<div class="num"> 391 </div>
<div class="num"> 392 </div>
<div class="num"> 393 </div>
<div class="num"> 394 </div>
<div class="num"> 395 </div>
<div class="num"> 396 </div>
<div class="num"> 397 </div>
<div class="num"> 398 </div>
<div class="num"> 399 </div>
<div class="num"> 400 </div>
<div class="num"> 401 </div>
<div class="num"> 402 </div>
<div class="num"> 403 </div>
<div class="num"> 404 </div>
<div class="num"> 405 </div>
<div class="num"> 406 </div>
<div class="num"> 407 </div>
<div class="num"> 408 </div>
<div class="num"> 409 </div>
<div class="num"> 410 </div>
<div class="num"> 411 </div>
<div class="num"> 412 </div>
<div class="num"> 413 </div>
<div class="num"> 414 </div>
<div class="num"> 415 </div>
<div class="num"> 416 </div>
<div class="num"> 417 </div>
<div class="num"> 418 </div>
<div class="num"> 419 </div>
<div class="num"> 420 </div>
<div class="num"> 421 </div>
<div class="num"> 422 </div>
<div class="num"> 423 </div>
<div class="num"> 424 </div>
<div class="num"> 425 </div>
<div class="num"> 426 </div>
<div class="num"> 427 </div>
<div class="num"> 428 </div>
<div class="num"> 429 </div>
<div class="num"> 430 </div>
<div class="num"> 431 </div>
<div class="num"> 432 </div>
<div class="num"> 433 </div>
<div class="num"> 434 </div>
<div class="num"> 435 </div>
<div class="num"> 436 </div>
<div class="num"> 437 </div>
<div class="num"> 438 </div>
<div class="num"> 439 </div>
<div class="num"> 440 </div>
<div class="num"> 441 </div>
<div class="num"> 442 </div>
<div class="num"> 443 </div>
<div class="num"> 444 </div>
<div class="num"> 445 </div>
<div class="num"> 446 </div>
<div class="num"> 447 </div>
<div class="num"> 448 </div>
<div class="num"> 449 </div>
<div class="num"> 450 </div>
<div class="num"> 451 </div>
<div class="num"> 452 </div>
<div class="num"> 453 </div>
<div class="num"> 454 </div>
<div class="num"> 455 </div>
<div class="num"> 456 </div>
<div class="num"> 457 </div>
<div class="num"> 458 </div>
<div class="num"> 459 </div>
<div class="num"> 460 </div>
<div class="num"> 461 </div>
<div class="num"> 462 </div>
<div class="num"> 463 </div>
<div class="num"> 464 </div>
<div class="num"> 465 </div>
<div class="num"> 466 </div>
<div class="num"> 467 </div>
<div class="num"> 468 </div>
<div class="num"> 469 </div>
<div class="num"> 470 </div>
<div class="num"> 471 </div>
<div class="num"> 472 </div>
<div class="num"> 473 </div>
<div class="num"> 474 </div>
<div class="num"> 475 </div>
<div class="num"> 476 </div>
<div class="num"> 477 </div>
<div class="num"> 478 </div>
<div class="num"> 479 </div>
<div class="num"> 480 </div>
<div class="num"> 481 </div>
<div class="num"> 482 </div>
<div class="num"> 483 </div>
<div class="num"> 484 </div>
<div class="num"> 485 </div>
<div class="num"> 486 </div>
<div class="num"> 487 </div>
<div class="num"> 488 </div>
<div class="num"> 489 </div>
<div class="num"> 490 </div>
<div class="num"> 491 </div>
<div class="num"> 492 </div>
<div class="num"> 493 </div>
<div class="num"> 494 </div>
<div class="num"> 495 </div>
<div class="num"> 496 </div>
<div class="num"> 497 </div>
<div class="num"> 498 </div>
<div class="num"> 499 </div>
<div class="num"> 500 </div>
<div class="num"> 501 </div>
<div class="num"> 502 </div>
<div class="num"> 503 </div>
<div class="num"> 504 </div>
<div class="num"> 505 </div>
<div class="num"> 506 </div>
<div class="num"> 507 </div>
<div class="num"> 508 </div>
<div class="num"> 509 </div>
<div class="num"> 510 </div>
<div class="num"> 511 </div>
<div class="num"> 512 </div>
<div class="num"> 513 </div>
<div class="num"> 514 </div>
<div class="num"> 515 </div>
<div class="num"> 516 </div>
<div class="num"> 517 </div>
<div class="num"> 518 </div>
<div class="num"> 519 </div>
<div class="num"> 520 </div>
<div class="num"> 521 </div>
<div class="num"> 522 </div>
<div class="num"> 523 </div>
<div class="num"> 524 </div>
<div class="num"> 525 </div>
<div class="num"> 526 </div>
<div class="num"> 527 </div>
<div class="num"> 528 </div>
<div class="num"> 529 </div>
<div class="num"> 530 </div>
<div class="num"> 531 </div>
<div class="num"> 532 </div>
<div class="num"> 533 </div>
<div class="num"> 534 </div>
<div class="num"> 535 </div>
<div class="num"> 536 </div>
<div class="num"> 537 </div>
<div class="num"> 538 </div>
<div class="num"> 539 </div>
<div class="num"> 540 </div>
<div class="num"> 541 </div>
<div class="num"> 542 </div>
<div class="num"> 543 </div>
<div class="num"> 544 </div>
<div class="num"> 545 </div>
<div class="num"> 546 </div>
<div class="num"> 547 </div>
<div class="num"> 548 </div>
<div class="num"> 549 </div>
<div class="num"> 550 </div>
<div class="num"> 551 </div>
<div class="num"> 552 </div>
<div class="num"> 553 </div>
<div class="num"> 554 </div>
<div class="num"> 555 </div>
<div class="num"> 556 </div>
<div class="num"> 557 </div>
<div class="num"> 558 </div>
<div class="num"> 559 </div>
<div class="num"> 560 </div>
<div class="num"> 561 </div>
<div class="num"> 562 </div>
<div class="num"> 563 </div>
<div class="num"> 564 </div>
<div class="num"> 565 </div>
<div class="num"> 566 </div>
<div class="num"> 567 </div>
<div class="num"> 568 </div>
<div class="num"> 569 </div>
<div class="num"> 570 </div>
<div class="num"> 571 </div>
<div class="num"> 572 </div>
<div class="num"> 573 </div>
<div class="num"> 574 </div>
<div class="num"> 575 </div>
<div class="num"> 576 </div>
<div class="num"> 577 </div>
<div class="num"> 578 </div>
<div class="num"> 579 </div>
<div class="num"> 580 </div>
<div class="num"> 581 </div>
<div class="num"> 582 </div>
<div class="num"> 583 </div>
<div class="num"> 584 </div>
<div class="num"> 585 </div>
<div class="num"> 586 </div>
<div class="num"> 587 </div>
<div class="num"> 588 </div>
<div class="num"> 589 </div>
<div class="num"> 590 </div>
<div class="num"> 591 </div>
<div class="num"> 592 </div>
<div class="num"> 593 </div>
<div class="num"> 594 </div>
<div class="num"> 595 </div>
<div class="num"> 596 </div>
<div class="num"> 597 </div>
<div class="num"> 598 </div>
<div class="num"> 599 </div>
<div class="num"> 600 </div>
<div class="num"> 601 </div>
<div class="num"> 602 </div>
<div class="num"> 603 </div>
<div class="num"> 604 </div>
<div class="num"> 605 </div>
<div class="num"> 606 </div>
<div class="num"> 607 </div>
<div class="num"> 608 </div>
<div class="num"> 609 </div>
<div class="num"> 610 </div>
<div class="num"> 611 </div>
<div class="num"> 612 </div>
<div class="num"> 613 </div>
<div class="num"> 614 </div>
<div class="num"> 615 </div>
<div class="num"> 616 </div>
<div class="num"> 617 </div>
<div class="num"> 618 </div>
<div class="num"> 619 </div>
<div class="num"> 620 </div>
<div class="num"> 621 </div>
<div class="num"> 622 </div>
<div class="num"> 623 </div>
<div class="num"> 624 </div>
<div class="num"> 625 </div>
<div class="num"> 626 </div>
<div class="num"> 627 </div>
<div class="num"> 628 </div>
<div class="num"> 629 </div>
<div class="num"> 630 </div>
<div class="num"> 631 </div>
<div class="num"> 632 </div>
<div class="num"> 633 </div>
<div class="num"> 634 </div>
<div class="num"> 635 </div>
<div class="num"> 636 </div>
<div class="num"> 637 </div>
<div class="num"> 638 </div>
<div class="num"> 639 </div>
<div class="num"> 640 </div>
<div class="num"> 641 </div>
<div class="num"> 642 </div>
<div class="num"> 643 </div>
<div class="num"> 644 </div>
<div class="num"> 645 </div>
<div class="num"> 646 </div>
<div class="num"> 647 </div>
<div class="num"> 648 </div>
<div class="num"> 649 </div>
<div class="num"> 650 </div>
<div class="num"> 651 </div>
<div class="num"> 652 </div>
<div class="num"> 653 </div>
<div class="num"> 654 </div>
<div class="num"> 655 </div>
<div class="num"> 656 </div>
<div class="num"> 657 </div>
<div class="num"> 658 </div>
<div class="num"> 659 </div>
<div class="num"> 660 </div>
<div class="num"> 661 </div>
<div class="num"> 662 </div>
<div class="num"> 663 </div>
<div class="num"> 664 </div>
<div class="num"> 665 </div>
<div class="num"> 666 </div>
<div class="num"> 667 </div>
<div class="num"> 668 </div>
<div class="num"> 669 </div>
<div class="num"> 670 </div>
<div class="num"> 671 </div>
<div class="num"> 672 </div>
<div class="num"> 673 </div>
<div class="num"> 674 </div>
<div class="num"> 675 </div>
<div class="num"> 676 </div>
<div class="num"> 677 </div>
<div class="num"> 678 </div>
<div class="num"> 679 </div>
<div class="num"> 680 </div>
<div class="num"> 681 </div>
<div class="num"> 682 </div>
<div class="num"> 683 </div>
<div class="num"> 684 </div>
<div class="num"> 685 </div>
<div class="num"> 686 </div>
<div class="num"> 687 </div>
<div class="num"> 688 </div>
<div class="num"> 689 </div>
<div class="num"> 690 </div>
<div class="num"> 691 </div>
<div class="num"> 692 </div>
<div class="num"> 693 </div>
<div class="num"> 694 </div>
<div class="num"> 695 </div>
<div class="num"> 696 </div>
<div class="num"> 697 </div>
<div class="num"> 698 </div>
<div class="num"> 699 </div>
<div class="num"> 700 </div>
<div class="num"> 701 </div>
<div class="num"> 702 </div>
<div class="num"> 703 </div>
<div class="num"> 704 </div>
<div class="num"> 705 </div>
<div class="num"> 706 </div>
<div class="num"> 707 </div>
<div class="num"> 708 </div>
<div class="num"> 709 </div>
<div class="num"> 710 </div>
<div class="num"> 711 </div>
<div class="num"> 712 </div>
<div class="num"> 713 </div>
<div class="num"> 714 </div>
<div class="num"> 715 </div>
<div class="num"> 716 </div>
<div class="num"> 717 </div>
<div class="num"> 718 </div>
<div class="num"> 719 </div>
<div class="num"> 720 </div>
<div class="num"> 721 </div>
<div class="num"> 722 </div>
<div class="num"> 723 </div>
<div class="num"> 724 </div>
<div class="num"> 725 </div>
<div class="num"> 726 </div>
<div class="num"> 727 </div>
<div class="num"> 728 </div>
<div class="num"> 729 </div>
<div class="num"> 730 </div>
<div class="num"> 731 </div>
<div class="num"> 732 </div>
<div class="num"> 733 </div>
<div class="num"> 734 </div>
<div class="num"> 735 </div>
<div class="num"> 736 </div>
<div class="num"> 737 </div>
<div class="num"> 738 </div>
<div class="num"> 739 </div>
<div class="num"> 740 </div>
<div class="num"> 741 </div>
<div class="num"> 742 </div>
<div class="num"> 743 </div>
<div class="num"> 744 </div>
<div class="num"> 745 </div>
<div class="num"> 746 </div>
<div class="num"> 747 </div>
<div class="num"> 748 </div>
<div class="num"> 749 </div>
<div class="num"> 750 </div>
<div class="num"> 751 </div>
<div class="num"> 752 </div>
<div class="num"> 753 </div>
<div class="num"> 754 </div>
<div class="num"> 755 </div>
<div class="num"> 756 </div>
<div class="num"> 757 </div>
<div class="num"> 758 </div>
<div class="num"> 759 </div>
<div class="num"> 760 </div>
<div class="num"> 761 </div>
<div class="num"> 762 </div>
<div class="num"> 763 </div>
<div class="num"> 764 </div>
<div class="num"> 765 </div>
<div class="num"> 766 </div>
<div class="num"> 767 </div>
<div class="num"> 768 </div>
<div class="num"> 769 </div>
<div class="num"> 770 </div>
<div class="num"> 771 </div>
<div class="num"> 772 </div>
<div class="num"> 773 </div>
<div class="num"> 774 </div>
<div class="num"> 775 </div>
<div class="num"> 776 </div>
<div class="num"> 777 </div>
<div class="num"> 778 </div>
<div class="num"> 779 </div>
<div class="num"> 780 </div>
<div class="num"> 781 </div>
<div class="num">     </div>
<div class="num"> 782 </div>
<div class="num"> 783 </div>
<div class="num"> 784 </div>
<div class="num"> 785 </div>
<div class="num"> 786 </div>
<div class="num"> 787 </div>
<div class="num"> 788 </div>
<div class="num"> 789 </div>
<div class="num"> 790 </div>
<div class="num"> 791 </div>
<div class="num"> 792 </div>
<div class="num"> 793 </div>
<div class="num"> 794 </div>
<div class="num"> 795 </div>
<div class="num"> 796 </div>
<div class="num"> 797 </div>
<div class="num"> 798 </div>
<div class="num"> 799 </div>
<div class="num"> 800 </div>
<div class="num"> 801 </div>
<div class="num"> 802 </div>
<div class="num"> 803 </div>
<div class="num"> 804 </div>
<div class="num"> 805 </div>
<div class="num"> 806 </div>
<div class="num"> 807 </div>
<div class="num"> 808 </div>
<div class="num"> 809 </div>
<div class="num"> 810 </div>
<div class="num"> 811 </div>
<div class="num"> 812 </div>
<div class="num"> 813 </div>
<div class="num"> 814 </div>
<div class="num"> 815 </div>
<div class="num"> 816 </div>
<div class="num"> 817 </div>
<div class="num"> 818 </div>
<div class="num"> 819 </div>
<div class="num"> 820 </div>
<div class="num"> 821 </div>
<div class="num"> 822 </div>
<div class="num"> 823 </div>
<div class="num"> 824 </div>
<div class="num"> 825 </div>
<div class="num"> 826 </div>
<div class="num"> 827 </div>
<div class="num"> 828 </div>
<div class="num"> 829 </div>
<div class="num"> 830 </div>
<div class="num"> 831 </div>
<div class="num"> 832 </div>
<div class="num"> 833 </div>
<div class="num"> 834 </div>
<div class="num"> 835 </div>
<div class="num"> 836 </div>
<div class="num"> 837 </div>
<div class="num"> 838 </div>
<div class="num"> 839 </div>
<div class="num"> 840 </div>
<div class="num"> 841 </div>
<div class="num"> 842 </div>
<div class="num"> 843 </div>
<div class="num"> 844 </div>
<div class="num"> 845 </div>
<div class="num"> 846 </div>
<div class="num"> 847 </div>
<div class="num"> 848 </div>
<div class="num"> 849 </div>
<div class="num"> 850 </div>
<div class="num"> 851 </div>
<div class="num"> 852 </div>
<div class="num"> 853 </div>
<div class="num"> 854 </div>
<div class="num"> 855 </div>
<div class="num"> 856 </div>
<div class="num"> 857 </div>
<div class="num"> 858 </div>
<div class="num"> 859 </div>
<div class="num"> 860 </div>
<div class="num"> 861 </div>
<div class="num"> 862 </div>
<div class="num"> 863 </div>
<div class="num"> 864 </div>
<div class="num"> 865 </div>
<div class="num"> 866 </div>
<div class="num"> 867 </div>
<div class="num"> 868 </div>
<div class="num"> 869 </div>
<div class="num"> 870 </div>
<div class="num"> 871 </div>
<div class="num"> 872 </div>
<div class="num"> 873 </div>
<div class="num"> 874 </div>
<div class="num"> 875 </div>
<div class="num"> 876 </div>
<div class="num"> 877 </div>
<div class="num"> 878 </div>
<div class="num"> 879 </div>
<div class="num"> 880 </div>
<div class="num"> 881 </div>
<div class="num"> 882 </div>
<div class="num"> 883 </div>
<div class="num"> 884 </div>
<div class="num"> 885 </div>
<div class="num"> 886 </div>
<div class="num"> 887 </div>
<div class="num"> 888 </div>
<div class="num"> 889 </div>
<div class="num"> 890 </div>
<div class="num"> 891 </div>
<div class="num"> 892 </div>
<div class="num"> 893 </div>
<div class="num"> 894 </div>
<div class="num"> 895 </div>
<div class="num"> 896 </div>
<div class="num"> 897 </div>
<div class="num"> 898 </div>
<div class="num"> 899 </div>
<div class="num"> 900 </div>
<div class="num"> 901 </div>
<div class="num"> 902 </div>
<div class="num"> 903 </div>
<div class="num"> 904 </div>
<div class="num"> 905 </div>
<div class="num"> 906 </div>
<div class="num"> 907 </div>
<div class="num"> 908 </div>
<div class="num"> 909 </div>
<div class="num"> 910 </div>
<div class="num"> 911 </div>
<div class="num"> 912 </div>
<div class="num"> 913 </div>
<div class="num"> 914 </div>
<div class="num"> 915 </div>
<div class="num"> 916 </div>
<div class="num"> 917 </div>
<div class="num"> 918 </div>
<div class="num"> 919 </div>
<div class="num"> 920 </div>
<div class="num"> 921 </div>
<div class="num"> 922 </div>
<div class="num"> 923 </div>
<div class="num"> 924 </div>
<div class="num"> 925 </div>
<div class="num"> 926 </div>
<div class="num"> 927 </div>
<div class="num"> 928 </div>
<div class="num"> 929 </div>
<div class="num"> 930 </div>
<div class="num"> 931 </div>
<div class="num"> 932 </div>
<div class="num"> 933 </div>
<div class="num"> 934 </div>
<div class="num"> 935 </div>
<div class="num"> 936 </div>
<div class="num"> 937 </div>
<div class="num"> 938 </div>
<div class="num"> 939 </div>
<div class="num"> 940 </div>
<div class="num"> 941 </div>
<div class="num"> 942 </div>
<div class="num"> 943 </div>
<div class="num"> 944 </div>
<div class="num"> 945 </div>
<div class="num"> 946 </div>
<div class="num"> 947 </div>
<div class="num"> 948 </div>
<div class="num"> 949 </div>
<div class="num"> 950 </div>
<div class="num"> 951 </div>
<div class="num"> 952 </div>
<div class="num"> 953 </div>
<div class="num"> 954 </div>
<div class="num"> 955 </div>
<div class="num"> 956 </div>
<div class="num"> 957 </div>
<div class="num"> 958 </div>
<div class="num"> 959 </div>
<div class="num"> 960 </div>
<div class="num"> 961 </div>
<div class="num"> 962 </div>
<div class="num"> 963 </div>
<div class="num"> 964 </div>
<div class="num"> 965 </div>
<div class="num"> 966 </div>
<div class="num"> 967 </div>
<div class="num"> 968 </div>
<div class="num"> 969 </div>
<div class="num"> 970 </div>
<div class="num"> 971 </div>
<div class="num"> 972 </div>
<div class="num"> 973 </div>
<div class="num"> 974 </div>
<div class="num"> 975 </div>
<div class="num"> 976 </div>
<div class="num"> 977 </div>
<div class="num"> 978 </div>
<div class="num"> 979 </div>
<div class="num">     </div>
<div class="num"> 980 </div>
<div class="num"> 981 </div>
<div class="num"> 982 </div>
<div class="num"> 983 </div>
<div class="num"> 984 </div>
<div class="num"> 985 </div>
<div class="num"> 986 </div>
<div class="num"> 987 </div>
<div class="num"> 988 </div>
<div class="num"> 989 </div>
<div class="num"> 990 </div>
<div class="num"> 991 </div>
<div class="num"> 992 </div>
<div class="num"> 993 </div>
<div class="num"> 994 </div>
<div class="num"> 995 </div>
<div class="num"> 996 </div>
<div class="num"> 997 </div>
<div class="num"> 998 </div>
<div class="num"> 999 </div>
<div class="num">1000 </div>
<div class="num">1001 </div>
<div class="num">1002 </div>
<div class="num">1003 </div>
<div class="num">1004 </div>
<div class="num">1005 </div>
<div class="num">1006 </div>
<div class="num">1007 </div>
<div class="num">1008 </div>
<div class="num">1009 </div>
<div class="num">1010 </div>
<div class="num">1011 </div>
<div class="num">1012 </div>
<div class="num">1013 </div>
<div class="num">1014 </div>
<div class="num">1015 </div>
<div class="num">1016 </div>
<div class="num">1017 </div>
<div class="num">1018 </div>
<div class="num">1019 </div>
<div class="num">1020 </div>
<div class="num">1021 </div>
<div class="num">1022 </div>
<div class="num">1023 </div>
<div class="num">1024 </div>
<div class="num">1025 </div>
<div class="num">1026 </div>
<div class="num">1027 </div>
<div class="num">1028 </div>
<div class="num">1029 </div>
<div class="num">1030 </div>
<div class="num">1031 </div>
<div class="num">1032 </div>
<div class="num">1033 </div>
<div class="num">1034 </div>
<div class="num">1035 </div>
<div class="num">1036 </div>
<div class="num">1037 </div>
<div class="num">1038 </div>
<div class="num">1039 </div>
<div class="num">1040 </div>
<div class="num">1041 </div>
<div class="num">1042 </div>
<div class="num">1043 </div>
<div class="num">1044 </div>
<div class="num">1045 </div>
<div class="num">1046 </div>
<div class="num">1047 </div>
<div class="num">1048 </div>
<div class="num">1049 </div>
<div class="num">1050 </div>
<div class="num">1051 </div>
<div class="num">1052 </div>
<div class="num">1053 </div>
<div class="num">1054 </div>
<div class="num">1055 </div>
<div class="num">1056 </div>
<div class="num">1057 </div>
<div class="num">1058 </div>
<div class="num">1059 </div>
<div class="num">1060 </div>
<div class="num">1061 </div>
<div class="num">1062 </div>
<div class="num">1063 </div>
<div class="num">1064 </div>
<div class="num">1065 </div>
<div class="num">1066 </div>
<div class="num">1067 </div>
<div class="num">1068 </div>
<div class="num">1069 </div>
<div class="num">1070 </div>
<div class="num">1071 </div>
<div class="num">1072 </div>
<div class="num">1073 </div>
<div class="num">1074 </div>
<div class="num">1075 </div>
<div class="num">1076 </div>
<div class="num">1077 </div>
<div class="num">1078 </div>
<div class="num">1079 </div>
<div class="num">1080 </div>
<div class="num">1081 </div>
<div class="num">1082 </div>
<div class="num">1083 </div>
<div class="num">1084 </div>
<div class="num">1085 </div>
<div class="num">1086 </div>
<div class="num">1087 </div>
<div class="num">1088 </div>
<div class="num">1089 </div>
<div class="num">1090 </div>
<div class="num">1091 </div>
<div class="num">1092 </div>
<div class="num">1093 </div>
<div class="num">1094 </div>
<div class="num">1095 </div>
<div class="num">1096 </div>
<div class="num">1097 </div>
<div class="num">1098 </div>
<div class="num">1099 </div>
<div class="num">1100 </div>
<div class="num">1101 </div>
<div class="num">1102 </div>
<div class="num">1103 </div>
<div class="num">1104 </div>
<div class="num">1105 </div>
<div class="num">1106 </div>
<div class="num">1107 </div>
<div class="num">1108 </div>
<div class="num">1109 </div>
<div class="num">1110 </div>
<div class="num">1111 </div>
<div class="num">1112 </div>
<div class="num">1113 </div>
<div class="num">1114 </div>
<div class="num">1115 </div>
<div class="num">1116 </div>
<div class="num">1117 </div>
<div class="num">1118 </div>
<div class="num">1119 </div>
<div class="num">1120 </div>
<div class="num">1121 </div>
<div class="num">1122 </div>
<div class="num">1123 </div>
<div class="num">1124 </div>
<div class="num">1125 </div>
<div class="num">1126 </div>
<div class="num">1127 </div>
<div class="num">1128 </div>
<div class="num">1129 </div>
<div class="num">1130 </div>
<div class="num">1131 </div>
<div class="num">1132 </div>
<div class="num">1133 </div>
<div class="num">1134 </div>
<div class="num">1135 </div>
<div class="num">1136 </div>
<div class="num">1137 </div>
<div class="num">1138 </div>
<div class="num">1139 </div>
<div class="num">1140 </div>
<div class="num">1141 </div>
<div class="num">1142 </div>
<div class="num">1143 </div>
<div class="num">1144 </div>
<div class="num">1145 </div>
<div class="num">1146 </div>
<div class="num">1147 </div>
<div class="num">1148 </div>
<div class="num">1149 </div>
<div class="num">1150 </div>
<div class="num">1151 </div>
<div class="num">1152 </div>
<div class="num">1153 </div>
<div class="num">1154 </div>
<div class="num">1155 </div>
<div class="num">1156 </div>
<div class="num">1157 </div>
<div class="num">1158 </div>
<div class="num">1159 </div>
<div class="num">1160 </div>
<div class="num">1161 </div>
<div class="num">1162 </div>
<div class="num">1163 </div>
<div class="num">1164 </div>
<div class="num">1165 </div>
<div class="num">1166 </div>
<div class="num">1167 </div>
<div class="num">1168 </div>
<div class="num">1169 </div>
<div class="num">1170 </div>
<div class="num">1171 </div>
<div class="num">1172 </div>
<div class="num">1173 </div>
<div class="num">1174 </div>
<div class="num">1175 </div>
<div class="num">1176 </div>
<div class="num">1177 </div>
<div class="num">1178 </div>
<div class="num">1179 </div>
<div class="num">1180 </div>
<div class="num">1181 </div>
<div class="num">1182 </div>
<div class="num">1183 </div>
<div class="num">1184 </div>
<div class="num">1185 </div>
<div class="num">1186 </div>
<div class="num">1187 </div>
<div class="num">1188 </div>
<div class="num">1189 </div>
<div class="num">1190 </div>
<div class="num">1191 </div>
<div class="num">1192 </div>
<div class="num">1193 </div>
<div class="num">1194 </div>
<div class="num">1195 </div>
<div class="num">1196 </div>
<div class="num">1197 </div>
<div class="num">1198 </div>
<div class="num">1199 </div>
<div class="num">1200 </div>
<div class="num">1201 </div>
<div class="num">1202 </div>
<div class="num">1203 </div>
<div class="num">1204 </div>
<div class="num">1205 </div>
<div class="num">1206 </div>
<div class="num">1207 </div>
<div class="num">1208 </div>
<div class="num">1209 </div>
<div class="num">1210 </div>
<div class="num">1211 </div>
<div class="num">1212 </div>
<div class="num">1213 </div>
<div class="num">1214 </div>
<div class="num">1215 </div>
<div class="num">1216 </div>
<div class="num">1217 </div>
<div class="num">1218 </div>
<div class="num">1219 </div>
<div class="num">1220 </div>
<div class="num">1221 </div>
<div class="num">1222 </div>
<div class="num">1223 </div>
<div class="num">1224 </div>
<div class="num">1225 </div>
<div class="num">1226 </div>
<div class="num">1227 </div>
<div class="num">1228 </div>
<div class="num">1229 </div>
<div class="num">1230 </div>
<div class="num">1231 </div>
<div class="num">1232 </div>
<div class="num">1233 </div>
<div class="num">1234 </div>
<div class="num">1235 </div>
<div class="num">1236 </div>
<div class="num">1237 </div>
<div class="num">1238 </div>
<div class="num">1239 </div>
<div class="num">1240 </div>
<div class="num">1241 </div>
<div class="num">1242 </div>
<div class="num">1243 </div>
<div class="num">1244 </div>
<div class="num">1245 </div>
<div class="num">1246 </div>
<div class="num">1247 </div>
<div class="num">1248 </div>
<div class="num">1249 </div>
<div class="num">1250 </div>
<div class="num">1251 </div>
<div class="num">1252 </div>
<div class="num">1253 </div>
<div class="num">1254 </div>
<div class="num">1255 </div>
<div class="num">1256 </div>
<div class="num">1257 </div>
<div class="num">1258 </div>
<div class="num">1259 </div>
<div class="num">1260 </div>
<div class="num">1261 </div>
<div class="num">1262 </div>
<div class="num">1263 </div>
<div class="num">1264 </div>
<div class="num">1265 </div>
<div class="num">1266 </div>
<div class="num">1267 </div>
<div class="num">1268 </div>
<div class="num">1269 </div>
<div class="num">1270 </div>
<div class="num">1271 </div>
<div class="num">1272 </div>
<div class="num">1273 </div>
<div class="num">1274 </div>
<div class="num">1275 </div>
<div class="num">1276 </div>
<div class="num">1277 </div>
<div class="num">1278 </div>
<div class="num">1279 </div>
<div class="num">1280 </div>
<div class="num">1281 </div>
<div class="num">1282 </div>
<div class="num">1283 </div>
<div class="num">1284 </div>
<div class="num">1285 </div>
<div class="num">1286 </div>
<div class="num">1287 </div>
<div class="num">1288 </div>
<div class="num">1289 </div>
<div class="num">1290 </div>
<div class="num">1291 </div>
<div class="num">1292 </div>
<div class="num">1293 </div>
<div class="num">1294 </div>
<div class="num">1295 </div>
<div class="num">1296 </div>
<div class="num">1297 </div>
<div class="num">1298 </div>
<div class="num">1299 </div>
<div class="num">1300 </div>
<div class="num">1301 </div>
<div class="num">1302 </div>
<div class="num">1303 </div>
<div class="num">1304 </div>
<div class="num">1305 </div>
<div class="num">1306 </div>
<div class="num">1307 </div>
<div class="num">1308 </div>
<div class="num">1309 </div>
<div class="num">1310 </div>
<div class="num">1311 </div>
<div class="num">1312 </div>
<div class="num">1313 </div>
<div class="num">1314 </div>
<div class="num">1315 </div>
<div class="num">1316 </div>
<div class="num">1317 </div>
<div class="num">1318 </div>
<div class="num">1319 </div>
<div class="num">1320 </div>
<div class="num">1321 </div>
<div class="num">1322 </div>
<div class="num">1323 </div>
<div class="num">1324 </div>
<div class="num">1325 </div>
<div class="num">1326 </div>
<div class="num">1327 </div>
<div class="num">1328 </div>
<div class="num">1329 </div>
<div class="num">1330 </div>
<div class="num">1331 </div>
<div class="num">1332 </div>
<div class="num">1333 </div>
<div class="num">1334 </div>
<div class="num">1335 </div>
<div class="num">1336 </div>
<div class="num">1337 </div>
<div class="num">1338 </div>
<div class="num">1339 </div>
<div class="num">1340 </div>
<div class="num">1341 </div>
<div class="num">1342 </div>
<div class="num">1343 </div>
<div class="num">1344 </div>
<div class="num">1345 </div>
<div class="num">1346 </div>
<div class="num">1347 </div>
<div class="num">1348 </div>
<div class="num">1349 </div>
<div class="num">1350 </div>
<div class="num">1351 </div>
<div class="num">1352 </div>
<div class="num">1353 </div>
<div class="num">1354 </div>
<div class="num">1355 </div>
<div class="num">1356 </div>
<div class="num">1357 </div>
<div class="num">1358 </div>
<div class="num">1359 </div>
<div class="num">1360 </div>
<div class="num">1361 </div>
<div class="num">1362 </div>
<div class="num">1363 </div>
<div class="num">1364 </div>
<div class="num">1365 </div>
<div class="num">1366 </div>
<div class="num">1367 </div>
<div class="num">1368 </div>
<div class="num">1369 </div>
<div class="num">1370 </div>
<div class="num">1371 </div>
<div class="num">1372 </div>
<div class="num">1373 </div>
<div class="num">1374 </div>
<div class="num">1375 </div>
<div class="num">1376 </div>
<div class="num">1377 </div>
<div class="num">1378 </div>
<div class="num">1379 </div>
<div class="num">1380 </div>
<div class="num">1381 </div>
<div class="num">1382 </div>
<div class="num">1383 </div>
<div class="num">1384 </div>
<div class="num">1385 </div>
<div class="num">1386 </div>
<div class="num">1387 </div>
<div class="num">1388 </div>
<div class="num">1389 </div>
<div class="num">1390 </div>
<div class="num">1391 </div>
<div class="num">1392 </div>
<div class="num">1393 </div>
<div class="num">1394 </div>
<div class="num">1395 </div>
<div class="num">1396 </div>
<div class="num">1397 </div>
<div class="num">1398 </div>
<div class="num">1399 </div>
<div class="num">1400 </div>
<div class="num">1401 </div>
<div class="num">1402 </div>
<div class="num">1403 </div>
<div class="num">1404 </div>
<div class="num">1405 </div>
<div class="num">1406 </div>
<div class="num">1407 </div>
<div class="num">1408 </div>
<div class="num">1409 </div>
<div class="num">1410 </div>
<div class="num">1411 </div>
<div class="num">1412 </div>
<div class="num">1413 </div>
<div class="num">1414 </div>
<div class="num">1415 </div>
<div class="num">1416 </div>
<div class="num">1417 </div>
<div class="num">1418 </div>
<div class="num">1419 </div>
<div class="num">1420 </div>
<div class="num">1421 </div>
<div class="num">1422 </div>
<div class="num">1423 </div>
<div class="num">1424 </div>
<div class="num">1425 </div>
<div class="num">1426 </div>
<div class="num">1427 </div>
<div class="num">1428 </div>
<div class="num">1429 </div>
<div class="num">1430 </div>
<div class="num">1431 </div>
<div class="num">1432 </div>
<div class="num">1433 </div>
<div class="num">1434 </div>
<div class="num">1435 </div>
<div class="num">1436 </div>
<div class="num">1437 </div>
<div class="num">1438 </div>
<div class="num">1439 </div>
<div class="num">1440 </div>
<div class="num">1441 </div>
<div class="num">1442 </div>
<div class="num">1443 </div>
<div class="num">1444 </div>
<div class="num">1445 </div>
<div class="num">1446 </div>
<div class="num">1447 </div>
<div class="num">1448 </div>
<div class="num">1449 </div>
<div class="num">1450 </div>
<div class="num">1451 </div>
<div class="num">1452 </div>
<div class="num">1453 </div>
<div class="num">1454 </div>
<div class="num">1455 </div>
<div class="num">1456 </div>
<div class="num">1457 </div>
<div class="num">1458 </div>
<div class="num">1459 </div>
<div class="num">1460 </div>
<div class="num">1461 </div>
<div class="num">1462 </div>
<div class="num">1463 </div>
<div class="num">1464 </div>
<div class="num">1465 </div>
<div class="num">1466 </div>
<div class="num">1467 </div>
<div class="num">1468 </div>
<div class="num">1469 </div>
<div class="num">1470 </div>
<div class="num">1471 </div>
<div class="num">1472 </div>
<div class="num">1473 </div>
<div class="num">1474 </div>
<div class="num">1475 </div>
<div class="num">1476 </div>
<div class="num">1477 </div>
<div class="num">1478 </div>
<div class="num">1479 </div>
<div class="num">1480 </div>
<div class="num">1481 </div>
<div class="num">1482 </div>
<div class="num">1483 </div>
<div class="num">1484 </div>
<div class="num">1485 </div>
<div class="num">1486 </div>
<div class="num">1487 </div>
<div class="num">1488 </div>
<div class="num">1489 </div>
<div class="num">1490 </div>
<div class="num">1491 </div>
<div class="num">1492 </div>
<div class="num">1493 </div>
<div class="num">1494 </div>
<div class="num">1495 </div>
<div class="num">1496 </div>
<div class="num">1497 </div>
<div class="num">1498 </div>
<div class="num">1499 </div>
<div class="num">1500 </div>
<div class="num">1501 </div>
<div class="num">1502 </div>
<div class="num">1503 </div>
<div class="num">1504 </div>
<div class="num">1505 </div>
<div class="num">1506 </div>
<div class="num">1507 </div>
<div class="num">1508 </div>
<div class="num">1509 </div>
<div class="num">1510 </div>
<div class="num">1511 </div>
<div class="num">1512 </div>
<div class="num">1513 </div>
<div class="num">1514 </div>
<div class="num">1515 </div>
<div class="num">1516 </div>
<div class="num">1517 </div>
<div class="num">1518 </div>
<div class="num">1519 </div>
<div class="num">1520 </div>
<div class="num">1521 </div>
<div class="num">1522 </div>
<div class="num">1523 </div>
<div class="num">1524 </div>
<div class="num">1525 </div>
<div class="num">1526 </div>
<div class="num">1527 </div>
<div class="num">1528 </div>
<div class="num">1529 </div>
<div class="num">1530 </div>
<div class="num">1531 </div>
<div class="num">1532 </div>
<div class="num">1533 </div>
<div class="num">1534 </div>
<div class="num">1535 </div>
<div class="num">1536 </div>
<div class="num">1537 </div>
<div class="num">1538 </div>
<div class="num">1539 </div>
<div class="num">1540 </div>
<div class="num">1541 </div>
<div class="num">1542 </div>
<div class="num">1543 </div>
<div class="num">1544 </div>
<div class="num">1545 </div>
<div class="num">1546 </div>
<div class="num">1547 </div>
<div class="num">1548 </div>
<div class="num">1549 </div>
<div class="num">1550 </div>
<div class="num">1551 </div>
<div class="num">1552 </div>
<div class="num">1553 </div>
<div class="num">1554 </div>
<div class="num">1555 </div>
<div class="num">1556 </div>
<div class="num">1557 </div>
<div class="num">1558 </div>
<div class="num">1559 </div>
<div class="num">1560 </div>
<div class="num">1561 </div>
<div class="num">1562 </div>
<div class="num">1563 </div>
<div class="num">1564 </div>
<div class="num">1565 </div>
<div class="num">1566 </div>
<div class="num">1567 </div>
<div class="num">1568 </div>
<div class="num">1569 </div>
<div class="num">1570 </div>
<div class="num">1571 </div>
<div class="num">1572 </div>
<div class="num">1573 </div>
<div class="num">1574 </div>
<div class="num">1575 </div>
<div class="num">1576 </div>
<div class="num">1577 </div>
<div class="num">1578 </div>
<div class="num">1579 </div>
<div class="num">1580 </div>
<div class="num">1581 </div>
<div class="num">1582 </div>
<div class="num">1583 </div>
<div class="num">1584 </div>
<div class="num">1585 </div>
<div class="num">1586 </div>
<div class="num">1587 </div>
<div class="num">1588 </div>
<div class="num">1589 </div>
<div class="num">1590 </div>
<div class="num">1591 </div>
<div class="num">1592 </div>
<div class="num">1593 </div>
<div class="num">1594 </div>
<div class="num">1595 </div>
<div class="num">1596 </div>
<div class="num">1597 </div>
<div class="num">1598 </div>
<div class="num">1599 </div>
<div class="num">1600 </div>
<div class="num">1601 </div>
<div class="num">1602 </div>
<div class="num">1603 </div>
<div class="num">1604 </div>
<div class="num">1605 </div>
<div class="num">1606 </div>
<div class="num">1607 </div>
<div class="num">1608 </div>
<div class="num">1609 </div>
<div class="num">1610 </div>
<div class="num">1611 </div>
<div class="num">1612 </div>
<div class="num">1613 </div>
<div class="num">1614 </div>
<div class="num">1615 </div>
<div class="num">1616 </div>
<div class="num">1617 </div>
<div class="num">1618 </div>
<div class="num">1619 </div>
<div class="num">1620 </div>
<div class="num">1621 </div>
<div class="num">1622 </div>
<div class="num">1623 </div>
<div class="num">1624 </div>
<div class="num">1625 </div>
<div class="num">1626 </div>
<div class="num">1627 </div>
<div class="num">1628 </div>
<div class="num">1629 </div>
<div class="num">1630 </div>
<div class="num">1631 </div>
<div class="num">1632 </div>
<div class="num">1633 </div>
<div class="num">1634 </div>
<div class="num">1635 </div>
<div class="num">1636 </div>
<div class="num">1637 </div>
<div class="num">1638 </div>
<div class="num">1639 </div>
<div class="num">1640 </div>
<div class="num">1641 </div>
<div class="num">1642 </div>
<div class="num">1643 </div>
<div class="num">1644 </div>
<div class="num">1645 </div>
<div class="num">1646 </div>
<div class="num">1647 </div>
<div class="num">1648 </div>
<div class="num">1649 </div>
<div class="num">1650 </div>
<div class="num">1651 </div>
<div class="num">1652 </div>
<div class="num">1653 </div>
<div class="num">1654 </div>
<div class="num">1655 </div>
<div class="num">1656 </div>
<div class="num">1657 </div>
<div class="num">1658 </div>
<div class="num">1659 </div>
<div class="num">1660 </div>
<div class="num">1661 </div>
<div class="num">1662 </div>
<div class="num">1663 </div>
<div class="num">1664 </div>
<div class="num">1665 </div>
<div class="num">1666 </div>
<div class="num">1667 </div>
<div class="num">1668 </div>
<div class="num">1669 </div>
<div class="num">1670 </div>
<div class="num">1671 </div>
<div class="num">1672 </div>
<div class="num">1673 </div>
<div class="num">1674 </div>
<div class="num">1675 </div>
<div class="num">1676 </div>
<div class="num">1677 </div>
<div class="num">1678 </div>
<div class="num">1679 </div>
<div class="num">1680 </div>
<div class="num">1681 </div>
<div class="num">1682 </div>
<div class="num">1683 </div>
<div class="num">1684 </div>
<div class="num">1685 </div>
<div class="num">1686 </div>
<div class="num">1687 </div>
<div class="num">1688 </div>
<div class="num">1689 </div>
<div class="num">1690 </div>
<div class="num">1691 </div>
<div class="num">1692 </div>
<div class="num">1693 </div>
<div class="num">1694 </div>
<div class="num">1695 </div>
<div class="num">1696 </div>
<div class="num">1697 </div>
<div class="num">1698 </div>
<div class="num">1699 </div>
<div class="num">1700 </div>
<div class="num">1701 </div>
<div class="num">1702 </div>
<div class="num">1703 </div>
<div class="num">1704 </div>
<div class="num">1705 </div>
<div class="num">1706 </div>
<div class="num">1707 </div>
<div class="num">1708 </div>
<div class="num">1709 </div>
<div class="num">1710 </div>
<div class="num">1711 </div>
<div class="num">1712 </div>
<div class="num">1713 </div>
<div class="num">1714 </div>
<div class="num">1715 </div>
<div class="num">1716 </div>
<div class="num">1717 </div>
<div class="num">1718 </div>
<div class="num">1719 </div>
<div class="num">1720 </div>
<div class="num">1721 </div>
<div class="num">1722 </div>
<div class="num">1723 </div>
<div class="num">1724 </div>
<div class="num">1725 </div>
<div class="num">1726 </div>
<div class="num">1727 </div>
<div class="num">1728 </div>
<div class="num">1729 </div>
<div class="num">1730 </div>
<div class="num">1731 </div>
<div class="num">1732 </div>
<div class="num">1733 </div>
<div class="num">1734 </div>
<div class="num">1735 </div>
<div class="num">1736 </div>
<div class="num">1737 </div>
<div class="num">1738 </div>
<div class="num">1739 </div>
<div class="num">1740 </div>
<div class="num">1741 </div>
<div class="num">1742 </div>
<div class="num">1743 </div>
<div class="num">1744 </div>
<div class="num">1745 </div>
<div class="num">1746 </div>
<div class="num">1747 </div>
<div class="num">1748 </div>
<div class="num">1749 </div>
<div class="num">1750 </div>
<div class="num">1751 </div>
<div class="num">1752 </div>
<div class="num">1753 </div>
<div class="num">1754 </div>
<div class="num">1755 </div>
<div class="num">1756 </div>
<div class="num">1757 </div>
<div class="num">1758 </div>
<div class="num">1759 </div>
<div class="num">1760 </div>
<div class="num">1761 </div>
<div class="num">1762 </div>
<div class="num">1763 </div>
<div class="num">1764 </div>
<div class="num">1765 </div>
<div class="num">1766 </div>
<div class="num">1767 </div>
<div class="num">1768 </div>
<div class="num">1769 </div>
<div class="num">1770 </div>
<div class="num">1771 </div>
<div class="num">1772 </div>
<div class="num">1773 </div>
<div class="num">1774 </div>
<div class="num">1775 </div>
<div class="num">1776 </div>
<div class="num">1777 </div>
<div class="num">1778 </div>
<div class="num">1779 </div>
<div class="num">1780 </div>
<div class="num">1781 </div>
<div class="num">1782 </div>
<div class="num">1783 </div>
<div class="num">1784 </div>
<div class="num">1785 </div>
<div class="num">1786 </div>
<div class="num">1787 </div>
<div class="num">1788 </div>
<div class="num">1789 </div>
<div class="num">1790 </div>
<div class="num">1791 </div>
<div class="num">1792 </div>
<div class="num">1793 </div>
<div class="num">1794 </div>
<div class="num">1795 </div>
<div class="num">1796 </div>
<div class="num">1797 </div>
<div class="num">1798 </div>
<div class="num">1799 </div>
<div class="num">1800 </div>
<div class="num">1801 </div>
<div class="num">1802 </div>
<div class="num">1803 </div>
<div class="num">1804 </div>
<div class="num">1805 </div>
<div class="num">1806 </div>
<div class="num">1807 </div>
<div class="num">1808 </div>
<div class="num">1809 </div>
<div class="num">1810 </div>
<div class="num">1811 </div>
<div class="num">1812 </div>
<div class="num">1813 </div>
<div class="num">1814 </div>
<div class="num">1815 </div>
<div class="num">1816 </div>
<div class="num">1817 </div>
<div class="num">1818 </div>
<div class="num">1819 </div>
<div class="num">1820 </div>
<div class="num">1821 </div>
<div class="num">1822 </div>
<div class="num">1823 </div>
<div class="num">1824 </div>
<div class="num">1825 </div>
<div class="num">1826 </div>
<div class="num">1827 </div>
<div class="num">1828 </div>
<div class="num">1829 </div>
<div class="num">1830 </div>
<div class="num">1831 </div>
<div class="num">1832 </div>
<div class="num">1833 </div>
<div class="num">1834 </div>
<div class="num">1835 </div>
<div class="num">1836 </div>
<div class="num">1837 </div>
<div class="num">1838 </div>
<div class="num">1839 </div>
<div class="num">1840 </div>
<div class="num">1841 </div>
<div class="num">1842 </div>
<div class="num">1843 </div>
<div class="num">1844 </div>
<div class="num">1845 </div>
<div class="num">1846 </div>
<div class="num">1847 </div>
<div class="num">1848 </div>
<div class="num">1849 </div>
<div class="num">1850 </div>
<div class="num">1851 </div>
<div class="num">1852 </div>
<div class="num">1853 </div>
<div class="num">1854 </div>
<div class="num">1855 </div>
<div class="num">1856 </div>
<div class="num">1857 </div>
<div class="num">1858 </div>
<div class="num">1859 </div>
<div class="num">1860 </div>
<div class="num">1861 </div>
<div class="num">1862 </div>
<div class="num">1863 </div>
<div class="num">1864 </div>
<div class="num">1865 </div>
<div class="num">1866 </div>
<div class="num">1867 </div>
<div class="num">1868 </div>
<div class="num">1869 </div>
<div class="num">1870 </div>
<div class="num">1871 </div>
<div class="num">1872 </div>
<div class="num">1873 </div>
<div class="num">1874 </div>
<div class="num">1875 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// NOTICE :</span></div>
<div class="l li"><span class="s2-89">/// This script is the Mother of all script~!</span></div>
<div class="l li"><span class="s2-89">/// Everything that happens during the game will be controlled in this script.</span></div>
<div class="l li"><span class="s2-89">/// (with public references from support scripts too ofcourse.)</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">// ---</span></div>
<div class="l li"><span class="s2-89">// global access board checking enums</span></div>
<div class="l li"><span class="s2-89">// ---</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> Check{ UP, DOWN, LEFT, RIGHT, TopRight, TopLeft, BottomLeft, BottomRight}; </span><span class="s2-89">// for scenario check of match directions</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> Gravity{ UP, DOWN, LEFT, RIGHT};</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> BoardType{ Square, Hexagon};</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> SquareMode{ CrossType, Box9x9Type};</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> NewPieceMethod{ Appear, FallByGravity};</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> GameState{GamePending,GameActive,GameFinalizing,GameOver};</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">// special pieces</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> PowerType{ NONE,POWH ,POWV, POWT, POW5, POW6};</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">[RequireComponent(</span><span class="s2-90">typeof</span><span class="si">(CustomAnimations), </span><span class="s2-90">typeof</span><span class="si">(BoardLayout), </span><span class="s2-90">typeof</span><span class="si">(WinningConditions))]</span></div>
<div class="l li"><span class="si">[RequireComponent(</span><span class="s2-90">typeof</span><span class="si">(AudioPlayer), </span><span class="s2-90">typeof</span><span class="si">(VisualManager), </span><span class="s2-90">typeof</span><span class="si">(VisualizedGrid) )]</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> GameManager : MonoBehaviour {</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// GLOBAL VARIABLES</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The type of board you want to use for this game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> BoardType boardType = BoardType.Square;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If you have the original 'PoolManager' asset, and want to use the integrated pooling feature.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> usingPoolManager = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The current board's Width in boxes&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,20)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> boardWidth=4;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The current board's Height in boxes&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,20)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> boardHeight=4;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The current board's display size (visible in the Scene View if 'Show Grid' is enabled)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> size = 4; </span><span class="s2-89">// the size we want the board to be</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of spacing between each board box. (Does not affect board size)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(0.0f,100.0f)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> spacingPercentage = 0f; </span><span class="s2-89">// the percentage of spacing user wants</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of padding you want for the pieces inside the board box&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(0.0f,100.0f)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> paddingPercentage = 20f; </span><span class="s2-89">// the percentage of padding user wants</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> boxPadding = 0; </span><span class="s2-89">// the padding in each box **updated during &quot;Awake()&quot;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Visualize Grid : shows Corners of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showCorners = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Visualize Grid : shows the Grids of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showGrid = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Visualize Grid : shows the padded Tiles for the pieces of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showPaddedTile = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Visualize Grid : shows the extra information relating to the board grid in the scene view&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showToolTips = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The number of active colors in the game. (For non-special pieces)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,9)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> NumOfActiveType = 3; </span><span class="s2-89">// remember not to exceed the normalPieces array~!</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Helps eliminate pre-start game matches. (works best with minimum 3 active types)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> eliminatePreStartMatch = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;if Enabled, Players can only swipe when the board has settled during the last move.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> moveOnlyAfterSettle = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// must the player wait for board to settle before next move?</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If Enabled, each move the player takes resets the current Combo.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> movingResetsCombo = </span><span class="s2-90">true</span><span class="si">;</span><span class="s2-89">// player moving will reset the combo?</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;How the new pieces will be created after being destroyed.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> NewPieceMethod newPieceMode = NewPieceMethod.FallByGravity;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// appear type...</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s2-85">&quot;The delay before the new pieces start appearing in 'Appear Mode'&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> appearModeDelay = 0.6f;</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s2-85">&quot;How fast the new piece will appear in 'Appear Mode' after the delay.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> appearModeSpeed = 0.8f;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// gravity type...</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s2-85">&quot;if Enabled, the pieces will be delayed (by the specified amount) before any gravity call&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> delayedGravity = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// delay before a piece drops when there's an empty space</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s2-85">&quot;The amount of delay before gravity takes affect for each individual piece.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> gravityDelayTime = 0.3f; </span><span class="s2-89">// the delay in float seconds</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s2-85">&quot;How fast the pieces will drop to the next board box.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> gravityDropSpeed = 0.25f;</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s2-85">&quot;Makes the pieces drop faster the longer the distance to the bottom.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> acceleratedVelocity = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// drop pieces fall faster if it need to cover more distance</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s2-85">&quot;Give an extra effect when pieces reach the bottom of the box (hardcoded effect)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> pieceDropExtraEffect = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        [Tooltip(</span><span class="s2-85">&quot;The current gravity direction for the board.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> Gravity currentGravity = Gravity.DOWN; </span><span class="s2-89">// initial gravity of the game</span></div>
<div class="l li"><span class="si">        Vector3 gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">        BoardDirection[] bd = </span><span class="s2-90">null</span><span class="si">; </span><span class="s2-89">// the direction array for landslide</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The speed for the next Match-Check by the Game Engine&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> matchCheckSpeed = 0.2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The update speed for the Game Engine (the routine checks of Gravity &amp; possible moves)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> gameUpdateSpeed = 0.2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of delay before the board initiates a board reset when no more moves are available.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> noMoreMoveResetTime = 2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of delay before the board shows the player a legal suggested move.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> suggestionTimer = 5f;</span></div>
<div class="l la d1"><span class="sa">    [Tooltip(&quot;Shows just the suggested Piece or the entire pair.&quot;)]</span></div>
<div class="l la d1"><span class="sa">    public bool showPairedSuggestion = true;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The speed the pieces will switch with each other.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> gemSwitchSpeed = 0.2f;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// pieces &amp; panels prefabs</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The reference for the PieceManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject pieceManager;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The reference for the PanelManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject panelManager;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The reference for the PanelManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject subPanelManager;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> PieceDefinition[] pieceTypes;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> PanelDefinition[] panelTypes;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> SubPanelDefinition[] subPanelTypes;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Board[,] board; </span><span class="s2-89">// the board array</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel[,,] subPanelH; </span><span class="s2-89">// the sub-panel array on the horizontal axis</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel[,] subPanelV; </span><span class="s2-89">// the sub-panel array on the vertical axis</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// scoring stuff</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">long</span><span class="si"> score = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> currentCombo = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> maxCombo = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> ComboPopUp comboScript;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> moves = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] matchCount = </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[9];</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// suggestion variables</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> checkedPossibleMove = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isCheckingPossibleMoves = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    List&lt;GameObject&gt; suggestedPieces = </span><span class="s2-90">new</span><span class="si"> List&lt;GameObject&gt;(); </span><span class="s2-89">// to hold all the possible moves</span></div>
<div class="l li"><span class="si">    List&lt;Board&gt; suggestedBoards = </span><span class="s2-90">new</span><span class="si"> List&lt;Board&gt;(); </span><span class="s2-89">// to hold all the possible moves</span></div>
<div class="l la d2"><span class="sa">    Board pickedSuggestion; // to hold the suggested board</span></div>
<div class="l li"><span class="si">    Vector3 pieceOriginalSize;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> canMove = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// switch to determine if player can make the next move</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// other helper scripts</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> AudioPlayer audioScript;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> CustomAnimations animScript;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// environment control variable</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> GameState gameState = GameState.GameActive;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    Vector3 currentPosition;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">float</span><span class="si"> currentSize;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ENGINE FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ================================================</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Easy Access Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Easy Access FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// an easy access function to call the board from an int-array</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Board iBoard(</span><span class="s2-90">int</span><span class="si">[] arrayRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> board[arrayRef[0],arrayRef[1]];</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector3 getBoardPosition(</span><span class="s2-90">int</span><span class="si">[] boardPosition){ </span><span class="s2-89">// OVERLOAD METHOD for int array</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> board[boardPosition[0],boardPosition[1]].position;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector3 getBoardPosition(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){ </span><span class="s2-89">// OVERLOAD METHOD for int x &amp; y</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> board[x,y].position;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Easy Access Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region pre-game functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> preGameSetup(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// call the board panels preGameSetup...</span></div>
<div class="l li"><span class="si">        GetComponent&lt;BoardLayout&gt;().setupGamePanels();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// call the board piece preGameSetup...</span></div>
<div class="l li"><span class="si">        GetComponent&lt;BoardLayout&gt;().setupGamePieces();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion pre-game functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Misc Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Misc. functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// start game preparation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> initializeGame() {</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        boxPadding = 1f-(paddingPercentage/100); </span><span class="s2-89">// set the padding value</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        pieceTypes = pieceManager.GetComponents&lt;PieceDefinition&gt;();</span></div>
<div class="l li"><span class="si">        panelTypes = panelManager.GetComponents&lt;PanelDefinition&gt;();</span></div>
<div class="l li"><span class="si">        subPanelTypes = subPanelManager.GetComponents&lt;SubPanelDefinition&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// support sub-scripts initialization</span></div>
<div class="l li"><span class="si">        audioScript = GetComponent&lt;AudioPlayer&gt;();</span></div>
<div class="l li"><span class="si">        animScript = GetComponent&lt;CustomAnimations&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// creates a 2D board</span></div>
<div class="l li"><span class="si">        board = </span><span class="s2-90">new</span><span class="si"> Board[boardWidth,boardHeight];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// loop to create the board with blocks</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-89">/// For square type</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) { </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) { </span><span class="s2-89">// for the board height size</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                    Vector3 pos = </span><span class="s2-90">new</span><span class="si"> Vector3( x - (boardWidth/2.0f) + 0.5f, y -(boardHeight/2.0f) + 0.5f, 0);</span></div>
<div class="l li"><span class="si">                    board[x,y] = </span><span class="s2-90">new</span><span class="si"> Board(</span><span class="s2-90">this</span><span class="si">, </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[2]{x,y}, pos*size ) ;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            subPanelV = </span><span class="s2-90">new</span><span class="si"> SubBoardPanel[boardWidth+1,boardHeight+1]; </span><span class="s2-89">// create subPanels-V</span></div>
<div class="l li"><span class="si">            subPanelH = </span><span class="s2-90">new</span><span class="si"> SubBoardPanel[boardWidth+1,boardHeight+1,1]; </span><span class="s2-89">// create subPanels-H</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth+1; x++) { </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight+1; y++) { </span><span class="s2-89">// for the board height size</span></div>
<div class="l li"><span class="si">                    subPanelV[x,y] = </span><span class="s2-90">new</span><span class="si"> SubBoardPanel();</span></div>
<div class="l li"><span class="si">                    subPanelH[x,y,0] = </span><span class="s2-90">new</span><span class="si"> SubBoardPanel();</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon : </span><span class="s2-89">/// For hexagon type</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) { </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) { </span><span class="s2-89">// for the board height size</span></div>
<div class="l li"><span class="si">                    Vector3 pos;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(x%2 == 0){ </span><span class="s2-89">// displacement for hexagon type</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                        pos = </span><span class="s2-90">new</span><span class="si"> Vector3( (x - (boardWidth/2.0f) + 0.5f)*0.865f, y -(boardHeight/2.0f) + 0.75f, 0);</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                        pos = </span><span class="s2-90">new</span><span class="si"> Vector3( (x - (boardWidth/2.0f) + 0.5f)*0.865f, y -(boardHeight/2.0f) + 0.25f, 0);</span></div>
<div class="l li"><span class="si">                    } </span></div>
<div class="l li"><span class="si">                    board[x,y] = </span><span class="s2-90">new</span><span class="si"> Board(</span><span class="s2-90">this</span><span class="si">, </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[2]{x,y}, pos*size ) ;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            subPanelV = </span><span class="s2-90">new</span><span class="si"> SubBoardPanel[boardWidth+1,boardHeight+1]; </span><span class="s2-89">// create subPanels-V</span></div>
<div class="l li"><span class="si">            subPanelH = </span><span class="s2-90">new</span><span class="si"> SubBoardPanel[boardWidth+1,boardHeight+1,2]; </span><span class="s2-89">// create subPanels-H</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth+1; x++) { </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight+1; y++) { </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">                    subPanelV[x,y] = </span><span class="s2-90">new</span><span class="si"> SubBoardPanel();</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> z = 0; z &lt; 2; z++) { </span><span class="s2-89">// for the board height size</span></div>
<div class="l li"><span class="si">                        subPanelH[x,y,z] = </span><span class="s2-90">new</span><span class="si"> SubBoardPanel();</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.initNeighbourReferences();</span></div>
<div class="l li"><span class="si">            _board.syncSubPanelReference();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the gravity check as a function call - to keep the updater() neat</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> gravityCheck(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth ; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                dropPieces(x,y);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// primarily for the suggestion functions... but you can do other stuff when the board change as you like...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> notifyBoardHasChanged(){</span></div>
<div class="l li"><span class="si">        checkedPossibleMove = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// board has changed, will check possible moves again</span></div>
<div class="l li"><span class="si">        StopCoroutine(</span><span class="s2-85">&quot;suggestPiece&quot;</span><span class="si">); </span><span class="s2-89">// clears the suggestion animation if any</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// increase the combo counter &amp; display to GUI(dont worry, combo is reset elsewhere)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> increaseCombo() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// increase combo count!</span></div>
<div class="l li"><span class="si">        currentCombo += 1;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        JMFRelay.onCombo();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// relay to the combo script</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(currentCombo &gt; 1 &amp;&amp; comboScript != </span><span class="s2-90">null</span><span class="si">){ </span><span class="s2-89">// only show if 2 or more combo</span></div>
<div class="l li"><span class="si">            comboScript.StopCoroutine(</span><span class="s2-85">&quot;displayCombo&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            comboScript.StartCoroutine(</span><span class="s2-85">&quot;displayCombo&quot;</span><span class="si">,currentCombo);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(maxCombo &lt; currentCombo){</span></div>
<div class="l li"><span class="si">            maxCombo = currentCombo; </span><span class="s2-89">// just to keep track of the max combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD FUNCTION for increaseScore</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> increaseScore(</span><span class="s2-90">int</span><span class="si"> num, </span><span class="s2-90">int</span><span class="si">[] arrayRef) {</span></div>
<div class="l li"><span class="si">        increaseScore(num,arrayRef[0],arrayRef[1]);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// increase the score counter (for external scripts to update)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> increaseScore(</span><span class="s2-90">int</span><span class="si"> num, </span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        num = JMFRelay.onScoreIssue(num,x,y); </span><span class="s2-89">// relay call for modified score</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(currentCombo &gt; 0){</span></div>
<div class="l li"><span class="si">            num = (</span><span class="s2-90">int</span><span class="si">) (num * (1.5+(currentCombo/10.0)) ); </span><span class="s2-89">// increase with multiplier from combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(JMFUtils.vm.displayScoreHUD &amp;&amp; board[x,y].scoreHUD != </span><span class="s2-90">null</span><span class="si">){ </span><span class="s2-89">// display the HUD?</span></div>
<div class="l li"><span class="si">            board[x,y].scoreHUD.display(num);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        score += num; </span><span class="s2-89">// add to the game score</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTime(</span><span class="s2-90">int</span><span class="si">[] arrayRef, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTime(iBoard(arrayRef),delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTime(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y,</span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTime(board[x,y],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTime(Board _board,</span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeRoutine(_board,delay,mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTime(GamePiece gp,</span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeRoutine(gp.master,delay,mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// destroys the box after a given time so that it looks cooler</span></div>
<div class="l li"><span class="si">    IEnumerator destroyInTimeRoutine(Board _board,</span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( _board.isFilled &amp;&amp; _board.piece.markedForDestroy ){ </span><span class="s2-89">// ignore those marked for destroy</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not continue... it is already marked</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(delay); </span><span class="s2-89">// wait for it...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(_board.isFilled &amp;&amp; _board.piece.pd.isDestructible){</span></div>
<div class="l li"><span class="si">            increaseScore( mScore, _board.arrayRef[0] , _board.arrayRef[1] ); </span><span class="s2-89">// add to the score</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        _board.destroyBox();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!_board.panel.isDestructible()){ </span><span class="s2-89">// if the panel is NOT a solid type with no piece to destroy...</span></div>
<div class="l li"><span class="si">            _board.panelHit(); </span><span class="s2-89">// got hit by power attack~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTimeMarked(</span><span class="s2-90">int</span><span class="si">[] arrayRef, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(arrayRef[0],arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTimeMarked(GamePiece gp, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(gp.master.arrayRef[0],gp.master.arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTimeMarked(Board _board, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(_board.arrayRef[0],_board.arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTimeMarked(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeMarkedRoutine(x, y, delay, mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// destroys the box after a given time so that it looks cooler - object being marked for delayed destruction</span></div>
<div class="l li"><span class="si">    IEnumerator destroyInTimeMarkedRoutine(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            board[x,y].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// save the piece reference</span></div>
<div class="l li"><span class="si">        GamePiece refPiece = board[x,y].piece;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(refPiece.markedForDestroy){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not continue as it is already marked...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// mark the piece as to be destroyed later</span></div>
<div class="l li"><span class="si">        refPiece.markedForDestroy = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        refPiece.thisPiece.GetComponent&lt;PieceTracker&gt;().enabled = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// no longer movable</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(delay); </span><span class="s2-89">// wait for it...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(refPiece.master.isFilled){</span></div>
<div class="l li"><span class="si">            increaseScore( mScore, refPiece.master.arrayRef[0], refPiece.master.arrayRef[1] ); </span><span class="s2-89">// add to the score</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        refPiece.master.destroyMarked();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!refPiece.master.panel.isDestructible()){ </span><span class="s2-89">// if the panel is a solid type with no piece to destroy...</span></div>
<div class="l li"><span class="si">            refPiece.master.panelHit(); </span><span class="s2-89">// got hit by power attack~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function call for the ieNumerator version</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> lockJustCreated (</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">float</span><span class="si"> time){</span></div>
<div class="l li"><span class="si">        StartCoroutine( lockJustCreatedRoutine(x,y,time) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to lock a piece from being destroyed with a cooldown timer</span></div>
<div class="l li"><span class="si">    IEnumerator lockJustCreatedRoutine (</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">float</span><span class="si"> time){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// lock the piece so that it isnt destroyed so fast</span></div>
<div class="l li"><span class="si">        GamePiece refPiece = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            refPiece = board[x,y].piece;</span></div>
<div class="l li"><span class="si">            refPiece.justCreated = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            refPiece.master.isActive = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(time); </span><span class="s2-89">// wait for it...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// un-lock the piece again</span></div>
<div class="l li"><span class="si">            refPiece.justCreated = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            refPiece.master.isActive = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED Method for mergePieces (non ieNumerator</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> mergePieces(</span><span class="s2-90">int</span><span class="si">[] arrayRef1, </span><span class="s2-90">int</span><span class="si">[] arrayRef2, </span><span class="s2-90">bool</span><span class="si"> both) {</span></div>
<div class="l li"><span class="si">        StartCoroutine( mergePiecesRoutine(arrayRef1[0],arrayRef1[1],arrayRef2[0],arrayRef2[1],both) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED Method for mergePieces (non ieNumerator</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> mergePieces(</span><span class="s2-90">int</span><span class="si"> posX1, </span><span class="s2-90">int</span><span class="si"> posY1, </span><span class="s2-90">int</span><span class="si"> posX2, </span><span class="s2-90">int</span><span class="si"> posY2,</span><span class="s2-90">bool</span><span class="si"> both) {</span></div>
<div class="l li"><span class="si">        StartCoroutine( mergePiecesRoutine(posX1,posY1,posX2,posY2,both) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// tween the merging piece ( mostly for gui effect only to show something is happening...)</span></div>
<div class="l li"><span class="si">    IEnumerator mergePiecesRoutine (</span><span class="s2-90">int</span><span class="si"> posX1, </span><span class="s2-90">int</span><span class="si"> posY1, </span><span class="s2-90">int</span><span class="si"> posX2, </span><span class="s2-90">int</span><span class="si"> posY2,</span><span class="s2-90">bool</span><span class="si"> both) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// freeze the boxes involved</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isFalling = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isFalling = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// switch the two pieces around in memory (not visual in GUI yet)</span></div>
<div class="l li"><span class="si">        GamePiece holder = board[posX1,posY1].piece;</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].piece = board[posX2,posY2].piece;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].piece = holder;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// since the pieceTracker info</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].piece.thisPiece.GetComponent&lt;PieceTracker&gt;().arrayRef = board[posX1,posY1].arrayRef;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].piece.thisPiece.GetComponent&lt;PieceTracker&gt;().arrayRef = board[posX2,posY2].arrayRef;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// tween it ( now only visual in GUI)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(both){</span></div>
<div class="l li"><span class="si">            board[posX1,posY1].applyTweening(gemSwitchSpeed); </span><span class="s2-89">// two sided if u want, else disabled</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].applyTweening(gemSwitchSpeed); </span><span class="s2-89">// one sided tweening</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(gemSwitchSpeed); </span><span class="s2-89">// the timer</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// un-freeze the boxes involved</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED function for splashFromHere</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> splashFromHere(</span><span class="s2-90">int</span><span class="si">[] arrayRef){</span></div>
<div class="l li"><span class="si">        splashFromHere(arrayRef[0],arrayRef[1]);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// helper function - called by matchType class to splash damage to its neighbouring boards</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> splashFromHere(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(SubBoardPanel sbp </span><span class="s2-90">in</span><span class="si"> board[x,y].allSubPanels){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(sbp.gotHit()) { </span><span class="s2-89">// splash all connected sub panels</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(Board master </span><span class="s2-90">in</span><span class="si"> sbp.masters){</span></div>
<div class="l li"><span class="si">                    master.isActive = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board[x,y].allNeighbourBoards){</span></div>
<div class="l li"><span class="si">            _board.SplashDamage(); </span><span class="s2-89">// splash all neighbour boards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// resets the board due to no more moves</span></div>
<div class="l li"><span class="si">    IEnumerator resetBoard() {</span></div>
<div class="l li"><span class="si">        animScript.doAnim(animType.NOMOREMOVES,0,0);</span></div>
<div class="l li"><span class="si">        JMFRelay.onNoMoreMoves();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(noMoreMoveResetTime);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// for the board height size</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">//reset the pieces with a random type..</span></div>
<div class="l li"><span class="si">                board[x,y].reset(pieceTypes[0], ranType());</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        JMFRelay.onComboEnd();</span></div>
<div class="l li"><span class="si">        JMFRelay.onBoardReset();</span></div>
<div class="l li"><span class="si">        isCheckingPossibleMoves = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// used to determine the number of unfilled board boxes beyond the current panel</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// limited by panels that pieces cannot pass through</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> countUnfilled(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">bool</span><span class="si"> ignoreTotalCount){ </span><span class="s2-89">// extra function currently un-used by GameManager...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        BoardDirection bd;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Top;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.DOWN : </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Bottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.RIGHT : </span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Right;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Left;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board[x,y].getAllBoardInDirection(bd)){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(_board.replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">            } </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!_board.panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// used to determine the number of unfilled board boxes beyond the current panel</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// limited by panels that block gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> countBlockedUnfilled(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">bool</span><span class="si"> ignoreTotalCount){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        BoardDirection bd;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Top;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.DOWN : </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Bottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.RIGHT : </span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Right;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Left;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!board[x,y].panel.isStealable() || !board[x,y].getSubPanelFrom(bd).allowsGravity() ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// cannot proceed.. distance = 0</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board[x,y].getAllBoardInDirection(bd)){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(_board.replacementNeeded()){</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!_board.panel.allowsGravity() || !_board.panel.isStealable() ||</span></div>
<div class="l li"><span class="si">               !_board.getSubPanelFrom(bd).allowsGravity() ){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!_board.panel.pnd.hasStartingPiece ) count--; </span><span class="s2-89">// cater for empty panels</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// used to determine the number of unfilled board boxes in a line to fall through.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> emptyBoxesBeyond(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){ </span><span class="s2-89">// extra function currently un-used by GameManager...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        BoardDirection bd;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Top;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.DOWN : </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Bottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.RIGHT : </span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Right;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            bd = BoardDirection.Left;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board[x,y].getAllBoardInDirection(bd)){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(_board.replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> playerMadeAMove(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(movingResetsCombo) JMFRelay.onComboEnd(); </span><span class="s2-89">// end the combo if no special override...</span></div>
<div class="l li"><span class="si">        moves++; </span><span class="s2-89">// merging, so number of moves increase</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s2-89">// notify the board has changed...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        JMFRelay.onPlayerMove();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Misc Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region loop routine &amp; related</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// looper for the boardCheck based on the set interval</span></div>
<div class="l li"><span class="si">    IEnumerator boardCheckLooper () {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si"> (gameState != GameState.GameOver){  </span><span class="s2-89">// loop again (infinite) until game over</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(matchCheckSpeed); </span><span class="s2-89">// wait for the given intervals</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// then check the board</span></div>
<div class="l li"><span class="si">            boardChecker();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// status update on given intervals</span></div>
<div class="l li"><span class="si">    IEnumerator updater () {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si"> (gameState != GameState.GameOver){  </span><span class="s2-89">// loop again (infinite) until game over</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-89">// if the GameManager size / position was changed...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si"> (currentPosition != transform.position || currentSize != size) {</span></div>
<div class="l li"><span class="si">                currentPosition = transform.position; </span><span class="s2-89">// save the new position value..</span></div>
<div class="l li"><span class="si">                currentSize = size; </span><span class="s2-89">// save the new size value..</span></div>
<div class="l li"><span class="si">                refreshPosition(); </span><span class="s2-89">// update the board's position</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            gravityCheck(); </span><span class="s2-89">// for dropping pieces into empty board box</span></div>
<div class="l li"><span class="si">            detectPossibleMoves(); </span><span class="s2-89">// to make sure the game doesn't get stuck with no more possible moves</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(gameUpdateSpeed); </span><span class="s2-89">// wait for the given intervals</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Matcher functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Matcher - phase 1 : board block checker for potential matches</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> boardChecker () {</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> i =  pieceTypes.Length - 1 ; i &gt;= 0 ; i--){ </span><span class="s2-89">// loop for each special piece + normal match 3</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) { </span><span class="s2-89">// iterate through each board block</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> (board[x,y].isFilled &amp;&amp; !board[x,y].isFalling &amp;&amp; board[x,y].isActive) { </span><span class="s2-89">// means the board block has a ready cube</span></div>
<div class="l li"><span class="si">                        pieceTypes[i].checkPattern(x,y,i); </span><span class="s2-89">// check pattern based on piece definition</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ( i == 0){ </span><span class="s2-89">// finished cycling through each matching criteria</span></div>
<div class="l li"><span class="si">                        board[x,y].isActive = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// turns this block to passive</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Matcher - phase 2 : perform clean up matches based on external script's decision</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> validateMatch(</span><span class="s2-90">int</span><span class="si"> checkNum, </span><span class="s2-90">int</span><span class="si"> xPos, </span><span class="s2-90">int</span><span class="si"> yPos, List&lt;Board&gt; linkedCubesX,</span></div>
<div class="l li"><span class="si">                List&lt;Board&gt; linkedCubesY, List&lt;Board&gt; linkedCubesTRBL, List&lt;Board&gt; linkedCubesTLBR){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pieceTypes[checkNum].matchConditions(xPos,yPos,linkedCubesX,linkedCubesY,linkedCubesTRBL,linkedCubesTLBR)){</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> scorePerCube = pieceTypes[checkNum].scorePerCube;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            audioScript.matchSoundFx.play(); </span><span class="s2-89">// play the match sound fx</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// manage the combo</span></div>
<div class="l li"><span class="si">            increaseCombo();</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            increaseScore(scorePerCube,xPos,yPos); </span><span class="s2-89">// give out score for the main reference piece</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">            splashFromHere(xPos,yPos); </span><span class="s2-89">// splash from the origin board</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si"> (Board mBoardX </span><span class="s2-90">in</span><span class="si"> linkedCubesX) {</span></div>
<div class="l li"><span class="si">                mBoardX.destroyBox(); </span><span class="s2-89">// destroy the linked boxes too</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">                splashFromHere(mBoardX.arrayRef);</span></div>
<div class="l li"><span class="si">                increaseScore(scorePerCube, mBoardX.arrayRef); </span><span class="s2-89">// give out score</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si"> (Board mBoardY </span><span class="s2-90">in</span><span class="si"> linkedCubesY) {</span></div>
<div class="l li"><span class="si">                mBoardY.destroyBox(); </span><span class="s2-89">// destroy the linked boxes too</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">                splashFromHere(mBoardY.arrayRef);</span></div>
<div class="l li"><span class="si">                increaseScore(scorePerCube, mBoardY.arrayRef); </span><span class="s2-89">// give out score</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si"> (Board mBoardTRBL </span><span class="s2-90">in</span><span class="si"> linkedCubesTRBL) {</span></div>
<div class="l li"><span class="si">                mBoardTRBL.destroyBox(); </span><span class="s2-89">// destroy the linked boxes too</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">                splashFromHere(mBoardTRBL.arrayRef);</span></div>
<div class="l li"><span class="si">                increaseScore(scorePerCube, mBoardTRBL.arrayRef); </span><span class="s2-89">// give out score</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si"> (Board mBoardTLBR </span><span class="s2-90">in</span><span class="si"> linkedCubesTLBR) {</span></div>
<div class="l li"><span class="si">                mBoardTLBR.destroyBox(); </span><span class="s2-89">// destroy the linked boxes too</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// to cause a splash damage for panels that are damaged only by splash</span></div>
<div class="l li"><span class="si">                splashFromHere(mBoardTLBR.arrayRef);</span></div>
<div class="l li"><span class="si">                increaseScore(scorePerCube, mBoardTLBR.arrayRef); </span><span class="s2-89">// give out score</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// free the memory just in case? or perhaps not neccesary for auto GC...</span></div>
<div class="l li"><span class="si">            linkedCubesX.Clear();</span></div>
<div class="l li"><span class="si">            linkedCubesY.Clear();</span></div>
<div class="l li"><span class="si">            linkedCubesTRBL.Clear();</span></div>
<div class="l li"><span class="si">            linkedCubesTLBR.Clear();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// possible moves detector + suggestor  ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// moves detector phase 1</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> detectPossibleMoves() {</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//checks through each board boxes</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!checkedPossibleMove &amp;&amp; !isCheckingPossibleMoves){</span></div>
<div class="l li"><span class="si">            isCheckingPossibleMoves = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth ; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">( board[x,y].isBeingDelayed || board[x,y].isFalling || board[x,y].isActive ) {</span></div>
<div class="l li"><span class="si">                        isCheckingPossibleMoves = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// do not continue, wait for board to clear and stabilize</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            checkedPossibleMove = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// once we checked, no need to check again until needed</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            JMFRelay.onBoardStabilize();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            suggestedBoards.Clear(); </span><span class="s2-89">// remove any outstanding suggested boards...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">( _board.isFilled &amp;&amp; _board.panel.isSwitchable() &amp;&amp;</span></div>
<div class="l li"><span class="si">                   checkNeighbourMatch(_board,_board.piece.slotNum) ) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// recognize possible moves and save the piece location</span></div>
<div class="l li"><span class="si">                    suggestedBoards.Add(_board);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si"> (suggestedBoards.Count == 0) { </span><span class="s2-89">// no more possible moves</span></div>
<div class="l li"><span class="si">                StartCoroutine( resetBoard() ); </span><span class="s2-89">// reset board in co-routine mode for delayed event</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// suggest the found possible move to player</span></div>
<div class="l li"><span class="si">                suggestedPieces.Clear(); </span><span class="s2-89">// clear the current list</span></div>
<div class="l lg"> </div>
<div class="l la d3"><span class="sa">                // picks a random suggestion</span></div>
<div class="l la d3"><span class="sa">                pickedSuggestion = suggestedBoards[Random.Range(0,suggestedBoards.Count)];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s2-89">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// to show all the suggested piece..</span></div>
<div class="l li"><span class="s2-89">//              foreach(Board _board in suggestedBoards){</span></div>
<div class="l li"><span class="s2-89">//                  suggestedPieces.Add(_board.piece.thisPiece); // add the new chain to the list</span></div>
<div class="l li"><span class="s2-89">//              }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s2-89">// ====================================</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// to show a random suggested piece...</span></div>
<div class="l lc d4"><span class="sc">                suggestedPieces.Add(</span><span class="sc2">pickedSuggestion</span><span class="sc">.piece.thisPiece);</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// ====================================</span></div>
<div class="l lg"> </div>
<div class="l la d5"><span class="sa">                // ====================================</span></div>
<div class="l la d5"><span class="sa">                // to show a paired suggested piece...</span></div>
<div class="l la d5"><span class="sa">                if(showPairedSuggestion){</span></div>
<div class="l la d5"><span class="sa">                    getPairedSuggestion(ref pickedSuggestion);</span></div>
<div class="l la d5"><span class="sa">                }</span></div>
<div class="l la d5"><span class="sa">                // ====================================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                suggestedBoards.Clear(); </span><span class="s2-89">// remove stored memory</span></div>
<div class="l li"><span class="si">                pieceOriginalSize = suggestedPieces[0].transform.localScale; </span><span class="s2-89">// remember the current size</span></div>
<div class="l li"><span class="si">                StartCoroutine(</span><span class="s2-85">&quot;suggestPiece&quot;</span><span class="si">); </span><span class="s2-89">// its a string coroutine so that we can use StopCoroutine!</span></div>
<div class="l li"><span class="si">                isCheckingPossibleMoves = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l lc d6"><span class="sc">    // </span><span class="sc2">master function get the paired suggested pieces</span></div>
<div class="l lc d6"><span class="sc">    </span><span class="sc2">void getPairedSuggestion</span><span class="sc">(</span><span class="sa">ref</span><span class="sc"> Board temp){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// this piece is a power piece that can be merged?</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si"> ( !(temp.piece.pd </span><span class="s2-90">is</span><span class="si"> NormalPiece) ) {</span></div>
<div class="l la d7"><span class="sa">            foreach(Board _board in temp.allNeighbourBoards){</span></div>
<div class="l la d7"><span class="sa">                if(specialToPosition(_board, temp) ) {</span></div>
<div class="l la d7"><span class="sa">                    suggestedPieces.Add(_board.piece.thisPiece); // add pair to list</span></div>
<div class="l la d7"><span class="sa">                    return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">                }</span></div>
<div class="l la d7"><span class="sa">            }</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l lg d7"> </div>
<div class="l la d7"><span class="sa">        // get normal match suggested list</span></div>
<div class="l la d7"><span class="sa">        if(findPairedSuggestions(ref temp.top, Check.UP,temp.piece.slotNum)){</span></div>
<div class="l la d7"><span class="sa">            return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if(findPairedSuggestions(ref temp.bottom, Check.DOWN,temp.piece.slotNum)){</span></div>
<div class="l la d7"><span class="sa">            return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if(findPairedSuggestions(ref temp.left, Check.LEFT,temp.piece.slotNum)){</span></div>
<div class="l la d7"><span class="sa">            return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if(findPairedSuggestions(ref temp.right, Check.RIGHT,temp.piece.slotNum)){</span></div>
<div class="l la d7"><span class="sa">            return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if(findPairedSuggestions(ref temp.topLeft, Check.TopLeft,temp.piece.slotNum)){</span></div>
<div class="l la d7"><span class="sa">            return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if(findPairedSuggestions(ref temp.topRight, Check.TopRight,temp.piece.slotNum)){</span></div>
<div class="l la d7"><span class="sa">            return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if(findPairedSuggestions(ref temp.bottomLeft, Check.BottomLeft,temp.piece.slotNum)){</span></div>
<div class="l la d7"><span class="sa">            return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if(findPairedSuggestions(ref temp.bottomRight, Check.BottomRight,temp.piece.slotNum)){</span></div>
<div class="l la d7"><span class="sa">            return; // quit; found pair already</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">    }</span></div>
<div class="l lg d7"> </div>
<div class="l la d7"><span class="sa">    // function to find the paired suggestion to the current suggestedPiece</span></div>
<div class="l la d7"><span class="sa">    bool findPairedSuggestions(ref Board temp, Check dir, int mType){</span></div>
<div class="l la d7"><span class="sa">        if(temp == null || !temp.isFilled || !temp.panel.isSwitchable() ||</span></div>
<div class="l la d7"><span class="sa">           temp.pd.isSpecial ){ // the piece cannot move here, quit too~!</span></div>
<div class="l la d7"><span class="sa">            return false; // no valid board here... quit~</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l lg d7"> </div>
<div class="l la d7"><span class="sa">        int xPos = temp.arrayRef[0];</span></div>
<div class="l la d7"><span class="sa">        int yPos = temp.arrayRef[1];</span></div>
<div class="l lg d7"> </div>
<div class="l la d7"><span class="sa">        // check switchable state of sub-panels</span></div>
<div class="l la d7"><span class="sa">        if( (dir == Check.UP &amp;&amp; !board[xPos,yPos].subPanelBottom.isSwitchable()) ||</span></div>
<div class="l la d7"><span class="sa">           (dir == Check.DOWN &amp;&amp; !board[xPos,yPos].subPanelTop.isSwitchable()) ||</span></div>
<div class="l la d7"><span class="sa">           (boardType == BoardType.Square &amp;&amp; (</span></div>
<div class="l la d7"><span class="sa">            (dir == Check.LEFT &amp;&amp; !board[xPos,yPos].subPanelRight.isSwitchable()) ||</span></div>
<div class="l la d7"><span class="sa">            (dir == Check.RIGHT &amp;&amp; !board[xPos,yPos].subPanelLeft.isSwitchable()))) ||</span></div>
<div class="l la d7"><span class="sa">           (boardType == BoardType.Hexagon &amp;&amp; (</span></div>
<div class="l la d7"><span class="sa">            (dir == Check.TopLeft &amp;&amp; !board[xPos,yPos].subPanelBottomRight.isSwitchable()) ||</span></div>
<div class="l la d7"><span class="sa">            (dir == Check.TopRight &amp;&amp; !board[xPos,yPos].subPanelBottomLeft.isSwitchable()) ||</span></div>
<div class="l la d7"><span class="sa">            (dir == Check.BottomLeft &amp;&amp; !board[xPos,yPos].subPanelTopRight.isSwitchable()) ||</span></div>
<div class="l la d7"><span class="sa">            (dir == Check.BottomRight &amp;&amp; !board[xPos,yPos].subPanelTopLeft.isSwitchable()))) ){</span></div>
<div class="l la d7"><span class="sa">            return false; // cannot switch... quit~</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l lg d7"> </div>
<div class="l la d7"><span class="sa">        // count of possible matching blocks</span></div>
<div class="l la d7"><span class="sa">        int count = 0;</span></div>
<div class="l la d7"><span class="sa">        List&lt;GameObject&gt; go = new List&lt;GameObject&gt;();</span></div>
<div class="l lg d7"> </div>
<div class="l la d7"><span class="sa">        // up &amp; down check...</span></div>
<div class="l la d7"><span class="sa">        if(dir != Check.UP) {</span></div>
<div class="l la d7"><span class="sa">            for (int y = (yPos-1) ; y &gt;= 0; y--) { //check the bottom side of the cube</span></div>
<div class="l la d7"><span class="sa">                if ( board[xPos,y].canBeMatched(board[xPos,y].subPanelTop) &amp;&amp;</span></div>
<div class="l la d7"><span class="sa">                    board[xPos,y].piece.slotNum == mType) {</span></div>
<div class="l la d7"><span class="sa">                    count++; // increase linked counter</span></div>
<div class="l la d7"><span class="sa">                    go.Add(board[xPos,y].piece.thisPiece);</span></div>
<div class="l la d7"><span class="sa">                } else {</span></div>
<div class="l la d7"><span class="sa">                    break; // exit loop as no more match this side...</span></div>
<div class="l la d7"><span class="sa">                }</span></div>
<div class="l la d7"><span class="sa">            }</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if(dir != Check.DOWN) {</span></div>
<div class="l la d7"><span class="sa">            for (int y = (yPos+1) ; y &lt; boardHeight ; y++) { //check the top side of the cube </span></div>
<div class="l la d7"><span class="sa">                if ( board[xPos,y].canBeMatched(board[xPos,y].subPanelBottom) &amp;&amp;</span></div>
<div class="l la d7"><span class="sa">                    board[xPos,y].piece.slotNum == mType) {</span></div>
<div class="l la d7"><span class="sa">                    go.Add(board[xPos,y].piece.thisPiece);</span></div>
<div class="l la d7"><span class="sa">                    count++; // increase linked counter</span></div>
<div class="l la d7"><span class="sa">                } else {</span></div>
<div class="l la d7"><span class="sa">                    break; // exit loop as no more match this side...</span></div>
<div class="l la d7"><span class="sa">                }</span></div>
<div class="l la d7"><span class="sa">            }</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l la d7"><span class="sa">        if( count &gt; 1) { // there is a matching row...</span></div>
<div class="l la d7"><span class="sa">            suggestedPieces.AddRange(go.ToArray());</span></div>
<div class="l la d7"><span class="sa">            return true; // no need to go further as there is already a possible match</span></div>
<div class="l la d7"><span class="sa">        } else {</span></div>
<div class="l la d7"><span class="sa">            go.Clear();</span></div>
<div class="l la d7"><span class="sa">            count = 0; // reset count for column matching...</span></div>
<div class="l la d7"><span class="sa">        }</span></div>
<div class="l lg"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l lc d8"><span class="sc">        case BoardType.Square : </span><span class="sa">default :</span><span class="sc"> // square </span><span class="sc2">type position check</span></div>
<div class="l lc d8"><span class="sc">            </span><span class="sc2">if(dir != Check.RIGHT) {</span></div>
<div class="l lc d8"><span class="sc">                </span><span class="sc2">for</span><span class="sc"> (</span><span class="sc2">int</span><span class="sc"> </span><span class="sa">x =</span><span class="sc"> (</span><span class="sc2">xPos-1</span><span class="sc">) </span><span class="sc2">; x &gt;= 0; x--</span><span class="sc">) </span><span class="sc2">{ /</span><span class="sa">/check the left side of the cube</span><span class="sc"> </span></div>
<div class="l lc d8"><span class="sc">                    </span><span class="sc2">if</span><span class="sc"> ( </span><span class="sc2">board[x</span><span class="sc">,</span><span class="sc2">yPos]</span><span class="sc">.</span><span class="sc2">canBeMatched</span><span class="sa">(board[x</span><span class="sc">,</span><span class="sc2">yPos]</span><span class="sa">.subPanelRight</span><span class="sc">) </span><span class="sc2">&amp;</span><span class="sa">&amp;</span></div>
<div class="l lc d8"><span class="sc">                        </span><span class="sc2">board[x,yPos].piece</span><span class="sa">.slotNum == mType) {</span></div>
<div class="l lc d8"><span class="sc">                        </span><span class="sa">go.Add(board[x,yPos].piece.thisPiece);</span></div>
<div class="l lc d8"><span class="sc">                        </span><span class="sa">count++; // increase linked counter</span></div>
<div class="l lc d8"><span class="sc">                    </span><span class="sa">} else {</span></div>
<div class="l lc d8"><span class="sc">                        </span><span class="sa">break; // exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sc2">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lg d9"><span class="sig">            </span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">if(dir != Check.LEFT){</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">for (int x = (xPos+1) ; x &lt; boardWidth ; x++) { //check the right side of the cube</span><span class="sc"> </span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">if ( board[x,yPos].canBeMatched(board[x,yPos].subPanelLeft) &amp;&amp;</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">board[x,yPos].piece.slotNum == mType) {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">go.Add(board[x,yPos].piece.thisPiece);</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">count++; // increase linked counter</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">} else {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">break; // exit loop as no more match this side...</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">if( count &gt; 1) { // there is a matching row...</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">suggestedPieces.AddRange(go.ToArray());</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">return true; // no need to go further as there is already a possible match</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">} else {</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">go.Clear();</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">return false; // reset count for column matching...</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">        case BoardType.Hexagon : // hex </span><span class="sc2">type position</span><span class="sc"> </span><span class="sa">check</span></div>
<div class="l lc d9"><span class="sc">            // </span><span class="sc2">TopLeft &lt;&gt; BottomRight check... =====</span><span class="sa">====================================</span></div>
<div class="l lc d9"><span class="sc">            if(</span><span class="sc2">dir !=</span><span class="sc"> </span><span class="sa">Check</span><span class="sc">.</span><span class="sc2">TopLeft</span><span class="sc">) </span><span class="sc2">{ // check the BottomRight side of the cube</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sc2">foreach</span><span class="sc">(</span><span class="sc2">Board _board in</span><span class="sc"> </span><span class="sa">board[xPos</span><span class="sc">,</span><span class="sc2">yPos].getAllBoardInDirection</span><span class="sc">(</span><span class="sc2">BoardDirection</span><span class="sc">.</span><span class="sc2">BottomRight)</span><span class="sc">) </span><span class="sc2">{</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sc2">if</span><span class="sc"> ( </span><span class="sc2">_board</span><span class="sc">.</span><span class="sc2">canBeMatched</span><span class="sc">(</span><span class="sc2">_board</span><span class="sc">.</span><span class="sc2">subPanelTopLeft</span><span class="sc">) </span><span class="sa">&amp;&amp; _board.piece.slotNum == mType</span><span class="sc">) {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">go.Add(_board.piece.thisPiece);</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">count++; // increase linked counter</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">} else {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">break; // exit loop as no more match this side...</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">if(dir != Check.BottomRight) { // check the TopLeft side of the cube</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">foreach(Board _board in board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopLeft)) {</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">if ( _board.canBeMatched(_board.subPanelBottomRight) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">go.Add(_board.piece.thisPiece);</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">count++; // increase linked counter</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">} else {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">break; // exit loop as no more match this side...</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">if( count &gt; 1) { // there is a matching row...</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">suggestedPieces.AddRange(go.ToArray());</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">return true; // no need to go further as there is already a possible match</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">} else {</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">go.Clear();</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">count = 0; // reset count for column matching...</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">// TopRight &lt;&gt; BottomLeft check... =========================================</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">if(dir != Check.TopRight) { // check the BottomLeft side of the cube</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">foreach(Board _board in board[xPos,yPos].getAllBoardInDirection(BoardDirection.BottomLeft)) {</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">if ( _board.canBeMatched(_board.subPanelTopRight) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">go.Add(_board.piece.thisPiece);</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">count++; // increase linked counter</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">} else {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">break; // exit loop as no more match this side...</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">if(dir != Check.BottomLeft) { // check the TopRight side of the cube</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">foreach(Board _board in board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopRight)) {</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">if ( _board.canBeMatched(_board.subPanelBottomLeft) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">go.Add(_board.piece.thisPiece);</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">count++; // increase linked counter</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">} else {</span></div>
<div class="l lc d9"><span class="sc">                        </span><span class="sa">break; // exit loop as no more match this side...</span></div>
<div class="l lc d9"><span class="sc">                    </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">if( count &gt; 1) { // there is a matching row...</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">suggestedPieces.AddRange(go.ToArray());</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">return true; // no need to go further as there is already a possible match</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">} else {</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">go.Clear();</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">return false; // if it reaches here, means no match in this position...</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">        </span><span class="sa">}</span></div>
<div class="l lc d9"><span class="sc">    </span><span class="sa">}</span></div>
<div class="l lg d9"> </div>
<div class="l lg d9"><span class="sig">    </span></div>
<div class="l lc d9"><span class="sc">    </span><span class="sa">// moves detector sub-routine phase 2-a - check its surroundings</span></div>
<div class="l lc d9"><span class="sc">    </span><span class="sa">bool checkNeighbourMatch(Board temp, int type) {</span></div>
<div class="l lg d9"> </div>
<div class="l lc d9"><span class="sc">        </span><span class="sa">// this piece is a power piece that can be merged?</span></div>
<div class="l lc d9"><span class="sc">        </span><span class="sa">if ( !(temp.piece.pd is NormalPiece) ) {</span></div>
<div class="l lc d9"><span class="sc">            </span><span class="sa">foreach(Board _board in temp.allNeighbourBoards){</span></div>
<div class="l lc d9"><span class="sc">                </span><span class="sa">if(specialToPosition(_board, temp) ) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// can special merge</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l ld d10"> </div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(temp.piece.pd.isSpecial){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// piece cannot match normally.. return</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-89">// square check...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check if the piece is moved in all directions</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(checkThisPosition(temp.top, type, Check.UP) || checkThisPosition(temp.bottom, type, Check.DOWN) ||</span></div>
<div class="l li"><span class="si">               checkThisPosition(temp.left, type, Check.LEFT) || checkThisPosition(temp.right, type, Check.RIGHT) ){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// can special merge </span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon : </span><span class="s2-89">// hex check...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check if the piece is moved in all directions</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(checkThisPosition(temp.top, type, Check.UP) || checkThisPosition(temp.bottom, type, Check.DOWN) ||</span></div>
<div class="l li"><span class="si">               checkThisPosition(temp.topLeft, type, Check.TopLeft) || checkThisPosition(temp.topRight, type, Check.TopRight) ||</span></div>
<div class="l li"><span class="si">               checkThisPosition(temp.bottomLeft, type, Check.BottomLeft) || checkThisPosition(temp.bottomRight, type, Check.BottomRight) ) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// it can make a match if this piece moved...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// if it reaches here, means no match if this piece moved...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// moves detector sub-routine phase 2-b - can this piece move here to special merge?</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> specialToPosition(Board _board, Board origin ){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(_board == </span><span class="s2-90">null</span><span class="si"> || !_board.isFilled || _board.isFalling ||</span></div>
<div class="l li"><span class="si">           !_board.panel.isSwitchable() ){ </span><span class="s2-89">// no board / the piece cannot move here, quit ~!</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> x1 = origin.arrayRef[0]; </span><span class="s2-90">int</span><span class="si"> y1 = origin.arrayRef[1];</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> x2 = _board.arrayRef[0]; </span><span class="s2-90">int</span><span class="si"> y2 = _board.arrayRef[1];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(origin.pd.powerMatched(x1,y1,x2,y2,</span><span class="s2-90">false</span><span class="si">,origin.pd,_board.pd) ||</span></div>
<div class="l li"><span class="si">           _board.pd.powerMatched(x1,y1,x2,y2,</span><span class="s2-90">false</span><span class="si">,_board.pd,origin.pd) ||</span></div>
<div class="l li"><span class="si">           origin.pd.powerMatched(origin.arrayRef,_board.arrayRef,</span><span class="s2-90">false</span><span class="si">,origin.piece,_board.piece) ||</span></div>
<div class="l li"><span class="si">           _board.pd.powerMatched(origin.arrayRef,_board.arrayRef,</span><span class="s2-90">false</span><span class="si">,_board.piece,origin.piece)){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// is a power piece combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// not a power piece combo</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED Method for checkThisPosition</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> checkThisPosition(Board _board, </span><span class="s2-90">int</span><span class="si"> type, Check dir){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(_board != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; _board.isFilled){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> checkThisPosition(_board.arrayRef[0],_board.arrayRef[1],type,dir);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// moves detector sub-routine phase 2-c - scenario when this piece is moved in this direction</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> checkThisPosition(</span><span class="s2-90">int</span><span class="si"> xPos,</span><span class="s2-90">int</span><span class="si"> yPos ,</span><span class="s2-90">int</span><span class="si"> mType, Check dir){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(xPos &lt; 0 || xPos &gt;= boardWidth || yPos &lt; 0 || yPos &gt;= boardHeight ) {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// assumption is out of bounds ... stop this check</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!board[xPos,yPos].isFilled || !board[xPos,yPos].panel.isSwitchable() ||</span></div>
<div class="l li"><span class="si">           board[xPos,yPos].pd.isSpecial ){ </span><span class="s2-89">// the piece cannot move here, quit too~!</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l la d11"><span class="sa">        }</span></div>
<div class="l lg d11"> </div>
<div class="l la d11"><span class="sa">        // check switchable state of sub-panels</span></div>
<div class="l la d11"><span class="sa">        if( (dir == Check.UP &amp;&amp; !board[xPos,yPos].subPanelBottom.isSwitchable()) ||</span></div>
<div class="l la d11"><span class="sa">           (dir == Check.DOWN &amp;&amp; !board[xPos,yPos].subPanelTop.isSwitchable()) ||</span></div>
<div class="l la d11"><span class="sa">           (boardType == BoardType.Square &amp;&amp; (</span></div>
<div class="l la d11"><span class="sa">            (dir == Check.LEFT &amp;&amp; !board[xPos,yPos].subPanelRight.isSwitchable()) ||</span></div>
<div class="l la d11"><span class="sa">            (dir == Check.RIGHT &amp;&amp; !board[xPos,yPos].subPanelLeft.isSwitchable()))) ||</span></div>
<div class="l la d11"><span class="sa">           (boardType == BoardType.Hexagon &amp;&amp; (</span></div>
<div class="l la d11"><span class="sa">            (dir == Check.TopLeft &amp;&amp; !board[xPos,yPos].subPanelBottomRight.isSwitchable()) ||</span></div>
<div class="l la d11"><span class="sa">            (dir == Check.TopRight &amp;&amp; !board[xPos,yPos].subPanelBottomLeft.isSwitchable()) ||</span></div>
<div class="l la d11"><span class="sa">            (dir == Check.BottomLeft &amp;&amp; !board[xPos,yPos].subPanelTopRight.isSwitchable()) ||</span></div>
<div class="l la d11"><span class="sa">            (dir == Check.BottomRight &amp;&amp; !board[xPos,yPos].subPanelTopLeft.isSwitchable()))) ){</span></div>
<div class="l la d11"><span class="sa">            return false; // cannot switch... quit~</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// count of possible matching blocks</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// up &amp; down check...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dir != Check.UP) {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> y = (yPos-1) ; y &gt;= 0; y--) { </span><span class="s2-89">//check the bottom side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si"> ( board[xPos,y].canBeMatched(board[xPos,y].subPanelTop) &amp;&amp;</span></div>
<div class="l li"><span class="si">                    board[xPos,y].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    count++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dir != Check.DOWN) {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> y = (yPos+1) ; y &lt; boardHeight ; y++) { </span><span class="s2-89">//check the top side of the cube </span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si"> ( board[xPos,y].canBeMatched(board[xPos,y].subPanelBottom) &amp;&amp;</span></div>
<div class="l li"><span class="si">                    board[xPos,y].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    count++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( count &gt; 1) { </span><span class="s2-89">// there is a matching row...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// no need to go further as there is already a possible match</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            count = 0; </span><span class="s2-89">// reset count for column matching...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-90">default</span><span class="si"> : </span><span class="s2-89">// square type position check</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(dir != Check.RIGHT) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> x = (xPos-1) ; x &gt;= 0; x--) { </span><span class="s2-89">//check the left side of the cube </span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ( board[x,yPos].canBeMatched(board[x,yPos].subPanelRight) &amp;&amp;</span></div>
<div class="l li"><span class="si">                        board[x,yPos].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(dir != Check.LEFT){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> x = (xPos+1) ; x &lt; boardWidth ; x++) { </span><span class="s2-89">//check the right side of the cube </span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ( board[x,yPos].canBeMatched(board[x,yPos].subPanelLeft) &amp;&amp;</span></div>
<div class="l li"><span class="si">                        board[x,yPos].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( count &gt; 1) { </span><span class="s2-89">// there is a matching row...</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// no need to go further as there is already a possible match</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset count for column matching...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon : </span><span class="s2-89">// hex type position check</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// TopLeft &lt;&gt; BottomRight check... =========================================</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(dir != Check.TopLeft) { </span><span class="s2-89">// check the BottomRight side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board[xPos,yPos].getAllBoardInDirection(BoardDirection.BottomRight)) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ( _board.canBeMatched(_board.subPanelTopLeft) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(dir != Check.BottomRight) { </span><span class="s2-89">// check the TopLeft side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopLeft)) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ( _board.canBeMatched(_board.subPanelBottomRight) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( count &gt; 1) { </span><span class="s2-89">// there is a matching row...</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// no need to go further as there is already a possible match</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                count = 0; </span><span class="s2-89">// reset count for column matching...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// TopRight &lt;&gt; BottomLeft check... =========================================</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(dir != Check.TopRight) { </span><span class="s2-89">// check the BottomLeft side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board[xPos,yPos].getAllBoardInDirection(BoardDirection.BottomLeft)) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ( _board.canBeMatched(_board.subPanelTopRight) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(dir != Check.BottomLeft) { </span><span class="s2-89">// check the TopRight side of the cube</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopRight)) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ( _board.canBeMatched(_board.subPanelBottomLeft) &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                        count++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( count &gt; 1) { </span><span class="s2-89">// there is a matching row...</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// no need to go further as there is already a possible match</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// if it reaches here, means no match in this position...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// suggest a piece after a given time...</span></div>
<div class="l li"><span class="si">    IEnumerator suggestPiece() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(suggestionTimer); </span><span class="s2-89">// wait till it's time</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gameState != GameState.GameActive){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// game no longer active... do not display suggestion...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(GameObject go </span><span class="s2-90">in</span><span class="si"> suggestedPieces){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(go == </span><span class="s2-90">null</span><span class="si"> || !go.activeSelf){</span></div>
<div class="l li"><span class="si">                notifyBoardHasChanged(); </span><span class="s2-89">// something changed... perform checks again!</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">float</span><span class="si"> currentSize = pieceOriginalSize.x;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// main scaler loop</span></div>
<div class="l li"><span class="si">            LeanTween.value(go,suggestPieceScaler,currentSize*0.75f,currentSize*1.25f,1f)</span></div>
<div class="l li"><span class="si">                .setLoopPingPong().setOnUpdateParam(go);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// sub rotate loop</span></div>
<div class="l li"><span class="si">            go.transform.localEulerAngles = </span><span class="s2-90">new</span><span class="si"> Vector3(0,0,340f);</span></div>
<div class="l li"><span class="si">            LeanTween.rotateZ(go,20f,0.8f).setLoopPingPong();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the function for leanTween to scale the suggested pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> suggestPieceScaler(</span><span class="s2-90">float</span><span class="si"> val, </span><span class="s2-90">object</span><span class="si"> go){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(checkedPossibleMove){</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localScale = </span><span class="s2-90">new</span><span class="si"> Vector3(val,val,1); </span><span class="s2-89">// scale to value</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            LeanTween.cancel((GameObject)go); </span><span class="s2-89">// cancel all tweens</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localScale = pieceOriginalSize; </span><span class="s2-89">// resets scale to normal</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localEulerAngles = Vector3.zero; </span><span class="s2-89">// resets rotate to normal</span></div>
<div class="l li"><span class="si">            JMFUtils.autoScalePadded((GameObject)go); </span><span class="s2-89">// as a precaution to reset size</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Board Piece position Fall by gravity function ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// (main gravity function)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> dropPieces(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( !(x &gt;= 0 &amp;&amp; x &lt; boardWidth &amp;&amp; y &gt;=0 &amp;&amp; y &lt; boardHeight) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// index out of bounds... do not continue~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( board[x,y].replacementNeeded()) {</span></div>
<div class="l li"><span class="si">            board[x,y].isBeingDelayed = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// status to verify that board already active in drop sequence</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(newPieceMode){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> NewPieceMethod.FallByGravity : </span><span class="s2-89">// gravity replacement</span></div>
<div class="l li"><span class="si">                StartCoroutine( movePieces(x,y) ); </span><span class="s2-89">// coroutine that can be delayed</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> NewPieceMethod.Appear : </span><span class="s2-89">// self replacement (appear from itself)</span></div>
<div class="l li"><span class="si">                StartCoroutine( appearModePieces(x,y) ); </span><span class="s2-89">// coroutine that can be delayed</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    IEnumerator appearModePieces(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(appearModeDelay); </span><span class="s2-89">// wait for the delay..</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// for custom pieces spawn rate</span></div>
<div class="l li"><span class="si">        PieceDefinition spawned;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> w = 0; w &lt; pieceTypes.Length; w++){</span></div>
<div class="l li"><span class="si">            spawned = pieceTypes[w].chanceToSpawnThis(x,y);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(spawned != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNewAppear(spawned,appearModeSpeed,spawned.skinToUseDuringSpawn(x,y) );</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( w == pieceTypes.Length - 1){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// reached the end, no custom spawn... spawn the default</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNewAppear(pieceTypes[0],appearModeSpeed,ranType());</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(appearModeSpeed); </span><span class="s2-89">// wait for appear mode speed</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].isBeingDelayed = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset status once delay is over</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// secondary gravity function as a coroutine for delay ability</span></div>
<div class="l li"><span class="si">    IEnumerator movePieces(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(delayedGravity &amp;&amp; board[x,y].mustWait){ </span><span class="s2-89">// if delay is required by GameManager or by board</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(gravityDelayTime); </span><span class="s2-89">// delay time between each dropped pieces</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        board[x,y].mustWait = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// change status of board to drop other pieces without delay</span></div>
<div class="l li"><span class="si">        board[x,y].isBeingDelayed = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset status once delay is over</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        Board tBoard = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        SubBoardPanel sbp = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.DOWN :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(0,-size,0); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            tBoard = board[x,y].top;</span></div>
<div class="l li"><span class="si">            sbp = board[x,y].subPanelTop;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){ </span><span class="s2-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Left,</span></div>
<div class="l li"><span class="si">                    BoardDirection.Right,BoardDirection.Bottom};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.BottomLeft,</span></div>
<div class="l li"><span class="si">                    BoardDirection.BottomRight, BoardDirection.Bottom};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(0,size,0); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            tBoard = board[x,y].bottom;</span></div>
<div class="l li"><span class="si">            sbp = board[x,y].subPanelBottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){ </span><span class="s2-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Left,</span></div>
<div class="l li"><span class="si">                    BoardDirection.Right,BoardDirection.Top};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.TopLeft,</span></div>
<div class="l li"><span class="si">                    BoardDirection.TopRight, BoardDirection.Top};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(-size,0,0); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){ </span><span class="s2-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                tBoard = board[x,y].right;</span></div>
<div class="l li"><span class="si">                sbp = board[x,y].subPanelRight;</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                    BoardDirection.Bottom,BoardDirection.Left};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(Random.Range(0,2) == 0){</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].bottomRight;</span></div>
<div class="l li"><span class="si">                    sbp = board[x,y].subPanelBottomRight;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        BoardDirection.Bottom, BoardDirection.TopLeft};</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].topRight;</span></div>
<div class="l li"><span class="si">                    sbp = board[x,y].subPanelTopRight;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        BoardDirection.Bottom, BoardDirection.BottomLeft};</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.RIGHT :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(size,0,0); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){ </span><span class="s2-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                tBoard = board[x,y].left;</span></div>
<div class="l li"><span class="si">                sbp = board[x,y].subPanelLeft;</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                    BoardDirection.Bottom,BoardDirection.Right};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(Random.Range(0,2) == 0){</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].bottomLeft;</span></div>
<div class="l li"><span class="si">                    sbp = board[x,y].subPanelBottomLeft;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        BoardDirection.Bottom, BoardDirection.TopRight};</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].topLeft;</span></div>
<div class="l li"><span class="si">                    sbp = board[x,y].subPanelTopLeft;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s2-90">new</span><span class="si"> BoardDirection[]{BoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        BoardDirection.Bottom, BoardDirection.BottomRight};</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(tBoard == </span><span class="s2-90">null</span><span class="si"> ){ </span><span class="s2-89">// if no board to steal from &amp;&amp; no sub-panel wall</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(sbp.allowsGravity()){</span></div>
<div class="l li"><span class="si">                StartCoroutine(spawnNew(x,y,gravityVector)); </span><span class="s2-89">// spawn a new piece</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// finished gravity on this pass... move to the next</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        Board boardL = tBoard.boardEnumToReference(bd[0]); </span><span class="s2-89">// the reference board's hypothetical left</span></div>
<div class="l li"><span class="si">        Board boardR = tBoard.boardEnumToReference(bd[1]); </span><span class="s2-89">// the reference board's hypothetical right</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// if there is 'NO' valid piece here; check for landslide effect    </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( !(tBoard.isFilled &amp;&amp; tBoard.allowGravity() &amp;&amp; sbp.allowsGravity() ) &amp;&amp; (</span></div>
<div class="l li"><span class="si">            (boardL != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; boardL.isFilled &amp;&amp; boardL.pd.landslideEffect) ||</span></div>
<div class="l li"><span class="si">            (boardR != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; boardR.isFilled &amp;&amp; boardR.pd.landslideEffect) ||</span></div>
<div class="l li"><span class="si">            sbp.isSolid() || tBoard.panel.isSolid() ) ){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            SubBoardPanel sbpL,sbpR,sbpUL,sbpUR;</span></div>
<div class="l li"><span class="si">            sbpL = sbpR = sbpUL = sbpUR = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(boardL != </span><span class="s2-90">null</span><span class="si">) sbpUL = boardL.getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (boardL.boardEnumToReference(bd[2])); </span><span class="s2-89">// the board's SubBoardPanel left</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(boardR != </span><span class="s2-90">null</span><span class="si">) sbpUR = boardR.getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (boardR.boardEnumToReference(bd[2])); </span><span class="s2-89">// the board's SubBoardPanel right</span></div>
<div class="l li"><span class="si">                sbpL = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (board[x,y].boardEnumToReference(bd[0])); </span><span class="s2-89">// the board's SubBoardPanel left</span></div>
<div class="l li"><span class="si">                sbpR = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (board[x,y].boardEnumToReference(bd[1])); </span><span class="s2-89">// the board's SubBoardPanel right</span></div>
<div class="l li"><span class="si">                </span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// landslide code</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(boardL != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; sbpUL.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">                   boardL.allowGravity() ){ </span><span class="s2-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                    sbp = sbpL; </span><span class="s2-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                    tBoard = boardL;</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(boardR != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbpR.allowsGravity() &amp;&amp; sbpUR.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">                          boardR.allowGravity() ){ </span><span class="s2-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                    sbp = sbpR; </span><span class="s2-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                    tBoard = boardR;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                sbpL= board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (tBoard.boardEnumToReference(bd[0])); </span><span class="s2-89">// the board's SubBoardPanel topLeft</span></div>
<div class="l li"><span class="si">                sbpR = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                    (tBoard.boardEnumToReference(bd[1])); </span><span class="s2-89">// the board's SubBoardPanel topRight</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s2-89">// landslide code</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(boardL != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; boardL.allowGravity() ){ </span><span class="s2-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                    sbp = sbpL; </span><span class="s2-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                    tBoard = boardL;</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(boardR != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; boardR.allowGravity() ){ </span><span class="s2-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                    sbp = sbpR; </span><span class="s2-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                    tBoard = boardR;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(tBoard != boardL &amp;&amp; tBoard != boardR ){ </span><span class="s2-89">// needs to look deeper down...</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// cause landslide below as the top is blocked...</span></div>
<div class="l li"><span class="si">                List&lt;Board&gt; list = tBoard.getAllBoardInDirection(bd[2]); </span><span class="s2-89">// list of boards hypothetical bottom</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">bool</span><span class="si"> exitLoop = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// variable to exit a loop</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(Board boardB </span><span class="s2-90">in</span><span class="si"> list){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(boardB.boardEnumToReference(bd[2]) == </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// we reached the bottom of the board... do not continue...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    x = boardB.boardEnumToReference(bd[2]).arrayRef[0];</span></div>
<div class="l li"><span class="si">                    y = boardB.boardEnumToReference(bd[2]).arrayRef[1];</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(!board[x,y].replacementNeeded()){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// if the board here already has a piece, do not continue...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    boardL = boardB.boardEnumToReference(bd[0]); </span><span class="s2-89">// the board's hypothetical left</span></div>
<div class="l li"><span class="si">                    boardR = boardB.boardEnumToReference(bd[1]); </span><span class="s2-89">// the board's hypothetical right</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                    </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(boardL != </span><span class="s2-90">null</span><span class="si">) sbpUL = boardL.getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (boardL.boardEnumToReference(bd[2])); </span><span class="s2-89">// the board's SubBoardPanel left</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(boardR != </span><span class="s2-90">null</span><span class="si">) sbpUR = boardR.getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (boardR.boardEnumToReference(bd[2])); </span><span class="s2-89">// the board's SubBoardPanel right</span></div>
<div class="l li"><span class="si">                        sbpL = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (board[x,y].boardEnumToReference(bd[0])); </span><span class="s2-89">// the board's SubBoardPanel left</span></div>
<div class="l li"><span class="si">                        sbpR = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (board[x,y].boardEnumToReference(bd[1])); </span><span class="s2-89">// the board's SubBoardPanel right</span></div>
<div class="l li"><span class="si">                        </span></div>
<div class="l li"><span class="si">                        </span><span class="s2-89">// landslide code</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(boardL != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; sbpUL.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">                           boardL.allowGravity() ){ </span><span class="s2-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                            sbp = sbpL; </span><span class="s2-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                            tBoard = boardL;</span></div>
<div class="l li"><span class="si">                            exitLoop = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(boardR != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbpR.allowsGravity() &amp;&amp; sbpUR.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">                                  boardR.allowGravity() ){ </span><span class="s2-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                            sbp = sbpR; </span><span class="s2-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                            tBoard = boardR;</span></div>
<div class="l li"><span class="si">                            exitLoop = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        </span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                        sbpL= board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (boardB.boardEnumToReference(bd[0])); </span><span class="s2-89">// the board's SubBoardPanel topLeft</span></div>
<div class="l li"><span class="si">                        sbpR = board[x,y].getSubPanelBetween</span></div>
<div class="l li"><span class="si">                            (boardB.boardEnumToReference(bd[1])); </span><span class="s2-89">// the board's SubBoardPanel topRight</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                        </span><span class="s2-89">// landslide code</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(boardL != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbpL.allowsGravity() &amp;&amp; boardL.allowGravity() ){ </span><span class="s2-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                            sbp = sbpL; </span><span class="s2-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                            tBoard = boardL;</span></div>
<div class="l li"><span class="si">                            exitLoop = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(boardR != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbpR.allowsGravity() &amp;&amp; boardR.allowGravity() ){ </span><span class="s2-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                            sbp = sbpR; </span><span class="s2-89">// update the subPanel reference</span></div>
<div class="l li"><span class="si">                            tBoard = boardR;</span></div>
<div class="l li"><span class="si">                            exitLoop = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(exitLoop){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// break out of loop</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( tBoard != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; sbp.allowsGravity() &amp;&amp;</span></div>
<div class="l li"><span class="si">           tBoard.allowGravity() ){ </span><span class="s2-89">// a valid target to steal a piece from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(board[x,y].piece != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].piece.removePiece(); </span><span class="s2-89">// just in case the reference is lost without removal</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            board[x,y].piece = tBoard.piece; </span><span class="s2-89">// steal the piece</span></div>
<div class="l li"><span class="si">            tBoard.piece = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            StartCoroutine(animateMove(x,y)); </span><span class="s2-89">// animate the change</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// do the same check on the board we stole from as itself needs replacement</span></div>
<div class="l li"><span class="si">            dropPieces(tBoard.arrayRef[0],tBoard.arrayRef[1]);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// finished gravity on this pass... move to the next</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// sub-function to update the board box and tween the piece due to gravity movement</span></div>
<div class="l li"><span class="si">    IEnumerator animateMove (</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// update the local data...</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// board is falling...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> distance = countBlockedUnfilled(x,y, </span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">float</span><span class="si"> delay = gravityDropSpeed;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(acceleratedVelocity){</span></div>
<div class="l li"><span class="si">            delay =  gravityDropSpeed / Mathf.Max(distance, 1);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        board[x,y].applyTweening(delay);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// the timer according to the drop speed or updatespeed (whichever longer)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(delay);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// update the board box once animation has finished..</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// no longer falling into position</span></div>
<div class="l li"><span class="si">        board[x,y].isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// piece is active for checks</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( distance &lt; 1 ){ </span><span class="s2-89">// check if it has reached bottom</span></div>
<div class="l li"><span class="si">            board[x,y].mustWait = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// reached bottom, re-activate gravity delay</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(pieceDropExtraEffect){ </span><span class="s2-89">// if extra effect is enabled</span></div>
<div class="l li"><span class="si">                board[x,y].applyTweeningAfterEffects(gravityDropSpeed, getVectorEffect(x,y) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            audioScript.DropSoundFx.play(); </span><span class="s2-89">// play the drop sound</span></div>
<div class="l li"><span class="si">        }</span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check if this new piece needs to fall or not...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(board[x,y].boardEnumToReference(bd[2]) != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                dropPieces(board[x,y].boardEnumToReference(bd[2]).arrayRef[0],</span></div>
<div class="l li"><span class="si">                           board[x,y].boardEnumToReference(bd[2]).arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// gravity effect after falling down - simulates easeInBack</span></div>
<div class="l li"><span class="si">    Vector3[] getVectorEffect(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">float</span><span class="si"> offset = 0.35f * size; </span><span class="s2-89">// the amount of offset you wish for effect</span></div>
<div class="l li"><span class="si">        Vector3 position = board[x,y].position;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            position.z = board[x,y].piece.thisPiece.transform.position.z; </span><span class="s2-89">// ensure the Z order stays when tweening</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        Vector3 pos;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.DOWN : </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s2-90">new</span><span class="si"> Vector3( 0f , offset, 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3[] {position, (position - pos ), position, position};</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.UP :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s2-90">new</span><span class="si"> Vector3( 0f , offset/2.5f, 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3[] {(position + pos), position, position, position };</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.LEFT :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s2-90">new</span><span class="si"> Vector3( offset/3, 0f , 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3[] {(position - pos), position, position, position };</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> Gravity.RIGHT :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s2-90">new</span><span class="si"> Vector3( offset/3, 0f , 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3[] {(position + pos), position, position, position };</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// sub-function to compensate delay of a new spawned piece tweening process</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> IEnumerator spawnNew (</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, Vector3 spawnPoint){</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// board is falling...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> distance = countBlockedUnfilled(x,y, </span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">float</span><span class="si"> delay = gravityDropSpeed;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(acceleratedVelocity){</span></div>
<div class="l li"><span class="si">            delay =  gravityDropSpeed / Mathf.Max(distance, 1);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// for custom pieces spawn rate</span></div>
<div class="l li"><span class="si">        PieceDefinition spawned;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> w = 0; w &lt; pieceTypes.Length; w++){</span></div>
<div class="l li"><span class="si">            spawned = pieceTypes[w].chanceToSpawnThis(x,y);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(spawned != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNew(spawned, spawnPoint, delay, spawned.skinToUseDuringSpawn(x,y) );</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( w == pieceTypes.Length - 1){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// reached the end, no custom spawn... spawn the default</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNew(pieceTypes[0],spawnPoint, delay, ranType() );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// the timer according to the drop speed or updatespeed (whichever longer)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(delay);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// update the board box once animation has finished..</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].isActive = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].mustWait = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// reached bottom, re-activate gravity delay</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( distance &lt; 1 ){ </span><span class="s2-89">// check if it has reached bottom            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(pieceDropExtraEffect){ </span><span class="s2-89">// if extra effect is enabled</span></div>
<div class="l li"><span class="si">                board[x,y].applyTweeningAfterEffects(gravityDropSpeed, getVectorEffect(x,y) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            audioScript.DropSoundFx.play(); </span><span class="s2-89">// play the drop sound</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check if this new piece needs to fall or not...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(board[x,y].boardEnumToReference(bd[2]) != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                dropPieces(board[x,y].boardEnumToReference(bd[2]).arrayRef[0],</span></div>
<div class="l li"><span class="si">                           board[x,y].boardEnumToReference(bd[2]).arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion loop routine &amp; related</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region PieceTracker related</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// PieceTracker movement notifier ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// for external source call method (called from PieceTracker.cs script), </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// this is to drag gems on the board</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> draggedFromHere(</span><span class="s2-90">int</span><span class="si">[] pos, </span><span class="s2-90">int</span><span class="si">[] partner){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(moveOnlyAfterSettle){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!checkedPossibleMove){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// player needs to wait for board to settle before making the next move...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si"> (!canMove){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// if cannot move, exit~! ( player perhaps made a bad move previously )</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> posX1,posY1; </span><span class="s2-89">// the calling board position</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> posX2,posY2; </span><span class="s2-89">// the partner board position</span></div>
<div class="l li"><span class="si">        posX1 = pos[0]; posY1 = pos[1]; </span><span class="s2-89">// get the calling position</span></div>
<div class="l li"><span class="si">        posX2 = partner[0]; posY2 = partner[1]; </span><span class="s2-89">// get the partner</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// get the direction of swap</span></div>
<div class="l li"><span class="si">        SubBoardPanel sbp = iBoard(pos).getSubPanelBetween(iBoard(partner));</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// extra conditioning check if pieces can be moved</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!(posX2 &gt;=0 &amp;&amp; posX2 &lt; boardWidth) || !(posY2 &gt;=0 &amp;&amp; posY2 &lt; boardHeight) ||</span></div>
<div class="l li"><span class="si">           ( sbp.spnd != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; !sbp.isSwitchable() ) ||</span></div>
<div class="l li"><span class="si">           !board[posX1,posY1].panel.isSwitchable() || !board[posX2,posY2].panel.isSwitchable() ||</span></div>
<div class="l li"><span class="si">           board[posX1,posY1].isFalling || !board[posX1,posY1].isFilled ||</span></div>
<div class="l li"><span class="si">           board[posX2,posY2].isFalling || !board[posX2,posY2].isFilled ||</span></div>
<div class="l li"><span class="si">           !board[posX1,posY1].piece.thisPiece.GetComponent&lt;PieceTracker&gt;().enabled ||</span></div>
<div class="l li"><span class="si">           !board[posX2,posY2].piece.thisPiece.GetComponent&lt;PieceTracker&gt;().enabled){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// condition above states the box are not legit selections, do not proceed!!!</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        PieceDefinition pdMain = board[posX1,posY1].piece.pd; </span><span class="s2-89">// the calling piece definition</span></div>
<div class="l li"><span class="si">        PieceDefinition pdSub = board[posX2,posY2].piece.pd; </span><span class="s2-89">// the partner piece definition</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// check if we are merging two power gems</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pdMain.powerMatched(posX1,posY1,posX2,posY2,</span><span class="s2-90">true</span><span class="si">,pdMain,pdSub) ||</span></div>
<div class="l li"><span class="si">           pdSub.powerMatched(posX1,posY1,posX2,posY2,</span><span class="s2-90">true</span><span class="si">,pdSub,pdMain) ||</span></div>
<div class="l li"><span class="si">           pdMain.powerMatched(pos,partner,</span><span class="s2-90">true</span><span class="si">,iBoard(pos).piece,iBoard(partner).piece) ||</span></div>
<div class="l li"><span class="si">           pdSub.powerMatched(pos,partner,</span><span class="s2-90">true</span><span class="si">,iBoard(partner).piece,iBoard(pos).piece)){</span></div>
<div class="l li"><span class="si">            playerMadeAMove(); </span><span class="s2-89">// call the function when player makes a valid move</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// we are merging, so it is handled elsewhere, job done here...so, return!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// initiate the switch if the two board pieces are switchable</span></div>
<div class="l li"><span class="si">        StartCoroutine(switchPositions(posX1,posY1,posX2,posY2));</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// tween the pieces and perform actions after the given time (to accomodate the tweening)</span></div>
<div class="l li"><span class="si">    IEnumerator switchPositions (</span><span class="s2-90">int</span><span class="si"> posX1, </span><span class="s2-90">int</span><span class="si"> posY1, </span><span class="s2-90">int</span><span class="si"> posX2, </span><span class="s2-90">int</span><span class="si"> posY2) {</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        audioScript.switchSoundFx.play(); </span><span class="s2-89">// play the switch sound fx</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// freeze the boxes involved</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isFalling = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isFalling = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// switch the two pieces around in memory (not visual in GUI yet)</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].ignoreNotifyOnce = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// ignore notify to keep the suggested piece</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].ignoreNotifyOnce = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// ignore notify to keep the suggested piece</span></div>
<div class="l li"><span class="si">        GamePiece holder = board[posX1,posY1].piece;</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].piece = board[posX2,posY2].piece;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].piece = holder;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// tween it ( now only visual in GUI)</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].applyTweening(gemSwitchSpeed);</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].applyTweening(gemSwitchSpeed);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(gemSwitchSpeed); </span><span class="s2-89">// the timer</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// assign the type in a shorter reference just for easier usage</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> t1 = board[posX1,posY1].piece.slotNum;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> t2 = board[posX2,posY2].piece.slotNum;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// extensive check to verify that the move is legit</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( checkThisPosition(posX1,posY1,t1,Check.UP)|| checkThisPosition(posX1,posY1,t1,Check.DOWN)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX1,posY1,t1,Check.LEFT) || checkThisPosition(posX1,posY1,t1,Check.RIGHT)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX1,posY1,t1,Check.TopLeft) || checkThisPosition(posX1,posY1,t1,Check.TopRight)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX1,posY1,t1,Check.BottomLeft) || checkThisPosition(posX1,posY1,t1,Check.BottomRight)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX2,posY2,t2,Check.UP)|| checkThisPosition(posX2,posY2,t2,Check.DOWN)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX2,posY2,t2,Check.LEFT) || checkThisPosition(posX2,posY2,t2,Check.RIGHT)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX2,posY2,t2,Check.TopLeft) || checkThisPosition(posX2,posY2,t2,Check.TopRight)</span></div>
<div class="l li"><span class="si">           || checkThisPosition(posX2,posY2,t2,Check.BottomLeft) || checkThisPosition(posX2,posY2,t2,Check.BottomRight) ) {</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// if legit, un- freeze the boxes involved</span></div>
<div class="l li"><span class="si">            board[posX1,posY1].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            board[posX2,posY2].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            board[posX1,posY1].isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// make the piece active for checks</span></div>
<div class="l li"><span class="si">            board[posX2,posY2].isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// make the piece active for checks</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            playerMadeAMove(); </span><span class="s2-89">// call the function when player makes a valid move</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// if move is not legit, revert it back</span></div>
<div class="l li"><span class="si">            StartCoroutine(revertMove(posX1,posY1,posX2,posY2)); </span><span class="s2-89">// to revert the last move</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// to revert the actions if the last move was an invalid move</span></div>
<div class="l li"><span class="si">    IEnumerator revertMove (</span><span class="s2-90">int</span><span class="si"> posX1, </span><span class="s2-90">int</span><span class="si"> posY1, </span><span class="s2-90">int</span><span class="si"> posX2, </span><span class="s2-90">int</span><span class="si"> posY2) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// NOTE : remember that the boxes is still frozen... (in switchPositions() )</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        audioScript.badMoveSoundFx.play(); </span><span class="s2-89">// play the bad move sound fx</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        canMove = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// player cannot move until it is reverted</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// switch it back around...</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].ignoreNotifyOnce = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// ignore notify to keep the suggested piece</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].ignoreNotifyOnce = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// ignore notify to keep the suggested piece</span></div>
<div class="l li"><span class="si">        GamePiece holder = board[posX1,posY1].piece;</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].piece = board[posX2,posY2].piece;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].piece = holder;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// tween it ( make it visual in GUI)</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].applyTweening(gemSwitchSpeed);</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].applyTweening(gemSwitchSpeed);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(gemSwitchSpeed); </span><span class="s2-89">// the timer</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// un- freeze the boxes involved for checks</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[posX1,posY1].isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// make the piece active for checks</span></div>
<div class="l li"><span class="si">        board[posX2,posY2].isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// make the piece active for checks</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        canMove = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// give power back to the player</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion PieceTracker related</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Helper Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Helper FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// random cubeType generator , just coz the code is too long</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> ranType() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> Random.Range(0,Mathf.Min( NumOfActiveType, pieceTypes[0].skin.Length) );</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// limited by normalpieces types available if numOfActiveType is declared out of bounds</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// refresh the position if you have moved the gameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> refreshPosition(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.refreshBoardPosition();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED FUNCTION of getBoardsDistance *range of distance Type*</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;Board&gt; getBoardsFromDistance(</span><span class="s2-90">int</span><span class="si">[] point, </span><span class="s2-90">int</span><span class="si"> distMin, </span><span class="s2-90">int</span><span class="si"> distMax){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> getBoardsFromDistance(iBoard(point),distMin, distMax );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// get all the board from a specific distance range~!</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;Board&gt; getBoardsFromDistance(Board point, </span><span class="s2-90">int</span><span class="si"> distMin, </span><span class="s2-90">int</span><span class="si"> distMax){</span></div>
<div class="l li"><span class="si">        List&lt;Board&gt; temp = </span><span class="s2-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = distMin; x &lt;= distMax; x++){</span></div>
<div class="l li"><span class="si">            temp.AddRange(getBoardsFromDistance(point,x)); </span><span class="s2-89">// add the boards within the range specified</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> temp;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED FUNCTION of getBoardsDistance</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;Board&gt; getBoardsFromDistance(</span><span class="s2-90">int</span><span class="si">[] point, </span><span class="s2-90">int</span><span class="si"> dist){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> getBoardsFromDistance(iBoard(point),dist);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// get all the board from a specific distance</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;Board&gt; getBoardsFromDistance(Board point, </span><span class="s2-90">int</span><span class="si"> dist){</span></div>
<div class="l li"><span class="si">        List&lt;Board&gt; temp = </span><span class="s2-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board itr </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(boardRadiusDistance(point,itr) == dist){ </span><span class="s2-89">// is on this specific distance</span></div>
<div class="l li"><span class="si">                temp.Add(itr); </span><span class="s2-89">// add the board to the list</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> temp;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED FUNCTION of boardRadiusDistance</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> boardRadiusDistance(Board boardA, Board boardB ){ </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si">  boardRadiusDistance(boardA.arrayRef,boardB.arrayRef);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to calculate the relative distance between two board locations</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> boardRadiusDistance(</span><span class="s2-90">int</span><span class="si">[] bPosA, </span><span class="s2-90">int</span><span class="si">[] bPosB ){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> totalX = Mathf.Abs( bPosA[0] - bPosB[0] );</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> totalY = Mathf.Abs( bPosA[1] - bPosB[1] );</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-89">// TODO squareMode not available in JMFP...</span></div>
<div class="l li"><span class="s2-89">//          if(squareMode == squareMode.CrossType){ // specific for cross-type square</span></div>
<div class="l li"><span class="s2-89">//              return totalX + totalY; // each box = 1 distance... no diagonals</span></div>
<div class="l li"><span class="s2-89">//          } else {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si">  Mathf.Max(totalX, Mathf.Max(totalY, Mathf.Abs( totalX - totalY ) ) );</span></div>
<div class="l li"><span class="s2-89">//          }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            Vector3 vecA = hexGetCalcVector(bPosA);</span></div>
<div class="l li"><span class="si">            Vector3 vecB = hexGetCalcVector(bPosB);</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> (</span><span class="s2-90">int</span><span class="si">) Mathf.Max(</span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">float</span><span class="si">[]{ </span><span class="s2-89">// hex distance formula</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.x - vecB.x),</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.y - vecB.y),</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.z - vecB.z)</span></div>
<div class="l li"><span class="si">            });</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Helper Functions</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region HEXAGON related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// HEXAGON FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// returns the unsquiggled Hexagon grid</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] hexUnsquiggleArray(</span><span class="s2-90">int</span><span class="si">[] array){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] { array[0],array[1] - array[0] + (array[0]/2)};</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// returns a vector3 array for distance calculation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector3 hexGetCalcVector(</span><span class="s2-90">int</span><span class="si">[] array){</span></div>
<div class="l li"><span class="si">        array = hexUnsquiggleArray(array);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3(array[0],array[1],(array[0] + array[1])*-1);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion HEXAGON related functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region game-start sequence</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> StartGame() { </span><span class="s2-89">// when the game is actually running...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gameState == GameState.GamePending){</span></div>
<div class="l li"><span class="si">            gameState = GameState.GameActive; </span><span class="s2-89">// change the state to active...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// Initialize Timers and settings</span></div>
<div class="l li"><span class="si">            StartCoroutine(updater()); </span><span class="s2-89">// initiate the update loop</span></div>
<div class="l li"><span class="si">            StartCoroutine(boardCheckLooper()); </span><span class="s2-89">// initiate the check loop</span></div>
<div class="l li"><span class="si">            canMove = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// allows player to move the pieces</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            JMFRelay.onGameStart();</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s2-85">&quot;Game already started... cannot start the game again!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion game-start sequence</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Unity Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// UNITY FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> Awake () { </span><span class="s2-89">// board needs to be initialized before other scripts can access it</span></div>
<div class="l li"><span class="si">        JMFUtils.gm = </span><span class="s2-90">this</span><span class="si">; </span><span class="s2-89">// make a easy reference to the GameManager ( this script ! ) </span></div>
<div class="l li"><span class="si">        JMFUtils.wc = GetComponent&lt;WinningConditions&gt;(); </span><span class="s2-89">// make a easy reference to the WinningConditions script~!</span></div>
<div class="l li"><span class="si">        JMFUtils.vm = GetComponent&lt;VisualManager&gt;(); </span><span class="s2-89">// make a easy reference to the VisualManager script~!</span></div>
<div class="l li"><span class="si">        JMFRelay.onPreGameStart();</span></div>
<div class="l li"><span class="si">        initializeGame();</span></div>
<div class="l li"><span class="si">        preGameSetup();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        canMove = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// initially cannot be moved...</span></div>
<div class="l li"><span class="si">        gameState = GameState.GamePending; </span><span class="s2-89">// game is waiting to be started...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> Start(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// init the board objects</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.init(); </span><span class="s2-89">// inits the GUIs for the object</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// save the current position &amp; size of the GameManager as reference</span></div>
<div class="l li"><span class="si">        currentPosition = transform.position;</span></div>
<div class="l li"><span class="si">        currentSize = size;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Update is called once per frame</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> Update () {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// woohoo~ nothing here??</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Unity Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs">Number of differences: <b>11</b></div><div id="colors"><div class="sa" title="118 added lines and 96 inline additions in changed lines">Added(118,96)</div><div class="sd" title="1 deleted lines and 15 inline deletions in changed lines">Deleted(1,15)</div><div class="sc" title="101 changed lines">Changed(101)</div><div class="sc2" title="34 inline changes in changed lines">Changed in changed(34)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on May 22, 2015, 9:56 PM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 7.0.1.4.
    </div>
</div>
</body>

</html>

