<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 7.0.1.4 -->
<!-- saved from url=(0014)about:internet -->

<head>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0;height: 13px;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2112px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="/4FD8B397F5AF4D68BC7217E2B7C5B70A/1149FDCF-E20B-4E40-95C0-B19172C8BE9D/main.js" charset="UTF-8"></script><script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2112
    var $diffs = [
null,
{d:'Diff 1: Change 1 line (23, first file) to 2 lines (23 - 24, second file)',l:[22,23]},
{d:'Diff 2: Change 1 line (302, first file) to 9 lines (302 - 310, second file)',l:[302,310]},
{d:'Diff 3: Change 1 line (313, first file) to 1 line (321, second file)',l:[321,321]},
{d:'Diff 4: Change 2 lines (455 - 456, first file) to 3 lines (463 - 465, second file)',l:[463,465]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="WinningConditions(old).cs"><b>WinningConditions(old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num">    </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">302 </div>
<div class="num">    </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>
<div class="num">409 </div>
<div class="num">410 </div>
<div class="num">411 </div>
<div class="num">412 </div>
<div class="num">413 </div>
<div class="num">414 </div>
<div class="num">415 </div>
<div class="num">416 </div>
<div class="num">417 </div>
<div class="num">418 </div>
<div class="num">419 </div>
<div class="num">420 </div>
<div class="num">421 </div>
<div class="num">422 </div>
<div class="num">423 </div>
<div class="num">424 </div>
<div class="num">425 </div>
<div class="num">426 </div>
<div class="num">427 </div>
<div class="num">428 </div>
<div class="num">429 </div>
<div class="num">430 </div>
<div class="num">431 </div>
<div class="num">432 </div>
<div class="num">433 </div>
<div class="num">434 </div>
<div class="num">435 </div>
<div class="num">436 </div>
<div class="num">437 </div>
<div class="num">438 </div>
<div class="num">439 </div>
<div class="num">440 </div>
<div class="num">441 </div>
<div class="num">442 </div>
<div class="num">443 </div>
<div class="num">444 </div>
<div class="num">445 </div>
<div class="num">446 </div>
<div class="num">447 </div>
<div class="num">448 </div>
<div class="num">449 </div>
<div class="num">450 </div>
<div class="num">451 </div>
<div class="num">452 </div>
<div class="num">453 </div>
<div class="num">454 </div>
<div class="num">455 </div>
<div class="num">    </div>
<div class="num">456 </div>
<div class="num">457 </div>
<div class="num">458 </div>
<div class="num">459 </div>
<div class="num">460 </div>
<div class="num">461 </div>
<div class="num">462 </div>
<div class="num">463 </div>
<div class="num">464 </div>
<div class="num">465 </div>
<div class="num">466 </div>
<div class="num">467 </div>
<div class="num">468 </div>
<div class="num">469 </div>
<div class="num">470 </div>
<div class="num">471 </div>
<div class="num">472 </div>
<div class="num">473 </div>
<div class="num">474 </div>
<div class="num">475 </div>
<div class="num">476 </div>
<div class="num">477 </div>
<div class="num">478 </div>
<div class="num">479 </div>
<div class="num">480 </div>
<div class="num">481 </div>
<div class="num">482 </div>
<div class="num">483 </div>
<div class="num">484 </div>
<div class="num">485 </div>
<div class="num">486 </div>
<div class="num">487 </div>
<div class="num">488 </div>
<div class="num">489 </div>
<div class="num">490 </div>
<div class="num">491 </div>
<div class="num">492 </div>
<div class="num">493 </div>
<div class="num">494 </div>
<div class="num">495 </div>
<div class="num">496 </div>
<div class="num">497 </div>
<div class="num">498 </div>
<div class="num">499 </div>
<div class="num">500 </div>
<div class="num">501 </div>
<div class="num">502 </div>
<div class="num">503 </div>
<div class="num">504 </div>
<div class="num">505 </div>
<div class="num">506 </div>
<div class="num">507 </div>
<div class="num">508 </div>
<div class="num">509 </div>
<div class="num">510 </div>
<div class="num">511 </div>
<div class="num">512 </div>
<div class="num">513 </div>
<div class="num">514 </div>
<div class="num">515 </div>
<div class="num">516 </div>
<div class="num">517 </div>
<div class="num">518 </div>
<div class="num">519 </div>
<div class="num">520 </div>
<div class="num">521 </div>
<div class="num">522 </div>
<div class="num">523 </div>
<div class="num">524 </div>
<div class="num">525 </div>
<div class="num">526 </div>
<div class="num">527 </div>
<div class="num">528 </div>
<div class="num">529 </div>
<div class="num">530 </div>
<div class="num">531 </div>
<div class="num">532 </div>
<div class="num">533 </div>
<div class="num">534 </div>
<div class="num">535 </div>
<div class="num">536 </div>
<div class="num">537 </div>
<div class="num">538 </div>
<div class="num">539 </div>
<div class="num">540 </div>
<div class="num">541 </div>
<div class="num">542 </div>
<div class="num">543 </div>
<div class="num">544 </div>
<div class="num">545 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// NOTICE :</span></div>
<div class="l li"><span class="s1-89">/// This script is conditions set to win/end the current game.</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> WinningConditions : MonoBehaviour {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Starts the game running when scene loads.\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">             </span><span class="s1-85">&quot;call 'startThisGame()' function yourself if you have other plans.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> startGameImmediately = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> checkSpeed = 1;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> specialTheLeftovers = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> secondsPerSpecial = 5;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> movesPerSpecial = 5;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> popSpecialsBeforeEnd = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l lc d1"><span class="sc">    List&lt;Board&gt; specialLeftOvers = new List&lt;Board&gt;();</span></div>
<div class="l lc d1"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s1-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// timer game</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isTimerGame = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextMesh timeLabel;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextMesh timeText;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> TimeGiven = 120;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s1-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// max move game</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isMaxMovesGame = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextMesh movesLabel;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextMesh movesText;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> allowedMoves = 40;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s1-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// score game</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isScoreGame = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, player must obtain a minimum score of 'scoreToReach'&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> scoreRequiredWin = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, obtaining the minimum score will trigger end-game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> scoreEndsGame = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> scoreToReach = 10000;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> scoreMilestone2 = 20000;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> scoreMilestone3 = 30000;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s1-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// clear shaded game</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isClearShadedGame = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, player must clear all the shaded panels to win.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> shadesRequiredWin = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, clearing all the shaded panels will trigger end-game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> shadesEndsGame = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">int</span><span class="si"> shadesLeft = 1;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s1-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// get type game</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isGetTypesGame = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, player must get all the specified types to win.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> typesRequiredWin = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, getting all the specified types will trigger end-game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> typeEndsGame = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[]numToGet = </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[9];</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject placeholderPanel;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject textHolder;</span></div>
<div class="l li"><span class="si">    TextMesh[] desc = </span><span class="s1-90">new</span><span class="si"> TextMesh[9];</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> collectedAll = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s1-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// treasure game</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isTreasureGame = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, player must all the treasures to win.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> treasureRequiredWin = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, getting all the treasures will trigger end-game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> treasureEndsGame = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextMesh treasureLabel;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextMesh treasureText;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> numOfTreasures = 3;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> maxOnScreen = 2;</span></div>
<div class="l li"><span class="si">    [Range(0,30)]</span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> chanceToSpawn = 10;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;Vector2&gt; treasureGoal = </span><span class="s1-90">new</span><span class="si"> List&lt;Vector2&gt;();</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;GamePiece&gt; treasureList = </span><span class="s1-90">new</span><span class="si"> List&lt;GamePiece&gt;();</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> treasuresCollected = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> treasuresSpawned = 0;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject GameOverMessage;</span></div>
<div class="l li"><span class="si">    GameManager gm;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> timeKeeper = 0; </span><span class="s1-89">// just an in-game timer to find out how long the round has been playing..</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> isGameOver = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// Below are properties of interest...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.score   &lt;--- the current score accumulated by the player</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.moves   &lt;--- the total moves the player has made</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.currentCombo    &lt;--- the current combo count of any given move ( will reset to 0 each move )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.maxCombo   &lt;--- the max combo the player has achieved in the gaming round</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.gameState    &lt;--- the status of the GameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.checkedPossibleMove   &lt;--- a boolean that signifies the board has stabilized from the last move</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">///                               ( use this when you want the board to stop only after finish combo-ing )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.canMove     &lt;--- a boolean to allow players to move the pieces. true = can move; false = cannot move.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.board[x,y]      &lt;--- use this to reference the board if you needed more board properties</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// gm.matchCount[x]   &lt;--- the count of the type that has been destroyed.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region routines &amp; related</span></div>
<div class="l li"><span class="si">    IEnumerator updateStatus(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(gm.gameState != GameState.GameOver) {</span><span class="s1-89">// loop infinitely until game over</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// updates the status...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isTimerGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(timeText != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ((TimeGiven - timeKeeper) &gt;= 0){</span></div>
<div class="l li"><span class="si">                        timeText.text = (TimeGiven - timeKeeper).ToString(); </span><span class="s1-89">// outputs the time to the text label</span></div>
<div class="l li"><span class="si">                    }</span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        timeText.text = </span><span class="s1-85">&quot;0&quot;</span><span class="si">; </span><span class="s1-89">// outputs the time to the text label</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="s1-89">//          if(isScoreGame){</span></div>
<div class="l li"><span class="s1-89">//              // score is handled by GameManager and VisualManager</span></div>
<div class="l li"><span class="s1-89">//          }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isMaxMovesGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(movesText != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si"> ((allowedMoves - gm.moves) &gt;= 0){</span></div>
<div class="l li"><span class="si">                        movesText.text = (allowedMoves - gm.moves).ToString(); </span><span class="s1-89">// outputs the time to the text label</span></div>
<div class="l li"><span class="si">                    }</span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        movesText.text = </span><span class="s1-85">&quot;0&quot;</span><span class="si">; </span><span class="s1-89">// outputs the time to the text label</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isClearShadedGame){ </span><span class="s1-89">// updates the 'shadesLeft' variable...</span></div>
<div class="l li"><span class="si">                shadesLeft = 0;</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(Board board </span><span class="s1-90">in</span><span class="si"> gm.board){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">foreach</span><span class="si">(PanelInfo pi </span><span class="s1-90">in</span><span class="si"> board.panel.pi){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(pi.pnd </span><span class="s1-90">is</span><span class="si"> ShadedPanel){</span></div>
<div class="l li"><span class="si">                            shadesLeft+= pi.durability; </span><span class="s1-89">// increase count as this is a shaded panel</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isGetTypesGame){ </span><span class="s1-89">// updates the 'collectedAll' variable...</span></div>
<div class="l li"><span class="si">                collectedAll = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.pieceTypes[0].skin.Length;x++){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(numToGet[x] &gt; 0 &amp;&amp; x &lt; gm.NumOfActiveType){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">int</span><span class="si"> val = numToGet[x] - gm.matchCount[x]; </span><span class="s1-89">// num of remaining pieces to collect</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(val &gt; 0){</span></div>
<div class="l li"><span class="si">                            desc[x].text =  val.ToString() + </span><span class="s1-85">&quot; left&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span><span class="s1-90">else</span><span class="si">{</span></div>
<div class="l li"><span class="si">                            desc[x].text = </span><span class="s1-85">&quot;0 left&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(x &lt; gm.NumOfActiveType &amp;&amp; !(gm.matchCount[x] &gt;= numToGet[x] ) ){</span></div>
<div class="l li"><span class="si">                        collectedAll = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// still got pieces to collect...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// function to collect treasure as well as update the status...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isTreasureGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(Vector2 pos </span><span class="s1-90">in</span><span class="si"> treasureGoal){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">foreach</span><span class="si">(GamePiece gp </span><span class="s1-90">in</span><span class="si"> treasureList){ </span><span class="s1-89">// loop each treasure piece</span></div>
<div class="l li"><span class="si">                        Vector2 temp = </span><span class="s1-90">new</span><span class="si"> Vector2(gp.master.arrayRef[0],gp.master.arrayRef[1]);</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(temp == pos &amp;&amp; !gp.master.isFalling){</span></div>
<div class="l li"><span class="si">                            treasuresCollected++; </span><span class="s1-89">// increase collected count</span></div>
<div class="l li"><span class="si">                            gp.pd.onPieceDestroyed(gp); </span><span class="s1-89">// the destroy call for treasure object</span></div>
<div class="l li"><span class="si">                            gp.removePiece(); </span><span class="s1-89">// destroy the treasure</span></div>
<div class="l li"><span class="si">                            treasureList.Remove(gp); </span><span class="s1-89">// remove from the list</span></div>
<div class="l li"><span class="si">                            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(treasureText != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    treasureText.text = (numOfTreasures - treasuresCollected).ToString();</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(checkSpeed); </span><span class="s1-89">// wait for the refresh speed</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    IEnumerator routineCheck(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(!isGameOver) {</span><span class="s1-89">// loop infinitely until game over</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// perform the checks</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isTimerGame){</span></div>
<div class="l li"><span class="si">                checkTime();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isMaxMovesGame){</span></div>
<div class="l li"><span class="si">                checkMoves();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isScoreGame &amp;&amp; scoreEndsGame){</span></div>
<div class="l li"><span class="si">                checkScore();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isClearShadedGame &amp;&amp; shadesEndsGame){</span></div>
<div class="l li"><span class="si">                checkShaded();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isGetTypesGame &amp;&amp; typeEndsGame){</span></div>
<div class="l li"><span class="si">                checkNumsOfType();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isTreasureGame &amp;&amp; treasureEndsGame){</span></div>
<div class="l li"><span class="si">                checkTreasures();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(checkSpeed); </span><span class="s1-89">// wait for the refresh speed</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    IEnumerator timer(){        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(!isGameOver) {</span><span class="s1-89">// loop infinitely until game over</span></div>
<div class="l li"><span class="si">            timeKeeper++; </span><span class="s1-89">// timer increase in time</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(1f); </span><span class="s1-89">// ticks every second...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check the time</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> checkTime(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( TimeGiven &lt;= timeKeeper ){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver());</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to compare score</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> checkScore(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( gm.score &gt; scoreToReach ){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver());</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to compare moves left</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> checkMoves(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(  gm.moves &gt;= allowedMoves){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver());</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check whether there are any shaded panels left...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> checkShaded(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( shadesLeft == 0){ </span><span class="s1-89">// when no shaded panels are found, game over</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver());</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check whether the number of types to get is reached...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> checkNumsOfType(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(collectedAll){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver()); </span><span class="s1-89">// collected all, initiate game over</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check that the player has collected all treasures</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> checkTreasures(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(treasuresCollected == numOfTreasures){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver()); </span><span class="s1-89">// collected all, initiate game over</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion routines &amp; related</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region endgame sequence</span></div>
<div class="l li"><span class="si">    IEnumerator gameOver(){</span></div>
<div class="l lg"><span class="sig">        </span></div>
<div class="l li"><span class="si">        gm.audioScript.gameOverSoundFx.play(); </span><span class="s1-89">// play the game over fx</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        gm.canMove = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// player not allowed to move anymore</span></div>
<div class="l li"><span class="si">        gm.gameState = GameState.GameFinalizing; </span><span class="s1-89">// game in finalizing mode...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        isGameOver = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// game over, all routine loops will be disabled</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(1f); </span><span class="s1-89">// wait for board to finish its routine actions</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(specialTheLeftovers){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">while</span><span class="si">(gm.checkedPossibleMove == </span><span class="s1-90">false</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// pause here till board has finished stabilizing...</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(0.5f); </span><span class="s1-89">// just to calm down from being so fast...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isTimerGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">while</span><span class="si">( convertTime() ){ </span><span class="s1-89">// converts time every second until no more time.</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(0.5f);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isMaxMovesGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">while</span><span class="si">(convertMoves() ){ </span><span class="s1-89">// converts moves every second until no more moves.</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(0.5f);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(popSpecialsBeforeEnd){ </span><span class="s1-89">// the feature is enabled</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">while</span><span class="si">(</span><span class="s1-90">true</span><span class="si">){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">while</span><span class="si">(gm.checkedPossibleMove == </span><span class="s1-90">false</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// pause here till board has finished stabilizing...</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(0.5f); </span><span class="s1-89">// just to calm down from being so fast...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(hasRemainingSpecials()){</span></div>
<div class="l li"><span class="si">                    popASpecialPiece();</span></div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"><span class="sc">                    yield return new WaitForSeconds(gm.gameUpdateSpeed); </span><span class="sd">// wait for gravity</span></div>
<div class="l lc d2"> </div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// the feature is disabled</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">while</span><span class="si">(gm.checkedPossibleMove == </span><span class="s1-90">false</span><span class="si">){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// pause here till board has finished stabilizing...</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(1f); </span><span class="s1-89">// just to calm down from being so fast...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l lc d3"><span class="sc">        yield return new WaitForSeconds(</span><span class="sc2">1f</span><span class="sc">); // just to calm down from being so fast...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        gm.gameState = GameState.GameOver; </span><span class="s1-89">// stops gameManager aswell...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        validateWinLose();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> validateWinLose(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> starStatus = 0; </span><span class="s1-89">// just a little extra star status ( 3 star system game )</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">string</span><span class="si"> starMsg = </span><span class="s1-85">&quot;~You Won~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">            </span><span class="s1-85">&quot;But didn't earn any star...&quot;</span><span class="si">; </span><span class="s1-89">// variable message changes according to star rating...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">bool</span><span class="si"> playerWon = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// initial state</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// check the star status...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.score &gt; scoreMilestone3){</span></div>
<div class="l li"><span class="si">            starStatus = 3;</span></div>
<div class="l li"><span class="si">            starMsg = </span><span class="s1-85">&quot;~You Won~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                </span><span class="s1-85">&quot;Congrats on 3 stars~!!&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(gm.score &gt; scoreMilestone2){</span></div>
<div class="l li"><span class="si">            starStatus = 2;</span></div>
<div class="l li"><span class="si">            starMsg = </span><span class="s1-85">&quot;~You Won~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                </span><span class="s1-85">&quot;Obtained 2 stars~!&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(gm.score &gt; scoreToReach){</span></div>
<div class="l li"><span class="si">            starStatus = 1;</span></div>
<div class="l li"><span class="si">            starMsg = </span><span class="s1-85">&quot;~You Won~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                </span><span class="s1-85">&quot;You earned 1 star!&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isScoreGame &amp;&amp; scoreRequiredWin &amp;&amp; starStatus == 0 ){</span></div>
<div class="l li"><span class="si">            playerWon = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// fail to meet minimum score...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isClearShadedGame &amp;&amp; shadesRequiredWin &amp;&amp; shadesLeft &gt; 0){</span></div>
<div class="l li"><span class="si">            playerWon = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// fail to clear all shades</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isGetTypesGame &amp;&amp; typesRequiredWin &amp;&amp; !collectedAll ){</span></div>
<div class="l li"><span class="si">            playerWon = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// fail to collect all required colors/gems</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isTreasureGame &amp;&amp; treasureRequiredWin &amp;&amp; (numOfTreasures &gt; treasuresCollected) ){</span></div>
<div class="l li"><span class="si">            playerWon = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// fail to collect all treasures</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// game over message in the prefab</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(GameOverMessage != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            Instantiate(GameOverMessage);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(playerWon){ </span><span class="s1-89">// player won...</span></div>
<div class="l li"><span class="si">                GameObject.Find(</span><span class="s1-85">&quot;GameOverMsg&quot;</span><span class="si">).GetComponent&lt;TextMesh&gt;().text = starMsg;</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// player lost...</span></div>
<div class="l li"><span class="si">                GameObject.Find(</span><span class="s1-85">&quot;GameOverMsg&quot;</span><span class="si">).GetComponent&lt;TextMesh&gt;().text = </span></div>
<div class="l li"><span class="si">                    </span><span class="s1-85">&quot;~GAME OVER~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-85">&quot;You failed to achieve\nthe required goals.&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion endgame sequence</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region other functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to convert remaining time to special pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> convertTime(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">((TimeGiven - timeKeeper) &gt;= 1){</span></div>
<div class="l li"><span class="si">            randomSpecialABoard();</span></div>
<div class="l li"><span class="si">            timeKeeper += secondsPerSpecial; </span><span class="s1-89">// convert every x seconds</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// no more time to convert...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to convert remaining moves to special pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> convertMoves(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">((allowedMoves - gm.moves) &gt;= 1){</span></div>
<div class="l li"><span class="si">            randomSpecialABoard();</span></div>
<div class="l li"><span class="si">            allowedMoves -= movesPerSpecial; </span><span class="s1-89">// convert every x moves</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;            </span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// no more moves to convert...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// randomly assign a special to this board</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> randomSpecialABoard(){</span></div>
<div class="l li"><span class="si">        Board selected = getRandomBoard();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// play audio visuals</span></div>
<div class="l li"><span class="si">        gm.audioScript.convertingSpecialFx.play();</span></div>
<div class="l li"><span class="si">        gm.animScript.doAnim(animType.CONVERTSPEC,selected.arrayRef[0],selected.arrayRef[1]);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// get the gameobject reference</span></div>
<div class="l li"><span class="si">        GameObject pm = gm.pieceManager;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(Random.Range(0,3)){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> 0:</span></div>
<div class="l li"><span class="si">            selected.convertToSpecialNoDestroy(pm.GetComponent&lt;HorizontalPiece&gt;(), selected.piece.slotNum ); </span><span class="s1-89">// convert to H-type</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> 1:</span></div>
<div class="l li"><span class="si">            selected.convertToSpecialNoDestroy(pm.GetComponent&lt;VerticalPiece&gt;(), selected.piece.slotNum ); </span><span class="s1-89">// convert to V-type</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> 2:</span></div>
<div class="l li"><span class="si">            selected.convertToSpecialNoDestroy(pm.GetComponent&lt;BombPiece&gt;(), selected.piece.slotNum ); </span><span class="s1-89">// convert to T-type</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    Board getRandomBoard(){ </span><span class="s1-89">// as the title sez, get a random board that is filled...</span></div>
<div class="l li"><span class="si">        Board selected;</span></div>
<div class="l li"><span class="si">        List&lt;Board&gt; randomBoard = </span><span class="s1-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> gm.board){</span></div>
<div class="l li"><span class="si">            randomBoard.Add(_board); </span><span class="s1-89">// a list of all the boards in the game</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(randomBoard.Count &gt; 0){ </span><span class="s1-89">// repeat while list is not empty</span></div>
<div class="l li"><span class="si">            selected = randomBoard[Random.Range(0,randomBoard.Count)];</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(selected.isFilled &amp;&amp; selected.piece.pd </span><span class="s1-90">is</span><span class="si"> NormalPiece) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> selected;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            randomBoard.Remove(selected); </span><span class="s1-89">// remove the board from the list once checked.</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(</span><span class="s1-90">true</span><span class="si">){ </span><span class="s1-89">// contingency plan... choose a non-special powered gem</span></div>
<div class="l li"><span class="si">            selected = gm.board[Random.Range(0,gm.boardWidth),Random.Range(0,gm.boardHeight)];</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(selected.isFilled &amp;&amp; !selected.piece.pd.isSpecial) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> selected;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// method to check if the board still has special pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> hasRemainingSpecials(){</span></div>
<div class="l li"><span class="si">        specialLeftOvers.Clear();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(Board board </span><span class="s1-90">in</span><span class="si"> gm.board){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(board.isFilled &amp;&amp; !(board.pd </span><span class="s1-90">is</span><span class="si"> NormalPiece)</span></div>
<div class="l li"><span class="si">               &amp;&amp; board.pd.isDestructible &amp;&amp; !board.pd.ignorePopSpecial){</span></div>
<div class="l li"><span class="si">                specialLeftOvers.Add(board); </span><span class="s1-89">// add to the special pop list</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(specialLeftOvers.Count &gt; 0){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// method to cause a special piece to trigger it's ability</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> popASpecialPiece(){</span></div>
<div class="l lc d4"><span class="sc">        </span><span class="sc2">specialLeftOvers[</span><span class="sc">Random.Range(0,specialLeftOvers.Count</span><span class="sd">-1</span><span class="sc">)</span><span class="sc2">]</span></div>
<div class="l lc d4"> </div>
<div class="l lc d4"><span class="sc">            .forceDestroyBox(); // force destroys a random special from the list...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to set up the types remaining to get for this game</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> setUpTypes(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(placeholderPanel != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.pieceTypes[0].skin.Length;x++){ </span><span class="s1-89">// creates the visual cue on the panel</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(numToGet[x] &gt; 0 &amp;&amp; x &lt; gm.NumOfActiveType){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// the visual image for player reference (e.g., red gem)</span></div>
<div class="l li"><span class="si">                    GameObject img = (GameObject) Instantiate(gm.pieceTypes[0].skin[x]);</span></div>
<div class="l li"><span class="si">                    img.transform.parent = placeholderPanel.transform;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                    Bounds bounds = JMFUtils.findObjectBounds(img);</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">float</span><span class="si"> val = 2.5f / </span><span class="s1-89">// get the bigger size to keep ratio</span></div>
<div class="l li"><span class="si">                        Mathf.Clamp( Mathf.Max(bounds.size.x,bounds.size.y),0.0000001f,float.MaxValue);</span></div>
<div class="l li"><span class="si">                    img.transform.localScale = (</span><span class="s1-90">new</span><span class="si"> Vector3 (val, val, val )); </span><span class="s1-89">// the final scale value</span></div>
<div class="l li"><span class="si">                    img.transform.localPosition = </span><span class="s1-90">new</span><span class="si"> Vector3 (1,-(count*3+3),0); </span><span class="s1-89">// position going downwards</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// the text object and its position</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(textHolder) desc[x] = ((GameObject) Instantiate(textHolder)).GetComponent&lt;TextMesh&gt;();</span></div>
<div class="l li"><span class="si">                    desc[x].transform.parent = placeholderPanel.transform;</span></div>
<div class="l li"><span class="si">                    desc[x].transform.localPosition = </span><span class="s1-90">new</span><span class="si"> Vector3 (5,-(count*3+3),0); </span><span class="s1-89">// position going downwards</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// warning developers of missing panel reference... </span></div>
<div class="l li"><span class="si">            Debug.LogError(</span><span class="s1-85">&quot;Placeholder panel missing for types... unable to create.&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                </span><span class="s1-85">&quot;Check winning conditions script again!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> canSpawnTreasure(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( isTreasureGame &amp;&amp; (treasuresCollected + treasureList.Count) &lt; numOfTreasures &amp;&amp; </span></div>
<div class="l li"><span class="si">           treasureList.Count &lt; maxOnScreen){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> probability = (</span><span class="s1-90">int</span><span class="si">) (1.0/(chanceToSpawn/100.0) );</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> result = Random.Range( 0 , probability ); </span><span class="s1-89">// random chance to spawn</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( result == 0){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// spawn a treasure</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// cannot spawn...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion other functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region important phases</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// set up the variables</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> Start () {</span></div>
<div class="l li"><span class="si">        gm = GetComponent&lt;GameManager&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// disable those not used...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isTimerGame){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(timeLabel) timeLabel.gameObject.SetActive(</span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(timeText) timeText.gameObject.SetActive(</span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isMaxMovesGame){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(movesLabel != </span><span class="s1-90">null</span><span class="si">) movesLabel.gameObject.SetActive(</span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(movesText != </span><span class="s1-90">null</span><span class="si">) movesText.gameObject.SetActive(</span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isTreasureGame){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(treasureLabel != </span><span class="s1-90">null</span><span class="si">) treasureLabel.gameObject.SetActive(</span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(treasureText != </span><span class="s1-90">null</span><span class="si">) treasureText.gameObject.SetActive(</span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isGetTypesGame){ </span><span class="s1-89">// game type not active... disable panel</span></div>
<div class="l li"><span class="si">            GameObject leftPanel = GameObject.Find(</span><span class="s1-85">&quot;CollectGamePanel&quot;</span><span class="si">); </span><span class="s1-89">// REVISE THE NAME if needed!</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(leftPanel != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                leftPanel.SetActive(</span><span class="s1-90">false</span><span class="si">); </span><span class="s1-89">// disable this panel...</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// tell user the error!</span></div>
<div class="l li"><span class="si">                Debug.LogError(</span><span class="s1-85">&quot;you have moved/renamed the left panel for \&quot;Get types\&quot; game.&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-85">&quot;please revise Winning Conditions script!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// game type is active... set the stuff required!</span></div>
<div class="l li"><span class="si">            setUpTypes();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        StartCoroutine( updateStatus() );</span></div>
<div class="l li"><span class="si">        StartCoroutine( routineCheck() );</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(startGameImmediately) startThisGame();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to start the timer running as well as to call GameManger's start sequence...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> startThisGame(){</span></div>
<div class="l li"><span class="si">        StartCoroutine( timer() );</span></div>
<div class="l li"><span class="si">        gm.StartGame();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion important phases</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="WinningConditions(new).cs"><b>WinningConditions(new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">    </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>
<div class="num">409 </div>
<div class="num">410 </div>
<div class="num">411 </div>
<div class="num">412 </div>
<div class="num">413 </div>
<div class="num">414 </div>
<div class="num">415 </div>
<div class="num">416 </div>
<div class="num">417 </div>
<div class="num">418 </div>
<div class="num">419 </div>
<div class="num">420 </div>
<div class="num">421 </div>
<div class="num">422 </div>
<div class="num">423 </div>
<div class="num">424 </div>
<div class="num">425 </div>
<div class="num">426 </div>
<div class="num">427 </div>
<div class="num">428 </div>
<div class="num">429 </div>
<div class="num">430 </div>
<div class="num">431 </div>
<div class="num">432 </div>
<div class="num">433 </div>
<div class="num">434 </div>
<div class="num">435 </div>
<div class="num">436 </div>
<div class="num">437 </div>
<div class="num">438 </div>
<div class="num">439 </div>
<div class="num">440 </div>
<div class="num">441 </div>
<div class="num">442 </div>
<div class="num">443 </div>
<div class="num">444 </div>
<div class="num">445 </div>
<div class="num">446 </div>
<div class="num">447 </div>
<div class="num">448 </div>
<div class="num">449 </div>
<div class="num">450 </div>
<div class="num">451 </div>
<div class="num">452 </div>
<div class="num">453 </div>
<div class="num">454 </div>
<div class="num">455 </div>
<div class="num">456 </div>
<div class="num">457 </div>
<div class="num">458 </div>
<div class="num">459 </div>
<div class="num">460 </div>
<div class="num">461 </div>
<div class="num">462 </div>
<div class="num">463 </div>
<div class="num">464 </div>
<div class="num">465 </div>
<div class="num">466 </div>
<div class="num">467 </div>
<div class="num">468 </div>
<div class="num">469 </div>
<div class="num">470 </div>
<div class="num">471 </div>
<div class="num">472 </div>
<div class="num">473 </div>
<div class="num">474 </div>
<div class="num">475 </div>
<div class="num">476 </div>
<div class="num">477 </div>
<div class="num">478 </div>
<div class="num">479 </div>
<div class="num">480 </div>
<div class="num">481 </div>
<div class="num">482 </div>
<div class="num">483 </div>
<div class="num">484 </div>
<div class="num">485 </div>
<div class="num">486 </div>
<div class="num">487 </div>
<div class="num">488 </div>
<div class="num">489 </div>
<div class="num">490 </div>
<div class="num">491 </div>
<div class="num">492 </div>
<div class="num">493 </div>
<div class="num">494 </div>
<div class="num">495 </div>
<div class="num">496 </div>
<div class="num">497 </div>
<div class="num">498 </div>
<div class="num">499 </div>
<div class="num">500 </div>
<div class="num">501 </div>
<div class="num">502 </div>
<div class="num">503 </div>
<div class="num">504 </div>
<div class="num">505 </div>
<div class="num">506 </div>
<div class="num">507 </div>
<div class="num">508 </div>
<div class="num">509 </div>
<div class="num">510 </div>
<div class="num">511 </div>
<div class="num">512 </div>
<div class="num">513 </div>
<div class="num">514 </div>
<div class="num">515 </div>
<div class="num">516 </div>
<div class="num">517 </div>
<div class="num">518 </div>
<div class="num">519 </div>
<div class="num">520 </div>
<div class="num">521 </div>
<div class="num">522 </div>
<div class="num">523 </div>
<div class="num">524 </div>
<div class="num">525 </div>
<div class="num">526 </div>
<div class="num">527 </div>
<div class="num">528 </div>
<div class="num">529 </div>
<div class="num">530 </div>
<div class="num">531 </div>
<div class="num">532 </div>
<div class="num">533 </div>
<div class="num">534 </div>
<div class="num">535 </div>
<div class="num">536 </div>
<div class="num">537 </div>
<div class="num">538 </div>
<div class="num">539 </div>
<div class="num">540 </div>
<div class="num">541 </div>
<div class="num">542 </div>
<div class="num">543 </div>
<div class="num">544 </div>
<div class="num">545 </div>
<div class="num">546 </div>
<div class="num">547 </div>
<div class="num">548 </div>
<div class="num">549 </div>
<div class="num">550 </div>
<div class="num">551 </div>
<div class="num">552 </div>
<div class="num">553 </div>
<div class="num">554 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"><span class="s2-89">/// NOTICE :</span></div>
<div class="l li"><span class="s2-89">/// This script is conditions set to win/end the current game.</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> WinningConditions : MonoBehaviour {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Starts the game running when scene loads.\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">             </span><span class="s2-85">&quot;call 'startThisGame()' function yourself if you have other plans.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> startGameImmediately = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> checkSpeed = 1;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> specialTheLeftovers = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> secondsPerSpecial = 5;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> movesPerSpecial = 5;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> popSpecialsBeforeEnd = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l lc d1"><span class="sc">    List&lt;Board&gt; specialLeftOvers = new List&lt;Board&gt;(); </span><span class="sa">// list to hold leftover specials</span></div>
<div class="l lc d1"><span class="sc">    </span><span class="sa">GamePiece popPiece; // the piece selected for popping</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s2-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// timer game</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isTimerGame = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextMesh timeLabel;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextMesh timeText;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> TimeGiven = 120;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s2-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// max move game</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isMaxMovesGame = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextMesh movesLabel;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextMesh movesText;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> allowedMoves = 40;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s2-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// score game</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isScoreGame = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, player must obtain a minimum score of 'scoreToReach'&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> scoreRequiredWin = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, obtaining the minimum score will trigger end-game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> scoreEndsGame = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> scoreToReach = 10000;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> scoreMilestone2 = 20000;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> scoreMilestone3 = 30000;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s2-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// clear shaded game</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isClearShadedGame = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, player must clear all the shaded panels to win.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> shadesRequiredWin = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, clearing all the shaded panels will trigger end-game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> shadesEndsGame = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">int</span><span class="si"> shadesLeft = 1;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s2-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// get type game</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isGetTypesGame = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, player must get all the specified types to win.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> typesRequiredWin = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, getting all the specified types will trigger end-game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> typeEndsGame = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[]numToGet = </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[9];</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject placeholderPanel;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject textHolder;</span></div>
<div class="l li"><span class="si">    TextMesh[] desc = </span><span class="s2-90">new</span><span class="si"> TextMesh[9];</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> collectedAll = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Space(20)] </span><span class="s2-89">// just some seperation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// treasure game</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isTreasureGame = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, player must all the treasures to win.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> treasureRequiredWin = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, getting all the treasures will trigger end-game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> treasureEndsGame = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextMesh treasureLabel;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextMesh treasureText;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> numOfTreasures = 3;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> maxOnScreen = 2;</span></div>
<div class="l li"><span class="si">    [Range(0,30)]</span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> chanceToSpawn = 10;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;Vector2&gt; treasureGoal = </span><span class="s2-90">new</span><span class="si"> List&lt;Vector2&gt;();</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;GamePiece&gt; treasureList = </span><span class="s2-90">new</span><span class="si"> List&lt;GamePiece&gt;();</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> treasuresCollected = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> treasuresSpawned = 0;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject GameOverMessage;</span></div>
<div class="l li"><span class="si">    GameManager gm;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> timeKeeper = 0; </span><span class="s2-89">// just an in-game timer to find out how long the round has been playing..</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> isGameOver = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// Below are properties of interest...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.score   &lt;--- the current score accumulated by the player</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.moves   &lt;--- the total moves the player has made</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.currentCombo    &lt;--- the current combo count of any given move ( will reset to 0 each move )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.maxCombo   &lt;--- the max combo the player has achieved in the gaming round</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.gameState    &lt;--- the status of the GameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.checkedPossibleMove   &lt;--- a boolean that signifies the board has stabilized from the last move</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///                               ( use this when you want the board to stop only after finish combo-ing )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.canMove     &lt;--- a boolean to allow players to move the pieces. true = can move; false = cannot move.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.board[x,y]      &lt;--- use this to reference the board if you needed more board properties</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// gm.matchCount[x]   &lt;--- the count of the type that has been destroyed.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">///</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region routines &amp; related</span></div>
<div class="l li"><span class="si">    IEnumerator updateStatus(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(gm.gameState != GameState.GameOver) {</span><span class="s2-89">// loop infinitely until game over</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// updates the status...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isTimerGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(timeText != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ((TimeGiven - timeKeeper) &gt;= 0){</span></div>
<div class="l li"><span class="si">                        timeText.text = (TimeGiven - timeKeeper).ToString(); </span><span class="s2-89">// outputs the time to the text label</span></div>
<div class="l li"><span class="si">                    }</span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        timeText.text = </span><span class="s2-85">&quot;0&quot;</span><span class="si">; </span><span class="s2-89">// outputs the time to the text label</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="s2-89">//          if(isScoreGame){</span></div>
<div class="l li"><span class="s2-89">//              // score is handled by GameManager and VisualManager</span></div>
<div class="l li"><span class="s2-89">//          }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isMaxMovesGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(movesText != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si"> ((allowedMoves - gm.moves) &gt;= 0){</span></div>
<div class="l li"><span class="si">                        movesText.text = (allowedMoves - gm.moves).ToString(); </span><span class="s2-89">// outputs the time to the text label</span></div>
<div class="l li"><span class="si">                    }</span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        movesText.text = </span><span class="s2-85">&quot;0&quot;</span><span class="si">; </span><span class="s2-89">// outputs the time to the text label</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isClearShadedGame){ </span><span class="s2-89">// updates the 'shadesLeft' variable...</span></div>
<div class="l li"><span class="si">                shadesLeft = 0;</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(Board board </span><span class="s2-90">in</span><span class="si"> gm.board){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">foreach</span><span class="si">(PanelInfo pi </span><span class="s2-90">in</span><span class="si"> board.panel.pi){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(pi.pnd </span><span class="s2-90">is</span><span class="si"> ShadedPanel){</span></div>
<div class="l li"><span class="si">                            shadesLeft+= pi.durability; </span><span class="s2-89">// increase count as this is a shaded panel</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isGetTypesGame){ </span><span class="s2-89">// updates the 'collectedAll' variable...</span></div>
<div class="l li"><span class="si">                collectedAll = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.pieceTypes[0].skin.Length;x++){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(numToGet[x] &gt; 0 &amp;&amp; x &lt; gm.NumOfActiveType){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">int</span><span class="si"> val = numToGet[x] - gm.matchCount[x]; </span><span class="s2-89">// num of remaining pieces to collect</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(val &gt; 0){</span></div>
<div class="l li"><span class="si">                            desc[x].text =  val.ToString() + </span><span class="s2-85">&quot; left&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span><span class="s2-90">else</span><span class="si">{</span></div>
<div class="l li"><span class="si">                            desc[x].text = </span><span class="s2-85">&quot;0 left&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(x &lt; gm.NumOfActiveType &amp;&amp; !(gm.matchCount[x] &gt;= numToGet[x] ) ){</span></div>
<div class="l li"><span class="si">                        collectedAll = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// still got pieces to collect...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// function to collect treasure as well as update the status...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isTreasureGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(Vector2 pos </span><span class="s2-90">in</span><span class="si"> treasureGoal){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">foreach</span><span class="si">(GamePiece gp </span><span class="s2-90">in</span><span class="si"> treasureList){ </span><span class="s2-89">// loop each treasure piece</span></div>
<div class="l li"><span class="si">                        Vector2 temp = </span><span class="s2-90">new</span><span class="si"> Vector2(gp.master.arrayRef[0],gp.master.arrayRef[1]);</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(temp == pos &amp;&amp; !gp.master.isFalling){</span></div>
<div class="l li"><span class="si">                            treasuresCollected++; </span><span class="s2-89">// increase collected count</span></div>
<div class="l li"><span class="si">                            gp.pd.onPieceDestroyed(gp); </span><span class="s2-89">// the destroy call for treasure object</span></div>
<div class="l li"><span class="si">                            gp.removePiece(); </span><span class="s2-89">// destroy the treasure</span></div>
<div class="l li"><span class="si">                            treasureList.Remove(gp); </span><span class="s2-89">// remove from the list</span></div>
<div class="l li"><span class="si">                            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(treasureText != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    treasureText.text = (numOfTreasures - treasuresCollected).ToString();</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(checkSpeed); </span><span class="s2-89">// wait for the refresh speed</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    IEnumerator routineCheck(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(!isGameOver) {</span><span class="s2-89">// loop infinitely until game over</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// perform the checks</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isTimerGame){</span></div>
<div class="l li"><span class="si">                checkTime();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isMaxMovesGame){</span></div>
<div class="l li"><span class="si">                checkMoves();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isScoreGame &amp;&amp; scoreEndsGame){</span></div>
<div class="l li"><span class="si">                checkScore();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isClearShadedGame &amp;&amp; shadesEndsGame){</span></div>
<div class="l li"><span class="si">                checkShaded();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isGetTypesGame &amp;&amp; typeEndsGame){</span></div>
<div class="l li"><span class="si">                checkNumsOfType();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isTreasureGame &amp;&amp; treasureEndsGame){</span></div>
<div class="l li"><span class="si">                checkTreasures();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(checkSpeed); </span><span class="s2-89">// wait for the refresh speed</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    IEnumerator timer(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(!isGameOver) {</span><span class="s2-89">// loop infinitely until game over</span></div>
<div class="l li"><span class="si">            timeKeeper++; </span><span class="s2-89">// timer increase in time</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(1f); </span><span class="s2-89">// ticks every second...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check the time</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> checkTime(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( TimeGiven &lt;= timeKeeper ){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver());</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to compare score</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> checkScore(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( gm.score &gt; scoreToReach ){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver());</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to compare moves left</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> checkMoves(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(  gm.moves &gt;= allowedMoves){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver());</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check whether there are any shaded panels left...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> checkShaded(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( shadesLeft == 0){ </span><span class="s2-89">// when no shaded panels are found, game over</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver());</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check whether the number of types to get is reached...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> checkNumsOfType(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(collectedAll){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver()); </span><span class="s2-89">// collected all, initiate game over</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check that the player has collected all treasures</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> checkTreasures(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(treasuresCollected == numOfTreasures){</span></div>
<div class="l li"><span class="si">            StartCoroutine(gameOver()); </span><span class="s2-89">// collected all, initiate game over</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion routines &amp; related</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region endgame sequence</span></div>
<div class="l li"><span class="si">    IEnumerator gameOver(){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        gm.audioScript.gameOverSoundFx.play(); </span><span class="s2-89">// play the game over fx</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        gm.canMove = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// player not allowed to move anymore</span></div>
<div class="l li"><span class="si">        gm.gameState = GameState.GameFinalizing; </span><span class="s2-89">// game in finalizing mode...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        isGameOver = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// game over, all routine loops will be disabled</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(1f); </span><span class="s2-89">// wait for board to finish its routine actions</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(specialTheLeftovers){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">while</span><span class="si">(gm.checkedPossibleMove == </span><span class="s2-90">false</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// pause here till board has finished stabilizing...</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(0.5f); </span><span class="s2-89">// just to calm down from being so fast...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isTimerGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">while</span><span class="si">( convertTime() ){ </span><span class="s2-89">// converts time every second until no more time.</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(0.5f);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isMaxMovesGame){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">while</span><span class="si">(convertMoves() ){ </span><span class="s2-89">// converts moves every second until no more moves.</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(0.5f);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(popSpecialsBeforeEnd){ </span><span class="s2-89">// the feature is enabled</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">while</span><span class="si">(</span><span class="s2-90">true</span><span class="si">){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">while</span><span class="si">(gm.checkedPossibleMove == </span><span class="s2-90">false</span><span class="si">){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// pause here till board has finished stabilizing...</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(0.5f); </span><span class="s2-89">// just to calm down from being so fast...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(hasRemainingSpecials()){</span></div>
<div class="l li"><span class="si">                    popASpecialPiece();</span></div>
<div class="l lc d2"><span class="sc">                    </span><span class="sa">while(popPiece != null &amp;&amp; popPiece.pd != null){</span></div>
<div class="l lc d2"><span class="sc">                        </span><span class="sa">yield return new WaitForSeconds(0.5f); // just to calm down from being so fast...</span></div>
<div class="l lc d2"><span class="sc">                    </span><span class="sa">}</span></div>
<div class="l lc d2"><span class="sc">                    </span><span class="sa">// wait for gravity</span></div>
<div class="l lc d2"><span class="sc">                    </span><span class="sa">if(gm.delayedGravity){ // delay according to timers just to calm down from being so fast...</span></div>
<div class="l lc d2"><span class="sc">                        </span><span class="sa">yield return new WaitForSeconds((gm.gameUpdateSpeed + gm.gravityDelayTime)*1.5f);</span></div>
<div class="l lc d2"><span class="sc">                    </span><span class="sa">} else {</span></div>
<div class="l lc d2"><span class="sc">                        yield return new WaitForSeconds(gm.gameUpdateSpeed</span><span class="sa">*1.5f</span><span class="sc">);</span></div>
<div class="l lc d2"><span class="sc">                    </span><span class="sa">}</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// the feature is disabled</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">while</span><span class="si">(gm.checkedPossibleMove == </span><span class="s2-90">false</span><span class="si">){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// pause here till board has finished stabilizing...</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(1f); </span><span class="s2-89">// just to calm down from being so fast...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l lc d3"><span class="sc">        yield return new WaitForSeconds(</span><span class="sc2">0</span><span class="sa">.5f</span><span class="sc">); // just to calm down from being so fast...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        gm.gameState = GameState.GameOver; </span><span class="s2-89">// stops gameManager aswell...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        validateWinLose();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> validateWinLose(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> starStatus = 0; </span><span class="s2-89">// just a little extra star status ( 3 star system game )</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">string</span><span class="si"> starMsg = </span><span class="s2-85">&quot;~You Won~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">            </span><span class="s2-85">&quot;But didn't earn any star...&quot;</span><span class="si">; </span><span class="s2-89">// variable message changes according to star rating...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">bool</span><span class="si"> playerWon = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// initial state</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// check the star status...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.score &gt; scoreMilestone3){</span></div>
<div class="l li"><span class="si">            starStatus = 3;</span></div>
<div class="l li"><span class="si">            starMsg = </span><span class="s2-85">&quot;~You Won~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                </span><span class="s2-85">&quot;Congrats on 3 stars~!!&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(gm.score &gt; scoreMilestone2){</span></div>
<div class="l li"><span class="si">            starStatus = 2;</span></div>
<div class="l li"><span class="si">            starMsg = </span><span class="s2-85">&quot;~You Won~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                </span><span class="s2-85">&quot;Obtained 2 stars~!&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(gm.score &gt; scoreToReach){</span></div>
<div class="l li"><span class="si">            starStatus = 1;</span></div>
<div class="l li"><span class="si">            starMsg = </span><span class="s2-85">&quot;~You Won~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                </span><span class="s2-85">&quot;You earned 1 star!&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isScoreGame &amp;&amp; scoreRequiredWin &amp;&amp; starStatus == 0 ){</span></div>
<div class="l li"><span class="si">            playerWon = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// fail to meet minimum score...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isClearShadedGame &amp;&amp; shadesRequiredWin &amp;&amp; shadesLeft &gt; 0){</span></div>
<div class="l li"><span class="si">            playerWon = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// fail to clear all shades</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isGetTypesGame &amp;&amp; typesRequiredWin &amp;&amp; !collectedAll ){</span></div>
<div class="l li"><span class="si">            playerWon = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// fail to collect all required colors/gems</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isTreasureGame &amp;&amp; treasureRequiredWin &amp;&amp; (numOfTreasures &gt; treasuresCollected) ){</span></div>
<div class="l li"><span class="si">            playerWon = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// fail to collect all treasures</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// game over message in the prefab</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(GameOverMessage != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            Instantiate(GameOverMessage);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(playerWon){ </span><span class="s2-89">// player won...</span></div>
<div class="l li"><span class="si">                GameObject.Find(</span><span class="s2-85">&quot;GameOverMsg&quot;</span><span class="si">).GetComponent&lt;TextMesh&gt;().text = starMsg;</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// player lost...</span></div>
<div class="l li"><span class="si">                GameObject.Find(</span><span class="s2-85">&quot;GameOverMsg&quot;</span><span class="si">).GetComponent&lt;TextMesh&gt;().text =</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-85">&quot;~GAME OVER~\n&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-85">&quot;You failed to achieve\nthe required goals.&quot;</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion endgame sequence</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region other functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to convert remaining time to special pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> convertTime(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">((TimeGiven - timeKeeper) &gt;= 1){</span></div>
<div class="l li"><span class="si">            randomSpecialABoard();</span></div>
<div class="l li"><span class="si">            timeKeeper += secondsPerSpecial; </span><span class="s2-89">// convert every x seconds</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// no more time to convert...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to convert remaining moves to special pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> convertMoves(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">((allowedMoves - gm.moves) &gt;= 1){</span></div>
<div class="l li"><span class="si">            randomSpecialABoard();</span></div>
<div class="l li"><span class="si">            allowedMoves -= movesPerSpecial; </span><span class="s2-89">// convert every x moves</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// no more moves to convert...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// randomly assign a special to this board</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> randomSpecialABoard(){</span></div>
<div class="l li"><span class="si">        Board selected = getRandomBoard();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// play audio visuals</span></div>
<div class="l li"><span class="si">        gm.audioScript.convertingSpecialFx.play();</span></div>
<div class="l li"><span class="si">        gm.animScript.doAnim(animType.CONVERTSPEC,selected.arrayRef[0],selected.arrayRef[1]);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// get the gameobject reference</span></div>
<div class="l li"><span class="si">        GameObject pm = gm.pieceManager;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(Random.Range(0,3)){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> 0:</span></div>
<div class="l li"><span class="si">            selected.convertToSpecialNoDestroy(pm.GetComponent&lt;HorizontalPiece&gt;(), selected.piece.slotNum ); </span><span class="s2-89">// convert to H-type</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> 1:</span></div>
<div class="l li"><span class="si">            selected.convertToSpecialNoDestroy(pm.GetComponent&lt;VerticalPiece&gt;(), selected.piece.slotNum ); </span><span class="s2-89">// convert to V-type</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> 2:</span></div>
<div class="l li"><span class="si">            selected.convertToSpecialNoDestroy(pm.GetComponent&lt;BombPiece&gt;(), selected.piece.slotNum ); </span><span class="s2-89">// convert to T-type</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    Board getRandomBoard(){ </span><span class="s2-89">// as the title sez, get a random board that is filled...</span></div>
<div class="l li"><span class="si">        Board selected;</span></div>
<div class="l li"><span class="si">        List&lt;Board&gt; randomBoard = </span><span class="s2-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> gm.board){</span></div>
<div class="l li"><span class="si">            randomBoard.Add(_board); </span><span class="s2-89">// a list of all the boards in the game</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(randomBoard.Count &gt; 0){ </span><span class="s2-89">// repeat while list is not empty</span></div>
<div class="l li"><span class="si">            selected = randomBoard[Random.Range(0,randomBoard.Count)];</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(selected.isFilled &amp;&amp; selected.piece.pd </span><span class="s2-90">is</span><span class="si"> NormalPiece) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> selected;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            randomBoard.Remove(selected); </span><span class="s2-89">// remove the board from the list once checked.</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(</span><span class="s2-90">true</span><span class="si">){ </span><span class="s2-89">// contingency plan... choose a non-special powered gem</span></div>
<div class="l li"><span class="si">            selected = gm.board[Random.Range(0,gm.boardWidth),Random.Range(0,gm.boardHeight)];</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(selected.isFilled &amp;&amp; !selected.piece.pd.isSpecial) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> selected;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// method to check if the board still has special pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> hasRemainingSpecials(){</span></div>
<div class="l li"><span class="si">        specialLeftOvers.Clear();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(Board board </span><span class="s2-90">in</span><span class="si"> gm.board){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(board.isFilled &amp;&amp; !(board.pd </span><span class="s2-90">is</span><span class="si"> NormalPiece)</span></div>
<div class="l li"><span class="si">               &amp;&amp; board.pd.isDestructible &amp;&amp; !board.pd.ignorePopSpecial){</span></div>
<div class="l li"><span class="si">                specialLeftOvers.Add(board); </span><span class="s2-89">// add to the special pop list</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(specialLeftOvers.Count &gt; 0){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// method to cause a special piece to trigger it's ability</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> popASpecialPiece(){</span></div>
<div class="l lc d4"><span class="sc">        </span><span class="sc2">int selected</span><span class="sc"> </span><span class="sa">=</span><span class="sc"> Random.Range(0,specialLeftOvers.Count)</span><span class="sc2">;</span></div>
<div class="l lc d4"><span class="sc">        </span><span class="sa">popPiece = specialLeftOvers[selected].piece;</span></div>
<div class="l lc d4"><span class="sc">        </span><span class="sa">specialLeftOvers[selected]</span><span class="sc">.forceDestroyBox(); // force destroys a random special from the list...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to set up the types remaining to get for this game</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> setUpTypes(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(placeholderPanel != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.pieceTypes[0].skin.Length;x++){ </span><span class="s2-89">// creates the visual cue on the panel</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(numToGet[x] &gt; 0 &amp;&amp; x &lt; gm.NumOfActiveType){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// the visual image for player reference (e.g., red gem)</span></div>
<div class="l li"><span class="si">                    GameObject img = (GameObject) Instantiate(gm.pieceTypes[0].skin[x]);</span></div>
<div class="l li"><span class="si">                    img.transform.parent = placeholderPanel.transform;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                    Bounds bounds = JMFUtils.findObjectBounds(img);</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">float</span><span class="si"> val = 2.5f / </span><span class="s2-89">// get the bigger size to keep ratio</span></div>
<div class="l li"><span class="si">                        Mathf.Clamp( Mathf.Max(bounds.size.x,bounds.size.y),0.0000001f,float.MaxValue);</span></div>
<div class="l li"><span class="si">                    img.transform.localScale = (</span><span class="s2-90">new</span><span class="si"> Vector3 (val, val, val )); </span><span class="s2-89">// the final scale value</span></div>
<div class="l li"><span class="si">                    img.transform.localPosition = </span><span class="s2-90">new</span><span class="si"> Vector3 (1,-(count*3+3),0); </span><span class="s2-89">// position going downwards</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// the text object and its position</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(textHolder) desc[x] = ((GameObject) Instantiate(textHolder)).GetComponent&lt;TextMesh&gt;();</span></div>
<div class="l li"><span class="si">                    desc[x].transform.parent = placeholderPanel.transform;</span></div>
<div class="l li"><span class="si">                    desc[x].transform.localPosition = </span><span class="s2-90">new</span><span class="si"> Vector3 (5,-(count*3+3),0); </span><span class="s2-89">// position going downwards</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// warning developers of missing panel reference...</span></div>
<div class="l li"><span class="si">            Debug.LogError(</span><span class="s2-85">&quot;Placeholder panel missing for types... unable to create.&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                </span><span class="s2-85">&quot;Check winning conditions script again!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> canSpawnTreasure(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( isTreasureGame &amp;&amp; (treasuresCollected + treasureList.Count) &lt; numOfTreasures &amp;&amp;</span></div>
<div class="l li"><span class="si">           treasureList.Count &lt; maxOnScreen){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> probability = (</span><span class="s2-90">int</span><span class="si">) (1.0/(chanceToSpawn/100.0) );</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> result = Random.Range( 0 , probability ); </span><span class="s2-89">// random chance to spawn</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( result == 0){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// spawn a treasure</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// cannot spawn...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion other functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region important phases</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// set up the variables</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> Start () {</span></div>
<div class="l li"><span class="si">        gm = GetComponent&lt;GameManager&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// disable those not used...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isTimerGame){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(timeLabel) timeLabel.gameObject.SetActive(</span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(timeText) timeText.gameObject.SetActive(</span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isMaxMovesGame){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(movesLabel != </span><span class="s2-90">null</span><span class="si">) movesLabel.gameObject.SetActive(</span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(movesText != </span><span class="s2-90">null</span><span class="si">) movesText.gameObject.SetActive(</span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isTreasureGame){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(treasureLabel != </span><span class="s2-90">null</span><span class="si">) treasureLabel.gameObject.SetActive(</span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(treasureText != </span><span class="s2-90">null</span><span class="si">) treasureText.gameObject.SetActive(</span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isGetTypesGame){ </span><span class="s2-89">// game type not active... disable panel</span></div>
<div class="l li"><span class="si">            GameObject leftPanel = GameObject.Find(</span><span class="s2-85">&quot;CollectGamePanel&quot;</span><span class="si">); </span><span class="s2-89">// REVISE THE NAME if needed!</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(leftPanel != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                leftPanel.SetActive(</span><span class="s2-90">false</span><span class="si">); </span><span class="s2-89">// disable this panel...</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// tell user the error!</span></div>
<div class="l li"><span class="si">                Debug.LogError(</span><span class="s2-85">&quot;you have moved/renamed the left panel for \&quot;Get types\&quot; game.&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-85">&quot;please revise Winning Conditions script!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// game type is active... set the stuff required!</span></div>
<div class="l li"><span class="si">            setUpTypes();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        StartCoroutine( updateStatus() );</span></div>
<div class="l li"><span class="si">        StartCoroutine( routineCheck() );</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(startGameImmediately) startThisGame();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to start the timer running as well as to call GameManger's start sequence...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> startThisGame(){</span></div>
<div class="l li"><span class="si">        StartCoroutine( timer() );</span></div>
<div class="l li"><span class="si">        gm.StartGame();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion important phases</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs">Number of differences: <b>4</b></div><div id="colors"><div class="sa" title="0 added lines and 15 inline additions in changed lines">Added(0,15)</div><div class="sd" title="0 deleted lines and 2 inline deletions in changed lines">Deleted(0,2)</div><div class="sc" title="15 changed lines">Changed(15)</div><div class="sc2" title="3 inline changes in changed lines">Changed in changed(3)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on May 22, 2015, 3:59 AM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 7.0.1.4.
    </div>
</div>
</body>

</html>

