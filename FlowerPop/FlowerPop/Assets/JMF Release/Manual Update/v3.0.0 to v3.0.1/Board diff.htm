<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 7.0.1.4 -->
<!-- saved from url=(0014)about:internet -->

<head>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0;height: 13px;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2080px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2080
    var $diffs = [
null,
{d:'Diff 1: Add 1 line (523, second file) after line 522 (first file)',l:[522,522]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="Board(old).cs"><b>Board(old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>
<div class="num">409 </div>
<div class="num">410 </div>
<div class="num">411 </div>
<div class="num">412 </div>
<div class="num">413 </div>
<div class="num">414 </div>
<div class="num">415 </div>
<div class="num">416 </div>
<div class="num">417 </div>
<div class="num">418 </div>
<div class="num">419 </div>
<div class="num">420 </div>
<div class="num">421 </div>
<div class="num">422 </div>
<div class="num">423 </div>
<div class="num">424 </div>
<div class="num">425 </div>
<div class="num">426 </div>
<div class="num">427 </div>
<div class="num">428 </div>
<div class="num">429 </div>
<div class="num">430 </div>
<div class="num">431 </div>
<div class="num">432 </div>
<div class="num">433 </div>
<div class="num">434 </div>
<div class="num">435 </div>
<div class="num">436 </div>
<div class="num">437 </div>
<div class="num">438 </div>
<div class="num">439 </div>
<div class="num">440 </div>
<div class="num">441 </div>
<div class="num">442 </div>
<div class="num">443 </div>
<div class="num">444 </div>
<div class="num">445 </div>
<div class="num">446 </div>
<div class="num">447 </div>
<div class="num">448 </div>
<div class="num">449 </div>
<div class="num">450 </div>
<div class="num">451 </div>
<div class="num">452 </div>
<div class="num">453 </div>
<div class="num">454 </div>
<div class="num">455 </div>
<div class="num">456 </div>
<div class="num">457 </div>
<div class="num">458 </div>
<div class="num">459 </div>
<div class="num">460 </div>
<div class="num">461 </div>
<div class="num">462 </div>
<div class="num">463 </div>
<div class="num">464 </div>
<div class="num">465 </div>
<div class="num">466 </div>
<div class="num">467 </div>
<div class="num">468 </div>
<div class="num">469 </div>
<div class="num">470 </div>
<div class="num">471 </div>
<div class="num">472 </div>
<div class="num">473 </div>
<div class="num">474 </div>
<div class="num">475 </div>
<div class="num">476 </div>
<div class="num">477 </div>
<div class="num">478 </div>
<div class="num">479 </div>
<div class="num">480 </div>
<div class="num">481 </div>
<div class="num">482 </div>
<div class="num">483 </div>
<div class="num">484 </div>
<div class="num">485 </div>
<div class="num">486 </div>
<div class="num">487 </div>
<div class="num">488 </div>
<div class="num">489 </div>
<div class="num">490 </div>
<div class="num">491 </div>
<div class="num">492 </div>
<div class="num">493 </div>
<div class="num">494 </div>
<div class="num">495 </div>
<div class="num">496 </div>
<div class="num">497 </div>
<div class="num">498 </div>
<div class="num">499 </div>
<div class="num">500 </div>
<div class="num">501 </div>
<div class="num">502 </div>
<div class="num">503 </div>
<div class="num">504 </div>
<div class="num">505 </div>
<div class="num">506 </div>
<div class="num">507 </div>
<div class="num">508 </div>
<div class="num">509 </div>
<div class="num">510 </div>
<div class="num">511 </div>
<div class="num">512 </div>
<div class="num">513 </div>
<div class="num">514 </div>
<div class="num">515 </div>
<div class="num">516 </div>
<div class="num">517 </div>
<div class="num">518 </div>
<div class="num">519 </div>
<div class="num">520 </div>
<div class="num">521 </div>
<div class="num">522 </div>
<div class="num">    </div>
<div class="num">523 </div>
<div class="num">524 </div>
<div class="num">525 </div>
<div class="num">526 </div>
<div class="num">527 </div>
<div class="num">528 </div>
<div class="num">529 </div>
<div class="num">530 </div>
<div class="num">531 </div>
<div class="num">532 </div>
<div class="num">533 </div>
<div class="num">534 </div>
<div class="num">535 </div>
<div class="num">536 </div>
<div class="num">537 </div>
<div class="num">538 </div>
<div class="num">539 </div>
<div class="num">540 </div>
<div class="num">541 </div>
<div class="num">542 </div>
<div class="num">543 </div>
<div class="num">544 </div>
<div class="num">545 </div>
<div class="num">546 </div>
<div class="num">547 </div>
<div class="num">548 </div>
<div class="num">549 </div>
<div class="num">550 </div>
<div class="num">551 </div>
<div class="num">552 </div>
<div class="num">553 </div>
<div class="num">554 </div>
<div class="num">555 </div>
<div class="num">556 </div>
<div class="num">557 </div>
<div class="num">558 </div>
<div class="num">559 </div>
<div class="num">560 </div>
<div class="num">561 </div>
<div class="num">562 </div>
<div class="num">563 </div>
<div class="num">564 </div>
<div class="num">565 </div>
<div class="num">566 </div>
<div class="num">567 </div>
<div class="num">568 </div>
<div class="num">569 </div>
<div class="num">570 </div>
<div class="num">571 </div>
<div class="num">572 </div>
<div class="num">573 </div>
<div class="num">574 </div>
<div class="num">575 </div>
<div class="num">576 </div>
<div class="num">577 </div>
<div class="num">578 </div>
<div class="num">579 </div>
<div class="num">580 </div>
<div class="num">581 </div>
<div class="num">582 </div>
<div class="num">583 </div>
<div class="num">584 </div>
<div class="num">585 </div>
<div class="num">586 </div>
<div class="num">587 </div>
<div class="num">588 </div>
<div class="num">589 </div>
<div class="num">590 </div>
<div class="num">591 </div>
<div class="num">592 </div>
<div class="num">593 </div>
<div class="num">594 </div>
<div class="num">595 </div>
<div class="num">596 </div>
<div class="num">597 </div>
<div class="num">598 </div>
<div class="num">599 </div>
<div class="num">600 </div>
<div class="num">601 </div>
<div class="num">602 </div>
<div class="num">603 </div>
<div class="num">604 </div>
<div class="num">605 </div>
<div class="num">606 </div>
<div class="num">607 </div>
<div class="num">608 </div>
<div class="num">609 </div>
<div class="num">610 </div>
<div class="num">611 </div>
<div class="num">612 </div>
<div class="num">613 </div>
<div class="num">614 </div>
<div class="num">615 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s1-89">///</span></div>
<div class="l li"><span class="s1-89">/// NOTICE :</span></div>
<div class="l li"><span class="s1-89">/// This script is the Board class.</span></div>
<div class="l li"><span class="s1-89">/// It is the board position on the screen that will control whether pieces</span></div>
<div class="l li"><span class="s1-89">/// or panels appear or not. It is the the container for GamePieces and BoardPanel.</span></div>
<div class="l li"><span class="s1-89">///</span></div>
<div class="l li"><span class="s1-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s1-89">///</span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"><span class="s1-89">///</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">// enum for board direction</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> BoardDirection{Top,Bottom,Left,Right,BottomRight,BottomLeft,TopLeft,TopRight,Null}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> Board { </span><span class="s1-89">// the game board as individual boxes</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region variables</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector3 position; </span><span class="s1-89">// board position on the GUI (world position)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector3 localPos; </span><span class="s1-89">// board position (local position)</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isFalling = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// states whether the piece is falling into position</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// states whether it was active since the last routine check</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isBeingDelayed = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// state for the board performing the gravity delay</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> mustWait = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// state that the board must wait for the gravity delay</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] arrayRef; </span><span class="s1-89">// to know its array number for reference</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// board neighbours</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Board top,bottom,left,right,topLeft,topRight,bottomLeft,bottomRight;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;Board&gt; allNeighbourBoards = </span><span class="s1-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameManager gm; </span><span class="s1-89">// this script as a reference</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// GamePiece related</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">//================================</span></div>
<div class="l li"><span class="si">    GamePiece _piece; </span><span class="s1-89">// the hidden control variable for GamePiece</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> ignoreNotifyOnce = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GamePiece piece{ </span><span class="s1-89">// the game piece that is linked to this board</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> _piece; }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">set</span><span class="si">{</span></div>
<div class="l li"><span class="si">            _piece = </span><span class="s1-90">value</span><span class="si">; </span><span class="s1-89">// sets the piece</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!ignoreNotifyOnce)gm.notifyBoardHasChanged(); </span><span class="s1-89">// board has changed...</span></div>
<div class="l li"><span class="si">            ignoreNotifyOnce = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// resets after each call...</span></div>
<div class="l li"><span class="si">            isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// make this board active for check due to new piece</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(_piece != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                _piece.master = </span><span class="s1-90">this</span><span class="si">; </span><span class="s1-89">// auto set the master of this piece</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }}</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> PieceDefinition pd { </span><span class="s1-89">// gets the embeded piece definition quickly if it exists</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(isFilled){ </span><span class="s1-90">return</span><span class="si"> piece.pd;} </span><span class="s1-89">// returns the embeded pd</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">null</span><span class="si">;} </span><span class="s1-89">// no valid pd here...</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-89">// set { } // restricted to read-only</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> justCreated { </span><span class="s1-89">// for match create power piece so that it doesnt get destroyed instantly</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">if</span><span class="si">(isFilled)</span><span class="s1-90">return</span><span class="si"> piece.justCreated; </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;}</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">set</span><span class="si">{</span><span class="s1-90">if</span><span class="si">(isFilled) piece.justCreated = </span><span class="s1-90">value</span><span class="si">;} }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Panels related</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> BoardPanel panel; </span><span class="s1-89">// the panel that is linked to this board</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> HUDPopUp scoreHUD; </span><span class="s1-89">// as the scoreHUD reference</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isFilled { </span><span class="s1-89">//= false; // determines if there is a piece on this board</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(piece == </span><span class="s1-90">null</span><span class="si"> || piece.pd == </span><span class="s1-90">null</span><span class="si">){ </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;} </span><span class="s1-89">// no piece here, is not filled</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;} </span><span class="s1-89">// piece exist, isFilled...</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-89">// set { } // restricted to read-only</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> PanelDefinition pnd { </span><span class="s1-89">// gets the embeded panel definition quickly...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> panel.pnd; </span><span class="s1-89">// returns the embeded pnd</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-89">// set { } // restricted to read-only</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// SUB-Panels related</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// gets the reference from the GameManager variable holder</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel subPanelTop {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> gm.subPanelV[arrayRef[0],arrayRef[1]+1];}}</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel subPanelBottom {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> gm.subPanelV[arrayRef[0],arrayRef[1]];}}</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel subPanelLeft {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> gm.subPanelH[arrayRef[0],arrayRef[1],0];}}</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel subPanelRight {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1],0];}}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel subPanelTopLeft {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> gm.subPanelH[arrayRef[0],arrayRef[1]+1,1];}}</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel subPanelBottomLeft {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> gm.subPanelH[arrayRef[0],arrayRef[1],0];}}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel subPanelTopRight {</span><span class="s1-90">get</span><span class="si">{</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(arrayRef[0]%2 == 1){ </span><span class="s1-89">// hex correction only; compensate for hex squiggly line</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1],0];</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1]+1,0];}}}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel subPanelBottomRight {</span><span class="s1-90">get</span><span class="si">{</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(arrayRef[0]%2 == 1){ </span><span class="s1-89">// hex correction only; compensate for hex squiggly line</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1],1];</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1]+1,1];}}}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;SubBoardPanel&gt; allSubPanels = </span><span class="s1-90">new</span><span class="si"> List&lt;SubBoardPanel&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion variables</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Board(GameManager gameManager, </span><span class="s1-90">int</span><span class="si">[] boardPosition, Vector3 pos) {</span></div>
<div class="l li"><span class="si">        gm = gameManager;</span></div>
<div class="l li"><span class="si">        arrayRef = boardPosition; </span><span class="s1-89">// to help it remember it's position in the array</span></div>
<div class="l li"><span class="si">        localPos = pos;</span></div>
<div class="l li"><span class="si">        position = gm.transform.TransformPoint(pos);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// scoreHUD display setup</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(JMFUtils.vm.scoreHUD != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            GameObject scoreHUDObj  = (GameObject) Object.Instantiate(JMFUtils.vm.scoreHUD);</span></div>
<div class="l li"><span class="si">            scoreHUDObj.transform.parent = gm.gameObject.transform;</span></div>
<div class="l li"><span class="si">            scoreHUDObj.transform.position = position;</span></div>
<div class="l li"><span class="si">            scoreHUD = scoreHUDObj.GetComponent&lt;HUDPopUp&gt;();</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(scoreHUD == </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                Debug.Log(</span><span class="s1-85">&quot;scoreHUD 'HUDPopUp' script missing from prefab~!!&quot;</span><span class="si">); </span><span class="s1-89">// tell developers the problem</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s1-85">&quot;No scoreHUD prefab detected...&quot;</span><span class="si">); </span><span class="s1-89">// tell developers the problem</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        setupPanelsAndPieces();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> setupPanelsAndPieces(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default piece and panel</span></div>
<div class="l li"><span class="si">        piece = </span><span class="s1-90">new</span><span class="si"> GamePiece(gm.pieceTypes[0], </span><span class="s1-90">this</span><span class="si">, gm.ranType(), position);</span></div>
<div class="l li"><span class="si">        panel = </span><span class="s1-90">new</span><span class="si"> BoardPanel(gm.panelTypes[0],0,</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to sync the reference between board &lt;-&gt; Pieces &lt;-&gt; Panels &lt;-&gt; SubPanels</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> syncReference(){</span></div>
<div class="l li"><span class="si">        piece.master = </span><span class="s1-90">this</span><span class="si">;</span></div>
<div class="l li"><span class="si">        panel.master = </span><span class="s1-90">this</span><span class="si">;</span></div>
<div class="l li"><span class="si">        syncSubPanelReference(); </span><span class="s1-89">// syncs the subPanel masters too~</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> refreshBoardPosition(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">            localPos = </span><span class="s1-90">new</span><span class="si"> Vector3( arrayRef[0] - (gm.boardWidth/2.0f) + 0.5f,</span></div>
<div class="l li"><span class="si">                                   arrayRef[1] -(gm.boardHeight/2.0f) + 0.5f, 0) * gm.size;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(arrayRef[0]%2 == 0){ </span><span class="s1-89">// displacement for hexagon type</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                localPos = </span><span class="s1-90">new</span><span class="si"> Vector3( (arrayRef[0] - (gm.boardWidth/2.0f) + 0.5f)*0.865f,</span></div>
<div class="l li"><span class="si">                                       arrayRef[1] -(gm.boardHeight/2.0f) + 0.75f, 0) * gm.size;</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                localPos = </span><span class="s1-90">new</span><span class="si"> Vector3( (arrayRef[0] - (gm.boardWidth/2.0f) + 0.5f)*0.865f,</span></div>
<div class="l li"><span class="si">                                       arrayRef[1] -(gm.boardHeight/2.0f) + 0.25f, 0) * gm.size;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        position = gm.transform.TransformPoint(localPos);</span></div>
<div class="l li"><span class="si">        scoreHUD.transform.position = position;</span></div>
<div class="l li"><span class="si">        scoreHUD.Awake(); </span><span class="s1-89">// refresh the HUD scaler as well</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isFilled){</span></div>
<div class="l li"><span class="si">            piece.position = position;</span></div>
<div class="l li"><span class="si">            piece.dressMe();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        panel.createPanels();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to init all the required stuff during OnStart()</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> init(){</span></div>
<div class="l li"><span class="si">        piece.init(); </span><span class="s1-89">// init piece (game objects are created now...)</span></div>
<div class="l li"><span class="si">        panel.initPanels(); </span><span class="s1-89">// init panels (game objects are created now...)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onGameStart(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// call the GameStart() for custom pieces and panels</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(piece != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; piece.pd != </span><span class="s1-90">null</span><span class="si">) piece.pd.onGameStart(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(panel != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; panel.pnd != </span><span class="s1-90">null</span><span class="si">) panel.pnd.onGameStart(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region neighbouring boards codes</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// Neighbouring Boards codes</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to help convert the enum to the appropriate board reference</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Board boardEnumToReference(BoardDirection bd){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(bd){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.Top :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> top;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.Bottom :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> bottom;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.Left :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> left;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.Right :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> right;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.TopLeft :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> topLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.TopRight :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> topRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.BottomLeft :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> bottomLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.BottomRight :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> bottomRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// neighbouring function to get the direction from a board reference</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> BoardDirection neighbourBoardToEnum(Board bRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(BoardDirection searchBd </span><span class="s1-90">in</span><span class="si"> System.Enum.GetValues(</span><span class="s1-90">typeof</span><span class="si">(BoardDirection))){ </span><span class="s1-89">// try each enum</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(boardEnumToReference(searchBd) == bRef){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> searchBd; </span><span class="s1-89">// return the enum</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> BoardDirection.Null;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// neighbouring function to get a board in this specific direction and distance</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Board getBoardFromDirection(BoardDirection bd, </span><span class="s1-90">int</span><span class="si"> distance){</span></div>
<div class="l li"><span class="si">        Board target = boardEnumToReference(bd); </span><span class="s1-89">// initial</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 1; x &lt; distance; x++){ </span><span class="s1-89">// recursively find the board in the specified direction</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(target == </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// no board here... do not continue...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            target = target.boardEnumToReference(bd);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> target;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// neighbouring function to get all boards in this specific direction</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;Board&gt; getAllBoardInDirection(BoardDirection bd){</span></div>
<div class="l li"><span class="si">        List&lt;Board&gt; list = </span><span class="s1-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"><span class="si">        Board chain = boardEnumToReference(bd);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(chain != </span><span class="s1-90">null</span><span class="si">){ </span><span class="s1-89">// recursively add the boards in the specified direction</span></div>
<div class="l li"><span class="si">            list.Add(chain);</span></div>
<div class="l li"><span class="si">            chain = chain.boardEnumToReference(bd);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> list; </span><span class="s1-89">// returns the list of boards in the direction</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to set the neighbour of this board</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> initNeighbourReferences(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// board position in x &amp; y reference</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> x = arrayRef[0];</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> y = arrayRef[1];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// null the references first</span></div>
<div class="l li"><span class="si">        top = bottom = left = right = topLeft = topRight = bottomLeft = bottomRight = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(y+1 &lt; gm.boardHeight) {</span></div>
<div class="l li"><span class="si">            top = gm.board[x,y+1]; </span><span class="s1-89">// top reference</span></div>
<div class="l li"><span class="si">            allNeighbourBoards.Add(top); </span><span class="s1-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(y-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">            bottom = gm.board[x,y-1]; </span><span class="s1-89">// bottom reference</span></div>
<div class="l li"><span class="si">            allNeighbourBoards.Add(bottom); </span><span class="s1-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.boardType == BoardType.Square){ </span><span class="s1-89">// exclusive to square types only</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                right = gm.board[x+1,y]; </span><span class="s1-89">// right reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(right); </span><span class="s1-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                left = gm.board[x-1,y]; </span><span class="s1-89">// left reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(left); </span><span class="s1-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// TODO diagonal square neighbours disabled in JMFP</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.boardType == BoardType.Square ){ </span><span class="s1-89">// square mode references</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(y-1 &gt;= 0 &amp;&amp; x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                bottomRight = gm.board[x+1,y-1]; </span><span class="s1-89">// bottomRight reference</span></div>
<div class="l li"><span class="s1-89">//              allNeighbourBoards.Add(bottomRight); // add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(y-1 &gt;= 0 &amp;&amp; x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                bottomLeft = gm.board[x-1,y-1]; </span><span class="s1-89">// bottomRight reference</span></div>
<div class="l li"><span class="s1-89">//              allNeighbourBoards.Add(bottomLeft); // add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(y+1 &lt; gm.boardHeight &amp;&amp; x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                topRight = gm.board[x+1,y+1]; </span><span class="s1-89">// bottomRight reference</span></div>
<div class="l li"><span class="s1-89">//              allNeighbourBoards.Add(topRight); // add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(y+1 &lt; gm.boardHeight &amp;&amp; x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                topLeft = gm.board[x-1,y+1]; </span><span class="s1-89">// bottomRight reference</span></div>
<div class="l li"><span class="s1-89">//              allNeighbourBoards.Add(topLeft); // add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.boardType == BoardType.Hexagon){ </span><span class="s1-89">// exclusive to Hexagon mode only</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> refY = y; </span><span class="s1-89">// initial value of y</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(x%2 == 1){ </span><span class="s1-89">// hex correction only</span></div>
<div class="l li"><span class="si">                refY = y-1; </span><span class="s1-89">// compensate for hex squiggly line</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(refY &gt;= 0 &amp;&amp; refY &lt; gm.boardHeight &amp;&amp; x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                bottomRight = gm.board[x+1,refY]; </span><span class="s1-89">// bottomRight reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(bottomRight); </span><span class="s1-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(refY &gt;= 0 &amp;&amp; refY &lt; gm.boardHeight &amp;&amp; x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                bottomLeft = gm.board[x-1,refY]; </span><span class="s1-89">// bottomRight reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(bottomLeft); </span><span class="s1-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(refY+1 &gt;= 0 &amp;&amp; (refY+1) &lt; gm.boardHeight &amp;&amp; x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                topRight = gm.board[x+1,refY+1]; </span><span class="s1-89">// bottomRight reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(topRight); </span><span class="s1-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(refY+1 &gt;= 0 &amp;&amp; (refY+1) &lt; gm.boardHeight &amp;&amp; x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                topLeft = gm.board[x-1,refY+1]; </span><span class="s1-89">// bottomRight reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(topLeft); </span><span class="s1-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion neighbouring boards codes</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Sub Panels</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// Sub Panels codes</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to sync the reference between board &lt;-&gt; subPanels</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> syncSubPanelReference(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">            subPanelBottom.masters[1] = subPanelTop.masters[0] =</span></div>
<div class="l li"><span class="si">                subPanelLeft.masters[1] = subPanelRight.masters[0] = </span><span class="s1-90">this</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            subPanelBottom.spt = subPanelTop.spt = SubPanelType.Horizontal;</span></div>
<div class="l li"><span class="si">            subPanelLeft.spt = subPanelRight.spt = SubPanelType.Vertical;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelTop); allSubPanels.Add(subPanelBottom);</span></div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelLeft); allSubPanels.Add(subPanelRight);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            subPanelBottom.masters[1] = subPanelTop.masters[0] =</span></div>
<div class="l li"><span class="si">                subPanelTopLeft.masters[1] = subPanelBottomRight.masters[0] =</span></div>
<div class="l li"><span class="si">                    subPanelBottomLeft.masters[1] = subPanelTopRight.masters[0] = </span><span class="s1-90">this</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            subPanelBottom.spt = subPanelTop.spt = SubPanelType.Horizontal;</span></div>
<div class="l li"><span class="si">            subPanelTopLeft.spt = subPanelBottomRight.spt = SubPanelType.TLBR;</span></div>
<div class="l li"><span class="si">            subPanelTopRight.spt = subPanelBottomLeft.spt = SubPanelType.TRBL;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelTop); allSubPanels.Add(subPanelBottom);</span></div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelTopLeft); allSubPanels.Add(subPanelBottomRight);</span></div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelTopRight); allSubPanels.Add(subPanelBottomLeft);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to get the related subPanel given a neighour Board...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel getSubPanelBetween(Board neighbour){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> getSubPanelFrom( neighbourBoardToEnum(neighbour) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to get the related subPanel given a BoardDirection...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubBoardPanel getSubPanelFrom(BoardDirection bd){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(bd){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.Top :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> subPanelTop;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.Bottom :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> subPanelBottom;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.Left :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> subPanelLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.Right :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> subPanelRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.TopLeft :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> subPanelTopLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.TopRight :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> subPanelTopRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.BottomLeft :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> subPanelBottomLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardDirection.BottomRight :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> subPanelBottomRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Sub Panels</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// Panel stuff</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> panelHit(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">bool</span><span class="si"> token = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(SubBoardPanel _sbp </span><span class="s1-90">in</span><span class="si"> allSubPanels){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(_sbp.gotHit()) token = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( panel.gotHit() || token ) {</span></div>
<div class="l li"><span class="si">            isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// panel activity registered, set board active for checks</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// piece and panel splash damage call</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> SplashDamage(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// panel splash call</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si"> ( panel.splashDamage() ) {</span></div>
<div class="l li"><span class="si">            isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// panel activity registered, set board active for checks</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// piece splash call</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isFilled){</span></div>
<div class="l li"><span class="si">            piece.pd.splashDamage(</span><span class="s1-90">this</span><span class="si">); </span><span class="s1-89">// function call ( if any )</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// Others</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// destroy the piece in this board</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyBox () {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!justCreated &amp;&amp; panel.isDestructible() &amp;&amp; isFilled &amp;&amp; !piece.markedForDestroy) {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( piece.pd.isDestructible ){ </span><span class="s1-89">// valid for destroy</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(piece.pd.performPower(arrayRef) ) { </span><span class="s1-89">// if true, mark for delayed destroy</span></div>
<div class="l li"><span class="si">                    piece.markedForDestroy = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!piece.markedForDestroy){ </span><span class="s1-89">// if not marked for delayed destroy, destroy immediately</span></div>
<div class="l li"><span class="si">                    piece.pd.splashDamage(</span><span class="s1-90">this</span><span class="si">); </span><span class="s1-89">// virtual function call ( if any )</span></div>
<div class="l li"><span class="si">                    piece.destroy();</span></div>
<div class="l li"><span class="si">                    isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    panelHit(); </span><span class="s1-89">// reduce panel durability ( if possible )</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                panelHit(); </span><span class="s1-89">// reduce panel durability ( if possible )</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// destroy the piece in this board</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> forceDestroyBox () {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isFilled &amp;&amp; !piece.markedForDestroy){ </span><span class="s1-89">// valid for destroy</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(piece.pd.performPower(arrayRef) ) { </span><span class="s1-89">// if true, mark for delayed destroy</span></div>
<div class="l li"><span class="si">                piece.markedForDestroy = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!piece.markedForDestroy){ </span><span class="s1-89">// if not marked for delayed destroy, destroy immediately</span></div>
<div class="l li"><span class="si">                piece.destroy();</span></div>
<div class="l li"><span class="si">                isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                panelHit(); </span><span class="s1-89">// reduce panel durability ( if possible )</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// for external scripts to call, signify that it is time to destroy it after being delayed...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyMarked(){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(piece != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            piece.markedForDestroy = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            piece.destroy();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        panelHit(); </span><span class="s1-89">// reduce panel durability ( if possible )</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED METHOD for easy use parameters :)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> convertToSpecial(System.Type pd) {</span></div>
<div class="l li"><span class="si">        convertToSpecial(gm.pieceManager.GetComponent(pd) </span><span class="s1-90">as</span><span class="si"> PieceDefinition);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// converts a piece to another pieceDefinition</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> convertToSpecial(PieceDefinition pd) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isFilled){</span></div>
<div class="l li"><span class="si">            piece.pd.performPower(arrayRef); </span><span class="s1-89">// trigger specials if any</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        piece.destroy();</span></div>
<div class="l li"><span class="si">        piece.specialMe(pd);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED METHOD for easy use parameters :)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> convertToSpecial(System.Type pd, </span><span class="s1-90">int</span><span class="si"> newSlotNum) {</span></div>
<div class="l li"><span class="si">        convertToSpecial(gm.pieceManager.GetComponent(pd) </span><span class="s1-90">as</span><span class="si"> PieceDefinition,newSlotNum);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// converts a piece to another pieceDefinition with defined skin</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> convertToSpecial(PieceDefinition pd, </span><span class="s1-90">int</span><span class="si"> newSlotNum) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isFilled){</span></div>
<div class="l li"><span class="si">            piece.pd.performPower(arrayRef); </span><span class="s1-89">// trigger specials if any</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        piece.destroy();</span></div>
<div class="l li"><span class="si">        piece.slotNum = newSlotNum;</span></div>
<div class="l li"><span class="si">        piece.specialMe(pd);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED METHOD for easy use parameters :)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> convertToSpecialNoDestroy(System.Type pd, </span><span class="s1-90">int</span><span class="si"> newSlotNum) {</span></div>
<div class="l li"><span class="si">        convertToSpecialNoDestroy(gm.pieceManager.GetComponent(pd) </span><span class="s1-90">as</span><span class="si"> PieceDefinition,newSlotNum);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// converts a piece that is here to be a special piece</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> convertToSpecialNoDestroy(PieceDefinition pd, </span><span class="s1-90">int</span><span class="si"> newSlotNum) {</span></div>
<div class="l li"><span class="si">        piece.removePiece();</span></div>
<div class="l li"><span class="si">        piece.slotNum = newSlotNum;</span></div>
<div class="l li"><span class="si">        piece.specialMe(pd);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED METHOD for easy use parameters :)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setSpecialPiece(System.Type pd) {</span></div>
<div class="l li"><span class="si">        setSpecialPiece(gm.pieceManager.GetComponent(pd) </span><span class="s1-90">as</span><span class="si"> PieceDefinition);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// sets the piece that is here to be a special piece</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setSpecialPiece(PieceDefinition pd) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(panel.pnd.hasStartingPiece){</span></div>
<div class="l li"><span class="si">            piece.removePiece();</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(pd.isSpecial){ </span><span class="s1-89">// if it's a special type, define the appropriate skin</span></div>
<div class="l li"><span class="si">                piece.slotNum = pd.skinToUseDuringSpawn(arrayRef[0],arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            piece.pd = pd; </span><span class="s1-89">// sets the pd type</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// reset the board when no more moves</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> reset(PieceDefinition pd, </span><span class="s1-90">int</span><span class="si"> skinNum) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(panel.isFillable()){ </span><span class="s1-89">// if the panel can hold a game piece</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si"> (isFilled){</span></div>
<div class="l li"><span class="si">                piece.resetMe(pd, skinNum); </span><span class="s1-89">// reset it</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// game piece was stolen by another board and the reference is wrong. create a new piece</span></div>
<div class="l li"><span class="si">                piece = </span><span class="s1-90">new</span><span class="si"> GamePiece(pd, </span><span class="s1-90">this</span><span class="si">, skinNum, position);</span></div>
<div class="l li"><span class="si">                piece.init();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l la d1"> </div>
<div class="l li"><span class="si">            isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to determine if pieces are allowed to be stolen by other boards</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> allowGravity() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si"> ( panel.isStealable() &amp;&amp; isFilled &amp;&amp; !isFalling &amp;&amp; piece.pd.allowGravity ) {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to determine if this board requires a piece replacement when empty</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> replacementNeeded() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si"> ( panel.allowsGravity() &amp;&amp; !isBeingDelayed &amp;&amp; !isFilled &amp;&amp; !isFalling ) {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// call function to determine if the board is ready to be matched by 'MatchCheck()' in GameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> canBeMatched(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(panel.isMatchable() &amp;&amp; !justCreated &amp;&amp; !isFalling &amp;&amp; isFilled</span></div>
<div class="l li"><span class="si">           &amp;&amp; !piece.markedForDestroy &amp;&amp; !piece.pd.isSpecial){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// call function to determine if the board is ready to be matched by 'MatchCheck()' in GameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> canBeMatched(SubBoardPanel subPanelRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(subPanelRef.isMatchable() &amp;&amp; panel.isMatchable() &amp;&amp; !justCreated &amp;&amp; !isFalling &amp;&amp; isFilled</span></div>
<div class="l li"><span class="si">           &amp;&amp; !piece.markedForDestroy &amp;&amp; !piece.pd.isSpecial){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// to spawn a new object dropping out of the box by gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> spawnNew(PieceDefinition pd, Vector3 pos, </span><span class="s1-90">float</span><span class="si"> dropSpeed, </span><span class="s1-90">int</span><span class="si"> skinNum) {</span></div>
<div class="l li"><span class="si">        piece = </span><span class="s1-90">new</span><span class="si"> GamePiece(pd, </span><span class="s1-90">this</span><span class="si">, skinNum, position - pos);</span></div>
<div class="l li"><span class="si">        piece.init();</span></div>
<div class="l li"><span class="si">        applyTweening(dropSpeed);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// spawn a new piece on the board itself (appear mode) which scales from small to big</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> spawnNewAppear(PieceDefinition pd, </span><span class="s1-90">float</span><span class="si"> appearSpeed, </span><span class="s1-90">int</span><span class="si"> skinNum) {</span></div>
<div class="l li"><span class="si">        piece = </span><span class="s1-90">new</span><span class="si"> GamePiece(pd, </span><span class="s1-90">this</span><span class="si">, skinNum, position);</span></div>
<div class="l li"><span class="si">        piece.init();</span></div>
<div class="l li"><span class="si">        LeanTween.cancel(piece.thisPiece); </span><span class="s1-89">// cancel any active tweens on this object</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">float</span><span class="si"> scaleSize = 0;</span></div>
<div class="l li"><span class="si">        scaleSize = piece.thisPiece.transform.localScale.x;</span></div>
<div class="l li"><span class="si">        piece.thisPiece.transform.localScale = Vector3.zero; </span><span class="s1-89">// appear from scale 0</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        LeanTween.value(piece.thisPiece, appearTweeningSubFunction,0f,scaleSize,appearSpeed).setOnUpdateParam(piece.thisPiece);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the function for leanTween to scale the piece for appear mode</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> appearTweeningSubFunction(</span><span class="s1-90">float</span><span class="si"> val, </span><span class="s1-90">object</span><span class="si"> go){</span></div>
<div class="l li"><span class="si">        ((GameObject) go).transform.localScale = </span><span class="s1-90">new</span><span class="si"> Vector3(val,val,val);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// moves the pieces on the GUI for visual feedback</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> applyTweening(</span><span class="s1-90">float</span><span class="si"> dropSpeed){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isFilled){</span></div>
<div class="l li"><span class="si">            isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// likely destroyed by other powers already before it managed to tween, reset the board</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        piece.position = this.position; </span><span class="s1-89">// sync the position data</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(piece.thisPiece != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            piece.thisPiece.GetComponent&lt;PieceTracker&gt;().arrayRef = arrayRef;</span></div>
<div class="l li"><span class="si">            LeanTween.cancel(piece.thisPiece, piece.extraEffectID);</span></div>
<div class="l li"><span class="si">            Vector3 movePos = position;</span></div>
<div class="l li"><span class="si">            movePos.z = piece.thisPiece.transform.position.z; </span><span class="s1-89">// ensure the Z order stays when tweening</span></div>
<div class="l li"><span class="si">            LeanTween.move( piece.thisPiece, movePos ,dropSpeed);</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// likely destroyed by other powers already before it managed to tween, reset the board</span></div>
<div class="l li"><span class="si">            isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// special effects tweening...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> applyTweeningAfterEffects(</span><span class="s1-90">float</span><span class="si"> effectSpeed, Vector3[] path){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isFilled &amp;&amp; piece.thisPiece != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// play the visual effect</span></div>
<div class="l li"><span class="si">            piece.extraEffectID = LeanTween.move(  piece.thisPiece, path, effectSpeed).id;</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// likely destroyed by other powers already before it managed to tween, reset the board</span></div>
<div class="l li"><span class="si">            isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">} </span><span class="s1-89">// end of Board class</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="Board(new).cs"><b>Board(new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>
<div class="num">409 </div>
<div class="num">410 </div>
<div class="num">411 </div>
<div class="num">412 </div>
<div class="num">413 </div>
<div class="num">414 </div>
<div class="num">415 </div>
<div class="num">416 </div>
<div class="num">417 </div>
<div class="num">418 </div>
<div class="num">419 </div>
<div class="num">420 </div>
<div class="num">421 </div>
<div class="num">422 </div>
<div class="num">423 </div>
<div class="num">424 </div>
<div class="num">425 </div>
<div class="num">426 </div>
<div class="num">427 </div>
<div class="num">428 </div>
<div class="num">429 </div>
<div class="num">430 </div>
<div class="num">431 </div>
<div class="num">432 </div>
<div class="num">433 </div>
<div class="num">434 </div>
<div class="num">435 </div>
<div class="num">436 </div>
<div class="num">437 </div>
<div class="num">438 </div>
<div class="num">439 </div>
<div class="num">440 </div>
<div class="num">441 </div>
<div class="num">442 </div>
<div class="num">443 </div>
<div class="num">444 </div>
<div class="num">445 </div>
<div class="num">446 </div>
<div class="num">447 </div>
<div class="num">448 </div>
<div class="num">449 </div>
<div class="num">450 </div>
<div class="num">451 </div>
<div class="num">452 </div>
<div class="num">453 </div>
<div class="num">454 </div>
<div class="num">455 </div>
<div class="num">456 </div>
<div class="num">457 </div>
<div class="num">458 </div>
<div class="num">459 </div>
<div class="num">460 </div>
<div class="num">461 </div>
<div class="num">462 </div>
<div class="num">463 </div>
<div class="num">464 </div>
<div class="num">465 </div>
<div class="num">466 </div>
<div class="num">467 </div>
<div class="num">468 </div>
<div class="num">469 </div>
<div class="num">470 </div>
<div class="num">471 </div>
<div class="num">472 </div>
<div class="num">473 </div>
<div class="num">474 </div>
<div class="num">475 </div>
<div class="num">476 </div>
<div class="num">477 </div>
<div class="num">478 </div>
<div class="num">479 </div>
<div class="num">480 </div>
<div class="num">481 </div>
<div class="num">482 </div>
<div class="num">483 </div>
<div class="num">484 </div>
<div class="num">485 </div>
<div class="num">486 </div>
<div class="num">487 </div>
<div class="num">488 </div>
<div class="num">489 </div>
<div class="num">490 </div>
<div class="num">491 </div>
<div class="num">492 </div>
<div class="num">493 </div>
<div class="num">494 </div>
<div class="num">495 </div>
<div class="num">496 </div>
<div class="num">497 </div>
<div class="num">498 </div>
<div class="num">499 </div>
<div class="num">500 </div>
<div class="num">501 </div>
<div class="num">502 </div>
<div class="num">503 </div>
<div class="num">504 </div>
<div class="num">505 </div>
<div class="num">506 </div>
<div class="num">507 </div>
<div class="num">508 </div>
<div class="num">509 </div>
<div class="num">510 </div>
<div class="num">511 </div>
<div class="num">512 </div>
<div class="num">513 </div>
<div class="num">514 </div>
<div class="num">515 </div>
<div class="num">516 </div>
<div class="num">517 </div>
<div class="num">518 </div>
<div class="num">519 </div>
<div class="num">520 </div>
<div class="num">521 </div>
<div class="num">522 </div>
<div class="num">523 </div>
<div class="num">524 </div>
<div class="num">525 </div>
<div class="num">526 </div>
<div class="num">527 </div>
<div class="num">528 </div>
<div class="num">529 </div>
<div class="num">530 </div>
<div class="num">531 </div>
<div class="num">532 </div>
<div class="num">533 </div>
<div class="num">534 </div>
<div class="num">535 </div>
<div class="num">536 </div>
<div class="num">537 </div>
<div class="num">538 </div>
<div class="num">539 </div>
<div class="num">540 </div>
<div class="num">541 </div>
<div class="num">542 </div>
<div class="num">543 </div>
<div class="num">544 </div>
<div class="num">545 </div>
<div class="num">546 </div>
<div class="num">547 </div>
<div class="num">548 </div>
<div class="num">549 </div>
<div class="num">550 </div>
<div class="num">551 </div>
<div class="num">552 </div>
<div class="num">553 </div>
<div class="num">554 </div>
<div class="num">555 </div>
<div class="num">556 </div>
<div class="num">557 </div>
<div class="num">558 </div>
<div class="num">559 </div>
<div class="num">560 </div>
<div class="num">561 </div>
<div class="num">562 </div>
<div class="num">563 </div>
<div class="num">564 </div>
<div class="num">565 </div>
<div class="num">566 </div>
<div class="num">567 </div>
<div class="num">568 </div>
<div class="num">569 </div>
<div class="num">570 </div>
<div class="num">571 </div>
<div class="num">572 </div>
<div class="num">573 </div>
<div class="num">574 </div>
<div class="num">575 </div>
<div class="num">576 </div>
<div class="num">577 </div>
<div class="num">578 </div>
<div class="num">579 </div>
<div class="num">580 </div>
<div class="num">581 </div>
<div class="num">582 </div>
<div class="num">583 </div>
<div class="num">584 </div>
<div class="num">585 </div>
<div class="num">586 </div>
<div class="num">587 </div>
<div class="num">588 </div>
<div class="num">589 </div>
<div class="num">590 </div>
<div class="num">591 </div>
<div class="num">592 </div>
<div class="num">593 </div>
<div class="num">594 </div>
<div class="num">595 </div>
<div class="num">596 </div>
<div class="num">597 </div>
<div class="num">598 </div>
<div class="num">599 </div>
<div class="num">600 </div>
<div class="num">601 </div>
<div class="num">602 </div>
<div class="num">603 </div>
<div class="num">604 </div>
<div class="num">605 </div>
<div class="num">606 </div>
<div class="num">607 </div>
<div class="num">608 </div>
<div class="num">609 </div>
<div class="num">610 </div>
<div class="num">611 </div>
<div class="num">612 </div>
<div class="num">613 </div>
<div class="num">614 </div>
<div class="num">615 </div>
<div class="num">616 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"><span class="s2-89">/// NOTICE :</span></div>
<div class="l li"><span class="s2-89">/// This script is the Board class.</span></div>
<div class="l li"><span class="s2-89">/// It is the board position on the screen that will control whether pieces</span></div>
<div class="l li"><span class="s2-89">/// or panels appear or not. It is the the container for GamePieces and BoardPanel.</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"><span class="s2-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">// enum for board direction</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> BoardDirection{Top,Bottom,Left,Right,BottomRight,BottomLeft,TopLeft,TopRight,Null}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> Board { </span><span class="s2-89">// the game board as individual boxes</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region variables</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector3 position; </span><span class="s2-89">// board position on the GUI (world position)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector3 localPos; </span><span class="s2-89">// board position (local position)</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isFalling = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// states whether the piece is falling into position</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// states whether it was active since the last routine check</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isBeingDelayed = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// state for the board performing the gravity delay</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> mustWait = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// state that the board must wait for the gravity delay</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] arrayRef; </span><span class="s2-89">// to know its array number for reference</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// board neighbours</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Board top,bottom,left,right,topLeft,topRight,bottomLeft,bottomRight;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;Board&gt; allNeighbourBoards = </span><span class="s2-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameManager gm; </span><span class="s2-89">// this script as a reference</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// GamePiece related</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">//================================</span></div>
<div class="l li"><span class="si">    GamePiece _piece; </span><span class="s2-89">// the hidden control variable for GamePiece</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> ignoreNotifyOnce = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GamePiece piece{ </span><span class="s2-89">// the game piece that is linked to this board</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> _piece; }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">set</span><span class="si">{</span></div>
<div class="l li"><span class="si">            _piece = </span><span class="s2-90">value</span><span class="si">; </span><span class="s2-89">// sets the piece</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!ignoreNotifyOnce)gm.notifyBoardHasChanged(); </span><span class="s2-89">// board has changed...</span></div>
<div class="l li"><span class="si">            ignoreNotifyOnce = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// resets after each call...</span></div>
<div class="l li"><span class="si">            isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// make this board active for check due to new piece</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(_piece != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                _piece.master = </span><span class="s2-90">this</span><span class="si">; </span><span class="s2-89">// auto set the master of this piece</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }}</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> PieceDefinition pd { </span><span class="s2-89">// gets the embeded piece definition quickly if it exists</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(isFilled){ </span><span class="s2-90">return</span><span class="si"> piece.pd;} </span><span class="s2-89">// returns the embeded pd</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">null</span><span class="si">;} </span><span class="s2-89">// no valid pd here...</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-89">// set { } // restricted to read-only</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> justCreated { </span><span class="s2-89">// for match create power piece so that it doesnt get destroyed instantly</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">if</span><span class="si">(isFilled)</span><span class="s2-90">return</span><span class="si"> piece.justCreated; </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;}</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">set</span><span class="si">{</span><span class="s2-90">if</span><span class="si">(isFilled) piece.justCreated = </span><span class="s2-90">value</span><span class="si">;} }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Panels related</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> BoardPanel panel; </span><span class="s2-89">// the panel that is linked to this board</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> HUDPopUp scoreHUD; </span><span class="s2-89">// as the scoreHUD reference</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isFilled { </span><span class="s2-89">//= false; // determines if there is a piece on this board</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(piece == </span><span class="s2-90">null</span><span class="si"> || piece.pd == </span><span class="s2-90">null</span><span class="si">){ </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;} </span><span class="s2-89">// no piece here, is not filled</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;} </span><span class="s2-89">// piece exist, isFilled...</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-89">// set { } // restricted to read-only</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> PanelDefinition pnd { </span><span class="s2-89">// gets the embeded panel definition quickly...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> panel.pnd; </span><span class="s2-89">// returns the embeded pnd</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-89">// set { } // restricted to read-only</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// SUB-Panels related</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">//================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// gets the reference from the GameManager variable holder</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel subPanelTop {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> gm.subPanelV[arrayRef[0],arrayRef[1]+1];}}</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel subPanelBottom {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> gm.subPanelV[arrayRef[0],arrayRef[1]];}}</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel subPanelLeft {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> gm.subPanelH[arrayRef[0],arrayRef[1],0];}}</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel subPanelRight {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1],0];}}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel subPanelTopLeft {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> gm.subPanelH[arrayRef[0],arrayRef[1]+1,1];}}</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel subPanelBottomLeft {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> gm.subPanelH[arrayRef[0],arrayRef[1],0];}}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel subPanelTopRight {</span><span class="s2-90">get</span><span class="si">{</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(arrayRef[0]%2 == 1){ </span><span class="s2-89">// hex correction only; compensate for hex squiggly line</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1],0];</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1]+1,0];}}}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel subPanelBottomRight {</span><span class="s2-90">get</span><span class="si">{</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(arrayRef[0]%2 == 1){ </span><span class="s2-89">// hex correction only; compensate for hex squiggly line</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1],1];</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-90">return</span><span class="si"> gm.subPanelH[arrayRef[0]+1,arrayRef[1]+1,1];}}}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;SubBoardPanel&gt; allSubPanels = </span><span class="s2-90">new</span><span class="si"> List&lt;SubBoardPanel&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion variables</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Board(GameManager gameManager, </span><span class="s2-90">int</span><span class="si">[] boardPosition, Vector3 pos) {</span></div>
<div class="l li"><span class="si">        gm = gameManager;</span></div>
<div class="l li"><span class="si">        arrayRef = boardPosition; </span><span class="s2-89">// to help it remember it's position in the array</span></div>
<div class="l li"><span class="si">        localPos = pos;</span></div>
<div class="l li"><span class="si">        position = gm.transform.TransformPoint(pos);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// scoreHUD display setup</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(JMFUtils.vm.scoreHUD != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            GameObject scoreHUDObj  = (GameObject) Object.Instantiate(JMFUtils.vm.scoreHUD);</span></div>
<div class="l li"><span class="si">            scoreHUDObj.transform.parent = gm.gameObject.transform;</span></div>
<div class="l li"><span class="si">            scoreHUDObj.transform.position = position;</span></div>
<div class="l li"><span class="si">            scoreHUD = scoreHUDObj.GetComponent&lt;HUDPopUp&gt;();</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(scoreHUD == </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                Debug.Log(</span><span class="s2-85">&quot;scoreHUD 'HUDPopUp' script missing from prefab~!!&quot;</span><span class="si">); </span><span class="s2-89">// tell developers the problem</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s2-85">&quot;No scoreHUD prefab detected...&quot;</span><span class="si">); </span><span class="s2-89">// tell developers the problem</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        setupPanelsAndPieces();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> setupPanelsAndPieces(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default piece and panel</span></div>
<div class="l li"><span class="si">        piece = </span><span class="s2-90">new</span><span class="si"> GamePiece(gm.pieceTypes[0], </span><span class="s2-90">this</span><span class="si">, gm.ranType(), position);</span></div>
<div class="l li"><span class="si">        panel = </span><span class="s2-90">new</span><span class="si"> BoardPanel(gm.panelTypes[0],0,</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to sync the reference between board &lt;-&gt; Pieces &lt;-&gt; Panels &lt;-&gt; SubPanels</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> syncReference(){</span></div>
<div class="l li"><span class="si">        piece.master = </span><span class="s2-90">this</span><span class="si">;</span></div>
<div class="l li"><span class="si">        panel.master = </span><span class="s2-90">this</span><span class="si">;</span></div>
<div class="l li"><span class="si">        syncSubPanelReference(); </span><span class="s2-89">// syncs the subPanel masters too~</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> refreshBoardPosition(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">            localPos = </span><span class="s2-90">new</span><span class="si"> Vector3( arrayRef[0] - (gm.boardWidth/2.0f) + 0.5f,</span></div>
<div class="l li"><span class="si">                                   arrayRef[1] -(gm.boardHeight/2.0f) + 0.5f, 0) * gm.size;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(arrayRef[0]%2 == 0){ </span><span class="s2-89">// displacement for hexagon type</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                localPos = </span><span class="s2-90">new</span><span class="si"> Vector3( (arrayRef[0] - (gm.boardWidth/2.0f) + 0.5f)*0.865f,</span></div>
<div class="l li"><span class="si">                                       arrayRef[1] -(gm.boardHeight/2.0f) + 0.75f, 0) * gm.size;</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                localPos = </span><span class="s2-90">new</span><span class="si"> Vector3( (arrayRef[0] - (gm.boardWidth/2.0f) + 0.5f)*0.865f,</span></div>
<div class="l li"><span class="si">                                       arrayRef[1] -(gm.boardHeight/2.0f) + 0.25f, 0) * gm.size;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        position = gm.transform.TransformPoint(localPos);</span></div>
<div class="l li"><span class="si">        scoreHUD.transform.position = position;</span></div>
<div class="l li"><span class="si">        scoreHUD.Awake(); </span><span class="s2-89">// refresh the HUD scaler as well</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isFilled){</span></div>
<div class="l li"><span class="si">            piece.position = position;</span></div>
<div class="l li"><span class="si">            piece.dressMe();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        panel.createPanels();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to init all the required stuff during OnStart()</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> init(){</span></div>
<div class="l li"><span class="si">        piece.init(); </span><span class="s2-89">// init piece (game objects are created now...)</span></div>
<div class="l li"><span class="si">        panel.initPanels(); </span><span class="s2-89">// init panels (game objects are created now...)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onGameStart(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// call the GameStart() for custom pieces and panels</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(piece != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; piece.pd != </span><span class="s2-90">null</span><span class="si">) piece.pd.onGameStart(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(panel != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; panel.pnd != </span><span class="s2-90">null</span><span class="si">) panel.pnd.onGameStart(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region neighbouring boards codes</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// Neighbouring Boards codes</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to help convert the enum to the appropriate board reference</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Board boardEnumToReference(BoardDirection bd){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(bd){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.Top :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> top;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.Bottom :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> bottom;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.Left :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> left;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.Right :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> right;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.TopLeft :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> topLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.TopRight :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> topRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.BottomLeft :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> bottomLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.BottomRight :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> bottomRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// neighbouring function to get the direction from a board reference</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> BoardDirection neighbourBoardToEnum(Board bRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(BoardDirection searchBd </span><span class="s2-90">in</span><span class="si"> System.Enum.GetValues(</span><span class="s2-90">typeof</span><span class="si">(BoardDirection))){ </span><span class="s2-89">// try each enum</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(boardEnumToReference(searchBd) == bRef){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> searchBd; </span><span class="s2-89">// return the enum</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> BoardDirection.Null;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// neighbouring function to get a board in this specific direction and distance</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Board getBoardFromDirection(BoardDirection bd, </span><span class="s2-90">int</span><span class="si"> distance){</span></div>
<div class="l li"><span class="si">        Board target = boardEnumToReference(bd); </span><span class="s2-89">// initial</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 1; x &lt; distance; x++){ </span><span class="s2-89">// recursively find the board in the specified direction</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(target == </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// no board here... do not continue...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            target = target.boardEnumToReference(bd);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> target;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// neighbouring function to get all boards in this specific direction</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;Board&gt; getAllBoardInDirection(BoardDirection bd){</span></div>
<div class="l li"><span class="si">        List&lt;Board&gt; list = </span><span class="s2-90">new</span><span class="si"> List&lt;Board&gt;();</span></div>
<div class="l li"><span class="si">        Board chain = boardEnumToReference(bd);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(chain != </span><span class="s2-90">null</span><span class="si">){ </span><span class="s2-89">// recursively add the boards in the specified direction</span></div>
<div class="l li"><span class="si">            list.Add(chain);</span></div>
<div class="l li"><span class="si">            chain = chain.boardEnumToReference(bd);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> list; </span><span class="s2-89">// returns the list of boards in the direction</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to set the neighbour of this board</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> initNeighbourReferences(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// board position in x &amp; y reference</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> x = arrayRef[0];</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> y = arrayRef[1];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// null the references first</span></div>
<div class="l li"><span class="si">        top = bottom = left = right = topLeft = topRight = bottomLeft = bottomRight = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(y+1 &lt; gm.boardHeight) {</span></div>
<div class="l li"><span class="si">            top = gm.board[x,y+1]; </span><span class="s2-89">// top reference</span></div>
<div class="l li"><span class="si">            allNeighbourBoards.Add(top); </span><span class="s2-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(y-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">            bottom = gm.board[x,y-1]; </span><span class="s2-89">// bottom reference</span></div>
<div class="l li"><span class="si">            allNeighbourBoards.Add(bottom); </span><span class="s2-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.boardType == BoardType.Square){ </span><span class="s2-89">// exclusive to square types only</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                right = gm.board[x+1,y]; </span><span class="s2-89">// right reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(right); </span><span class="s2-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                left = gm.board[x-1,y]; </span><span class="s2-89">// left reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(left); </span><span class="s2-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// TODO diagonal square neighbours disabled in JMFP</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.boardType == BoardType.Square ){ </span><span class="s2-89">// square mode references</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(y-1 &gt;= 0 &amp;&amp; x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                bottomRight = gm.board[x+1,y-1]; </span><span class="s2-89">// bottomRight reference</span></div>
<div class="l li"><span class="s2-89">//              allNeighbourBoards.Add(bottomRight); // add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(y-1 &gt;= 0 &amp;&amp; x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                bottomLeft = gm.board[x-1,y-1]; </span><span class="s2-89">// bottomRight reference</span></div>
<div class="l li"><span class="s2-89">//              allNeighbourBoards.Add(bottomLeft); // add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(y+1 &lt; gm.boardHeight &amp;&amp; x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                topRight = gm.board[x+1,y+1]; </span><span class="s2-89">// bottomRight reference</span></div>
<div class="l li"><span class="s2-89">//              allNeighbourBoards.Add(topRight); // add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(y+1 &lt; gm.boardHeight &amp;&amp; x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                topLeft = gm.board[x-1,y+1]; </span><span class="s2-89">// bottomRight reference</span></div>
<div class="l li"><span class="s2-89">//              allNeighbourBoards.Add(topLeft); // add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.boardType == BoardType.Hexagon){ </span><span class="s2-89">// exclusive to Hexagon mode only</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> refY = y; </span><span class="s2-89">// initial value of y</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(x%2 == 1){ </span><span class="s2-89">// hex correction only</span></div>
<div class="l li"><span class="si">                refY = y-1; </span><span class="s2-89">// compensate for hex squiggly line</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(refY &gt;= 0 &amp;&amp; refY &lt; gm.boardHeight &amp;&amp; x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                bottomRight = gm.board[x+1,refY]; </span><span class="s2-89">// bottomRight reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(bottomRight); </span><span class="s2-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(refY &gt;= 0 &amp;&amp; refY &lt; gm.boardHeight &amp;&amp; x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                bottomLeft = gm.board[x-1,refY]; </span><span class="s2-89">// bottomRight reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(bottomLeft); </span><span class="s2-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(refY+1 &gt;= 0 &amp;&amp; (refY+1) &lt; gm.boardHeight &amp;&amp; x+1 &lt; gm.boardWidth) {</span></div>
<div class="l li"><span class="si">                topRight = gm.board[x+1,refY+1]; </span><span class="s2-89">// bottomRight reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(topRight); </span><span class="s2-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(refY+1 &gt;= 0 &amp;&amp; (refY+1) &lt; gm.boardHeight &amp;&amp; x-1 &gt;= 0) {</span></div>
<div class="l li"><span class="si">                topLeft = gm.board[x-1,refY+1]; </span><span class="s2-89">// bottomRight reference</span></div>
<div class="l li"><span class="si">                allNeighbourBoards.Add(topLeft); </span><span class="s2-89">// add to the neighbourlist</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion neighbouring boards codes</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Sub Panels</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// Sub Panels codes</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to sync the reference between board &lt;-&gt; subPanels</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> syncSubPanelReference(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">            subPanelBottom.masters[1] = subPanelTop.masters[0] =</span></div>
<div class="l li"><span class="si">                subPanelLeft.masters[1] = subPanelRight.masters[0] = </span><span class="s2-90">this</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            subPanelBottom.spt = subPanelTop.spt = SubPanelType.Horizontal;</span></div>
<div class="l li"><span class="si">            subPanelLeft.spt = subPanelRight.spt = SubPanelType.Vertical;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelTop); allSubPanels.Add(subPanelBottom);</span></div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelLeft); allSubPanels.Add(subPanelRight);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            subPanelBottom.masters[1] = subPanelTop.masters[0] =</span></div>
<div class="l li"><span class="si">                subPanelTopLeft.masters[1] = subPanelBottomRight.masters[0] =</span></div>
<div class="l li"><span class="si">                    subPanelBottomLeft.masters[1] = subPanelTopRight.masters[0] = </span><span class="s2-90">this</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            subPanelBottom.spt = subPanelTop.spt = SubPanelType.Horizontal;</span></div>
<div class="l li"><span class="si">            subPanelTopLeft.spt = subPanelBottomRight.spt = SubPanelType.TLBR;</span></div>
<div class="l li"><span class="si">            subPanelTopRight.spt = subPanelBottomLeft.spt = SubPanelType.TRBL;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelTop); allSubPanels.Add(subPanelBottom);</span></div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelTopLeft); allSubPanels.Add(subPanelBottomRight);</span></div>
<div class="l li"><span class="si">            allSubPanels.Add(subPanelTopRight); allSubPanels.Add(subPanelBottomLeft);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to get the related subPanel given a neighour Board...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel getSubPanelBetween(Board neighbour){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> getSubPanelFrom( neighbourBoardToEnum(neighbour) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to get the related subPanel given a BoardDirection...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubBoardPanel getSubPanelFrom(BoardDirection bd){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(bd){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.Top :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> subPanelTop;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.Bottom :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> subPanelBottom;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.Left :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> subPanelLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.Right :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> subPanelRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.TopLeft :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> subPanelTopLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.TopRight :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> subPanelTopRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.BottomLeft :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> subPanelBottomLeft;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardDirection.BottomRight :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> subPanelBottomRight;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Sub Panels</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// Panel stuff</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> panelHit(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">bool</span><span class="si"> token = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(SubBoardPanel _sbp </span><span class="s2-90">in</span><span class="si"> allSubPanels){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(_sbp.gotHit()) token = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( panel.gotHit() || token ) {</span></div>
<div class="l li"><span class="si">            isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// panel activity registered, set board active for checks</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// piece and panel splash damage call</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> SplashDamage(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// panel splash call</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si"> ( panel.splashDamage() ) {</span></div>
<div class="l li"><span class="si">            isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// panel activity registered, set board active for checks</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// piece splash call</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isFilled){</span></div>
<div class="l li"><span class="si">            piece.pd.splashDamage(</span><span class="s2-90">this</span><span class="si">); </span><span class="s2-89">// function call ( if any )</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// Others</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;&#36;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// destroy the piece in this board</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyBox () {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!justCreated &amp;&amp; panel.isDestructible() &amp;&amp; isFilled &amp;&amp; !piece.markedForDestroy) {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( piece.pd.isDestructible ){ </span><span class="s2-89">// valid for destroy</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(piece.pd.performPower(arrayRef) ) { </span><span class="s2-89">// if true, mark for delayed destroy</span></div>
<div class="l li"><span class="si">                    piece.markedForDestroy = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!piece.markedForDestroy){ </span><span class="s2-89">// if not marked for delayed destroy, destroy immediately</span></div>
<div class="l li"><span class="si">                    piece.pd.splashDamage(</span><span class="s2-90">this</span><span class="si">); </span><span class="s2-89">// virtual function call ( if any )</span></div>
<div class="l li"><span class="si">                    piece.destroy();</span></div>
<div class="l li"><span class="si">                    isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    panelHit(); </span><span class="s2-89">// reduce panel durability ( if possible )</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                panelHit(); </span><span class="s2-89">// reduce panel durability ( if possible )</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// destroy the piece in this board</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> forceDestroyBox () {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isFilled &amp;&amp; !piece.markedForDestroy){ </span><span class="s2-89">// valid for destroy</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(piece.pd.performPower(arrayRef) ) { </span><span class="s2-89">// if true, mark for delayed destroy</span></div>
<div class="l li"><span class="si">                piece.markedForDestroy = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!piece.markedForDestroy){ </span><span class="s2-89">// if not marked for delayed destroy, destroy immediately</span></div>
<div class="l li"><span class="si">                piece.destroy();</span></div>
<div class="l li"><span class="si">                isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                panelHit(); </span><span class="s2-89">// reduce panel durability ( if possible )</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// for external scripts to call, signify that it is time to destroy it after being delayed...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyMarked(){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(piece != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            piece.markedForDestroy = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            piece.destroy();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        panelHit(); </span><span class="s2-89">// reduce panel durability ( if possible )</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED METHOD for easy use parameters :)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> convertToSpecial(System.Type pd) {</span></div>
<div class="l li"><span class="si">        convertToSpecial(gm.pieceManager.GetComponent(pd) </span><span class="s2-90">as</span><span class="si"> PieceDefinition);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// converts a piece to another pieceDefinition</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> convertToSpecial(PieceDefinition pd) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isFilled){</span></div>
<div class="l li"><span class="si">            piece.pd.performPower(arrayRef); </span><span class="s2-89">// trigger specials if any</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        piece.destroy();</span></div>
<div class="l li"><span class="si">        piece.specialMe(pd);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED METHOD for easy use parameters :)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> convertToSpecial(System.Type pd, </span><span class="s2-90">int</span><span class="si"> newSlotNum) {</span></div>
<div class="l li"><span class="si">        convertToSpecial(gm.pieceManager.GetComponent(pd) </span><span class="s2-90">as</span><span class="si"> PieceDefinition,newSlotNum);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// converts a piece to another pieceDefinition with defined skin</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> convertToSpecial(PieceDefinition pd, </span><span class="s2-90">int</span><span class="si"> newSlotNum) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isFilled){</span></div>
<div class="l li"><span class="si">            piece.pd.performPower(arrayRef); </span><span class="s2-89">// trigger specials if any</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        piece.destroy();</span></div>
<div class="l li"><span class="si">        piece.slotNum = newSlotNum;</span></div>
<div class="l li"><span class="si">        piece.specialMe(pd);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED METHOD for easy use parameters :)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> convertToSpecialNoDestroy(System.Type pd, </span><span class="s2-90">int</span><span class="si"> newSlotNum) {</span></div>
<div class="l li"><span class="si">        convertToSpecialNoDestroy(gm.pieceManager.GetComponent(pd) </span><span class="s2-90">as</span><span class="si"> PieceDefinition,newSlotNum);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// converts a piece that is here to be a special piece</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> convertToSpecialNoDestroy(PieceDefinition pd, </span><span class="s2-90">int</span><span class="si"> newSlotNum) {</span></div>
<div class="l li"><span class="si">        piece.removePiece();</span></div>
<div class="l li"><span class="si">        piece.slotNum = newSlotNum;</span></div>
<div class="l li"><span class="si">        piece.specialMe(pd);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED METHOD for easy use parameters :)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setSpecialPiece(System.Type pd) {</span></div>
<div class="l li"><span class="si">        setSpecialPiece(gm.pieceManager.GetComponent(pd) </span><span class="s2-90">as</span><span class="si"> PieceDefinition);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// sets the piece that is here to be a special piece</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setSpecialPiece(PieceDefinition pd) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(panel.pnd.hasStartingPiece){</span></div>
<div class="l li"><span class="si">            piece.removePiece();</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(pd.isSpecial){ </span><span class="s2-89">// if it's a special type, define the appropriate skin</span></div>
<div class="l li"><span class="si">                piece.slotNum = pd.skinToUseDuringSpawn(arrayRef[0],arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            piece.pd = pd; </span><span class="s2-89">// sets the pd type</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// reset the board when no more moves</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> reset(PieceDefinition pd, </span><span class="s2-90">int</span><span class="si"> skinNum) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(panel.isFillable()){ </span><span class="s2-89">// if the panel can hold a game piece</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si"> (isFilled){</span></div>
<div class="l li"><span class="si">                piece.resetMe(pd, skinNum); </span><span class="s2-89">// reset it</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// game piece was stolen by another board and the reference is wrong. create a new piece</span></div>
<div class="l li"><span class="si">                piece = </span><span class="s2-90">new</span><span class="si"> GamePiece(pd, </span><span class="s2-90">this</span><span class="si">, skinNum, position);</span></div>
<div class="l li"><span class="si">                piece.init();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l la d1"><span class="sa">            isActive = true;</span></div>
<div class="l li"><span class="si">            isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to determine if pieces are allowed to be stolen by other boards</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> allowGravity() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si"> ( panel.isStealable() &amp;&amp; isFilled &amp;&amp; !isFalling &amp;&amp; piece.pd.allowGravity ) {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to determine if this board requires a piece replacement when empty</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> replacementNeeded() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si"> ( panel.allowsGravity() &amp;&amp; !isBeingDelayed &amp;&amp; !isFilled &amp;&amp; !isFalling ) {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// call function to determine if the board is ready to be matched by 'MatchCheck()' in GameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> canBeMatched(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(panel.isMatchable() &amp;&amp; !justCreated &amp;&amp; !isFalling &amp;&amp; isFilled</span></div>
<div class="l li"><span class="si">           &amp;&amp; !piece.markedForDestroy &amp;&amp; !piece.pd.isSpecial){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// call function to determine if the board is ready to be matched by 'MatchCheck()' in GameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> canBeMatched(SubBoardPanel subPanelRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(subPanelRef.isMatchable() &amp;&amp; panel.isMatchable() &amp;&amp; !justCreated &amp;&amp; !isFalling &amp;&amp; isFilled</span></div>
<div class="l li"><span class="si">           &amp;&amp; !piece.markedForDestroy &amp;&amp; !piece.pd.isSpecial){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// to spawn a new object dropping out of the box by gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> spawnNew(PieceDefinition pd, Vector3 pos, </span><span class="s2-90">float</span><span class="si"> dropSpeed, </span><span class="s2-90">int</span><span class="si"> skinNum) {</span></div>
<div class="l li"><span class="si">        piece = </span><span class="s2-90">new</span><span class="si"> GamePiece(pd, </span><span class="s2-90">this</span><span class="si">, skinNum, position - pos);</span></div>
<div class="l li"><span class="si">        piece.init();</span></div>
<div class="l li"><span class="si">        applyTweening(dropSpeed);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// spawn a new piece on the board itself (appear mode) which scales from small to big</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> spawnNewAppear(PieceDefinition pd, </span><span class="s2-90">float</span><span class="si"> appearSpeed, </span><span class="s2-90">int</span><span class="si"> skinNum) {</span></div>
<div class="l li"><span class="si">        piece = </span><span class="s2-90">new</span><span class="si"> GamePiece(pd, </span><span class="s2-90">this</span><span class="si">, skinNum, position);</span></div>
<div class="l li"><span class="si">        piece.init();</span></div>
<div class="l li"><span class="si">        LeanTween.cancel(piece.thisPiece); </span><span class="s2-89">// cancel any active tweens on this object</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">float</span><span class="si"> scaleSize = 0;</span></div>
<div class="l li"><span class="si">        scaleSize = piece.thisPiece.transform.localScale.x;</span></div>
<div class="l li"><span class="si">        piece.thisPiece.transform.localScale = Vector3.zero; </span><span class="s2-89">// appear from scale 0</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        LeanTween.value(piece.thisPiece, appearTweeningSubFunction,0f,scaleSize,appearSpeed).setOnUpdateParam(piece.thisPiece);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the function for leanTween to scale the piece for appear mode</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> appearTweeningSubFunction(</span><span class="s2-90">float</span><span class="si"> val, </span><span class="s2-90">object</span><span class="si"> go){</span></div>
<div class="l li"><span class="si">        ((GameObject) go).transform.localScale = </span><span class="s2-90">new</span><span class="si"> Vector3(val,val,val);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// moves the pieces on the GUI for visual feedback</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> applyTweening(</span><span class="s2-90">float</span><span class="si"> dropSpeed){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isFilled){</span></div>
<div class="l li"><span class="si">            isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// likely destroyed by other powers already before it managed to tween, reset the board</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        piece.position = this.position; </span><span class="s2-89">// sync the position data</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(piece.thisPiece != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            piece.thisPiece.GetComponent&lt;PieceTracker&gt;().arrayRef = arrayRef;</span></div>
<div class="l li"><span class="si">            LeanTween.cancel(piece.thisPiece, piece.extraEffectID);</span></div>
<div class="l li"><span class="si">            Vector3 movePos = position;</span></div>
<div class="l li"><span class="si">            movePos.z = piece.thisPiece.transform.position.z; </span><span class="s2-89">// ensure the Z order stays when tweening</span></div>
<div class="l li"><span class="si">            LeanTween.move( piece.thisPiece, movePos ,dropSpeed);</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// likely destroyed by other powers already before it managed to tween, reset the board</span></div>
<div class="l li"><span class="si">            isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// special effects tweening...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> applyTweeningAfterEffects(</span><span class="s2-90">float</span><span class="si"> effectSpeed, Vector3[] path){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isFilled &amp;&amp; piece.thisPiece != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// play the visual effect</span></div>
<div class="l li"><span class="si">            piece.extraEffectID = LeanTween.move(  piece.thisPiece, path, effectSpeed).id;</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// likely destroyed by other powers already before it managed to tween, reset the board</span></div>
<div class="l li"><span class="si">            isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">} </span><span class="s2-89">// end of Board class</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs">Number of differences: <b>1</b></div><div id="colors"><div class="sa" title="1 added lines and 0 inline additions in changed lines">Added(1,0)</div><div class="sd" title="0 deleted lines and 0 inline deletions in changed lines">Deleted(0,0)</div><div class="sc" title="0 changed lines">Changed(0)</div><div class="sc2" title="0 inline changes in changed lines">Changed in changed(0)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on May 23, 2015, 6:43 AM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 7.0.1.4.
    </div>
</div>
</body>

</html>

