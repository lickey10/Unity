<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 8.0.0.1 -->
<!-- saved from url=(0014)about:internet -->

<head>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0; height: 12px; border-bottom: 1px solid #666;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg, .lh{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}
.lh{font-weight: 700; color: #3A33BC; display: inline-block; position: relative; white-space: nowrap;}
.lh:before{position: absolute; display:block; top:0; left:0; bottom:0; content: attr(data-content); background-color:#FFF; color:#FFF; z-index:-1; padding-right:.5em;}
.lh:after{position:absolute; content:''; display: block; left:0; right:0; top:50%; background-color:#3A33BC; height:1px; min-height:1px; z-index:-2;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 1792px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 1792
    var $diffs = [
null,
{d:'Diff 1: Add 1 line (400, second file) after line 399 (first file)',l:[399,399]},
{d:'Diff 2: Add 1 line (421, second file) after line 419 (first file)',l:[420,420]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="BoardPanel (old).cs"><b>BoardPanel (old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">    </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>
<div class="num">409 </div>
<div class="num">410 </div>
<div class="num">411 </div>
<div class="num">412 </div>
<div class="num">413 </div>
<div class="num">414 </div>
<div class="num">415 </div>
<div class="num">416 </div>
<div class="num">417 </div>
<div class="num">418 </div>
<div class="num">419 </div>
<div class="num">    </div>
<div class="num">420 </div>
<div class="num">421 </div>
<div class="num">422 </div>
<div class="num">423 </div>
<div class="num">424 </div>
<div class="num">425 </div>
<div class="num">426 </div>
<div class="num">427 </div>
<div class="num">428 </div>
<div class="num">429 </div>
<div class="num">430 </div>
<div class="num">431 </div>
<div class="num">432 </div>
<div class="num">433 </div>
<div class="num">434 </div>
<div class="num">435 </div>
<div class="num">436 </div>
<div class="num">437 </div>
<div class="num">438 </div>
<div class="num">439 </div>
<div class="num">440 </div>
<div class="num">441 </div>
<div class="num">442 </div>
<div class="num">443 </div>
<div class="num">444 </div>
<div class="num">445 </div>
<div class="num">446 </div>
<div class="num">447 </div>
<div class="num">448 </div>
<div class="num">449 </div>
<div class="num">450 </div>
<div class="num">451 </div>
<div class="num">452 </div>
<div class="num">453 </div>
<div class="num">454 </div>
<div class="num">455 </div>
<div class="num">456 </div>
<div class="num">457 </div>
<div class="num">458 </div>
<div class="num">459 </div>
<div class="num">460 </div>
<div class="num">461 </div>
<div class="num">462 </div>
<div class="num">463 </div>
<div class="num">464 </div>
<div class="num">465 </div>
<div class="num">466 </div>
<div class="num">467 </div>
<div class="num">468 </div>
<div class="num">469 </div>
<div class="num">470 </div>
<div class="num">471 </div>
<div class="num">472 </div>
<div class="num">473 </div>
<div class="num">474 </div>
<div class="num">475 </div>
<div class="num">476 </div>
<div class="num">477 </div>
<div class="num">478 </div>
<div class="num">479 </div>
<div class="num">480 </div>
<div class="num">481 </div>
<div class="num">482 </div>
<div class="num">483 </div>
<div class="num">484 </div>
<div class="num">485 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> PathologicalGames;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// NOTICE :</span></div>
<div class="l li"><span class="s1-89">/// This script is the Panel class used by the &quot;Board&quot; script.</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> BoardPanel {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region variables</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">string</span><span class="si"> panelPoolName {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> JMFUtils.panelPoolName;}}</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> durability { </span><span class="s1-89">// the amount of hit strength of this panel</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> pi[pi.Count-1].durability;} </span><span class="s1-89">// gets the durability from the last entry...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">set</span><span class="si">{pi[pi.Count-1].durability = </span><span class="s1-90">value</span><span class="si">;} </span><span class="s1-89">// sets the durability from the last entry...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Board master; </span><span class="s1-89">// the origin of the panel - aka who this panel belongs too</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> PanelDefinition pnd{ </span><span class="s1-89">// definition reference</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> pi[pi.Count-1].pnd;} </span><span class="s1-89">// gets the PanelDefinition from the last entry...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">set</span><span class="si">{</span></div>
<div class="l li"><span class="si">            pi[pi.Count-1].pnd = </span><span class="s1-90">value</span><span class="si">; </span><span class="s1-89">// sets the PanelDefinition from the last entry...</span></div>
<div class="l li"><span class="si">            master.isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// makes the board active for checks again due to change in panels</span></div>
<div class="l li"><span class="si">            master.gm.notifyBoardHasChanged(); </span><span class="s1-89">// board has changed... </span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject backPanel{ </span><span class="s1-89">// for visuals</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> pi[pi.Count-1].backPanel;} </span><span class="s1-89">// gets the backPanel object from the last entry...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">set</span><span class="si">{pi[pi.Count-1].backPanel = </span><span class="s1-90">value</span><span class="si">;} </span><span class="s1-89">// sets the backPanel object from the last entry...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject frontPanel{ </span><span class="s1-89">// for visuals</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> pi[pi.Count-1].frontPanel;} </span><span class="s1-89">// gets the frontPanel object from the last entry...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">set</span><span class="si">{pi[pi.Count-1].frontPanel = </span><span class="s1-90">value</span><span class="si">;} </span><span class="s1-89">// sets the frontPanel object from the last entry...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject defaultPanel; </span><span class="s1-89">// for visuals - the default panel at the back</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;PanelInfo&gt; pi = </span><span class="s1-90">new</span><span class="si"> List&lt;PanelInfo&gt;(); </span><span class="s1-89">// to store multiple panel data</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion variables</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> BoardPanel(PanelDefinition newDefinition, </span><span class="s1-90">int</span><span class="si"> strength, Board myMaster){</span></div>
<div class="l li"><span class="si">        master = myMaster; </span><span class="s1-89">// set the master script</span></div>
<div class="l li"><span class="si">        pi.Add(</span><span class="s1-90">new</span><span class="si"> PanelInfo()); </span><span class="s1-89">// adds the initial Panel Info to be used...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// set the type - DO NOT USE setType() as we do not want to initPanels()~!</span></div>
<div class="l li"><span class="si">        pnd = newDefinition;</span></div>
<div class="l li"><span class="si">        durability = strength;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ##############################</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// EXTERNAL SCRIPTS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ##############################</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// for external scripts to set the current panel type</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setStrength(</span><span class="s1-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        durability = strength;</span></div>
<div class="l li"><span class="si">        createPanels();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// overloaded method to reduce input requirements</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setType(System.Type newDefinition, </span><span class="s1-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        setType(master.gm.panelManager.GetComponent(newDefinition) </span><span class="s1-90">as</span><span class="si"> PanelDefinition,strength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// sets the panel type according to input</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setType(PanelDefinition newDefinition, </span><span class="s1-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pnd != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            onPanelDestroy(); </span><span class="s1-89">// the destroy call if there is a panel type</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        pnd = newDefinition;</span></div>
<div class="l li"><span class="si">        durability = strength;</span></div>
<div class="l li"><span class="si">        initPanels();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// overloaded method to reduce input requirements</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> addType(System.Type newDefinition, </span><span class="s1-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        addType(master.gm.panelManager.GetComponent(newDefinition) </span><span class="s1-90">as</span><span class="si"> PanelDefinition,</span></div>
<div class="l li"><span class="si">                strength,</span><span class="s1-90">true</span><span class="si">,</span><span class="s1-90">true</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// overloaded method to reduce input requirements</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> addType(System.Type newDefinition, </span><span class="s1-90">int</span><span class="si"> strength, </span><span class="s1-90">bool</span><span class="si"> addToExisting, </span><span class="s1-90">bool</span><span class="si"> reOrder){</span></div>
<div class="l li"><span class="si">        addType(master.gm.panelManager.GetComponent(newDefinition) </span><span class="s1-90">as</span><span class="si"> PanelDefinition,</span></div>
<div class="l li"><span class="si">                strength,addToExisting,reOrder);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// overloaded method to reduce input requirements</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> addType(PanelDefinition newDefinition, </span><span class="s1-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        addType(newDefinition,strength,</span><span class="s1-90">true</span><span class="si">,</span><span class="s1-90">true</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// add panel types for multi-layered panels :D</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> addType(PanelDefinition newDefinition, </span><span class="s1-90">int</span><span class="si"> strength, </span><span class="s1-90">bool</span><span class="si"> addToExisting, </span><span class="s1-90">bool</span><span class="si"> reOrder){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(newDefinition == </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            Debug.LogError(</span><span class="s1-85">&quot;Warning! null panel was given! please check your codes!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">bool</span><span class="si"> foundExisting = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// variable to determine if we found existing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(addToExisting){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(PanelInfo _pi </span><span class="s1-90">in</span><span class="si"> pi){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(_pi.pnd.GetType() == newDefinition.GetType()){ </span><span class="s1-89">// same Panel Definition type...</span></div>
<div class="l li"><span class="si">                    _pi.durability += strength; </span><span class="s1-89">// add to the durability...</span></div>
<div class="l li"><span class="si">                    foundExisting = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// set found</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// break out of loop</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!foundExisting){ </span><span class="s1-89">// adds a new panelInfo if it does not exist...</span></div>
<div class="l li"><span class="si">            pi.Add(</span><span class="s1-90">new</span><span class="si"> PanelInfo());</span></div>
<div class="l li"><span class="si">            pnd = newDefinition;</span></div>
<div class="l li"><span class="si">            durability = strength;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!newDefinition.hasStartingPiece &amp;&amp; master.isFilled){</span></div>
<div class="l li"><span class="si">            master.piece.removePiece(); </span><span class="s1-89">// removes piece if necessary</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(reOrder) reorderMultiPanelsList(); </span><span class="s1-89">// call to sort the order of multiPanels</span></div>
<div class="l li"><span class="si">        createPanels();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pnd == newDefinition) pnd.onPanelCreate(</span><span class="s1-90">this</span><span class="si">); </span><span class="s1-89">// panel onCreate call for the current new panel...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> reorderMultiPanelsList(){</span></div>
<div class="l li"><span class="si">        List&lt;PanelInfo&gt; tempList = </span><span class="s1-90">new</span><span class="si"> List&lt;PanelInfo&gt;(); </span><span class="s1-89">// temporary list to hold PanelInfo</span></div>
<div class="l li"><span class="si">        List&lt;PanelInfo&gt; itrList = </span><span class="s1-90">new</span><span class="si"> List&lt;PanelInfo&gt;(); </span><span class="s1-89">// the iteration list</span></div>
<div class="l li"><span class="si">        List&lt;PanelInfo&gt; sortList = </span><span class="s1-90">new</span><span class="si"> List&lt;PanelInfo&gt;(); </span><span class="s1-89">// the sorted list</span></div>
<div class="l li"><span class="si">        tempList.AddRange(pi.ToArray()); </span><span class="s1-89">// add the original list to the temp list</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(tempList.Count &gt; 0){ </span><span class="s1-89">// while there is still definitions to sort...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(PanelDefinition pTypes </span><span class="s1-90">in</span><span class="si"> JMFUtils.gm.panelTypes){</span></div>
<div class="l li"><span class="si">                itrList.Clear();</span></div>
<div class="l li"><span class="si">                itrList.AddRange(tempList.ToArray()); </span><span class="s1-89">// add to the iteration list</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(PanelInfo _pi </span><span class="s1-90">in</span><span class="si"> itrList){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(_pi.pnd.GetType() == pTypes.GetType()){ </span><span class="s1-89">// same Panel Definition type...</span></div>
<div class="l li"><span class="si">                        sortList.Add(_pi); </span><span class="s1-89">// add to sort list</span></div>
<div class="l li"><span class="si">                        tempList.Remove(_pi); </span><span class="s1-89">// remove from the temp list</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        pi.Clear(); </span><span class="s1-89">// clears the list...</span></div>
<div class="l li"><span class="si">        pi.AddRange(sortList.ToArray()); </span><span class="s1-89">// adds the sorted list to be used...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ##############################</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// INTERNAL SCRIPTS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ##############################</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// panel definition init function</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> initPanels(){</span></div>
<div class="l li"><span class="si">        createPanels(); </span><span class="s1-89">// the actual creation of the GameObject</span></div>
<div class="l li"><span class="si">        onPanelCreate(); </span><span class="s1-89">// the onCreate function for the panel (if any)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to call all related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyPanels(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(JMFUtils.isPooling){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// ******** POOL MANAGER version *********</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// give back backPanel to the pool</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( backPanel != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[panelPoolName].Despawn(backPanel.transform);</span></div>
<div class="l li"><span class="si">                backPanel = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// give back frontPanel to the pool</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( frontPanel != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[panelPoolName].Despawn(frontPanel.transform);</span></div>
<div class="l li"><span class="si">                frontPanel = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// give back defaultPanel to the pool</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( defaultPanel != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[panelPoolName].Despawn(defaultPanel.transform);</span></div>
<div class="l li"><span class="si">                defaultPanel = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// ******** NON POOL MANAGER version ********</span></div>
<div class="l li"><span class="si">            Object.Destroy(backPanel); </span><span class="s1-89">// destroy previous leftover panel (if any)</span></div>
<div class="l li"><span class="si">            Object.Destroy(frontPanel); </span><span class="s1-89">// destroy previous leftover panel (if any)</span></div>
<div class="l li"><span class="si">            Object.Destroy(defaultPanel); </span><span class="s1-89">// destroy previous default panel (if any)</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to call all related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> createPanels(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(durability &lt; 0 &amp;&amp; !(pnd == master.gm.panelTypes[0]) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(pi.Count &gt; 1){ </span><span class="s1-89">// if using multi-panels</span></div>
<div class="l li"><span class="si">                destroyPanels(); </span><span class="s1-89">// remove old panels first</span></div>
<div class="l li"><span class="si">                pi.RemoveAt(pi.Count-1); </span><span class="s1-89">// removes the last entry...</span></div>
<div class="l li"><span class="si">                createPanels(); </span><span class="s1-89">// adds new panel's GUI</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// not using multi-panels, re-use the current panel</span></div>
<div class="l li"><span class="si">                setType( master.gm.panelTypes[0], 0 ); </span><span class="s1-89">// change back to basic panel</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// stop here...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// the actual creation of the GameObject // final init for the top panel...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!pnd.hasStartingPiece &amp;&amp; master.isFilled){</span></div>
<div class="l li"><span class="si">            master.piece.removePiece();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        List&lt;PanelInfo&gt; tempPi = </span><span class="s1-90">new</span><span class="si"> List&lt;PanelInfo&gt;();</span></div>
<div class="l li"><span class="si">        tempPi.AddRange(pi.ToArray());</span></div>
<div class="l li"><span class="si">        pi.Reverse(); </span><span class="s1-89">// iterate backwards...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(pi.Count &gt; 0){</span></div>
<div class="l li"><span class="si">            destroyPanels(); </span><span class="s1-89">// remove old panels first</span></div>
<div class="l li"><span class="si">            createFrontPanel(); </span><span class="s1-89">// the front panel as the foreground on top of the game piece</span></div>
<div class="l li"><span class="si">            createBackPanel(); </span><span class="s1-89">// the back panel as the background</span></div>
<div class="l li"><span class="si">            pi.RemoveAt(pi.Count - 1); </span><span class="s1-89">// remove the entry when done processing...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        pi = tempPi; </span><span class="s1-89">// re-assign back the panelInfo list...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        attachPanelScript(); </span><span class="s1-89">// attaches the panel script</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// to create the background visual... </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> createBackPanel() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pnd.hasDefaultPanel){</span></div>
<div class="l li"><span class="si">            createDefaultPanel(); </span><span class="s1-89">// creates the default panel when specified</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pnd.isInFront || pnd.hasNoSkin || (pi.Count &gt; 1 &amp;&amp; !pnd.showSkinUnderMultiPanels) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// already created a front panel, do not make this back panel</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pnd.skin.Length &gt; 0) { </span><span class="s1-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(JMFUtils.isPooling){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">                backPanel = PoolManager.Pools[panelPoolName].Spawn(</span></div>
<div class="l li"><span class="si">                    pnd.skin[Mathf.Min( pnd.skin.Length-1,Mathf.Abs(durability-1))].transform).gameObject;</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// NON POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">                backPanel = (GameObject) Object.Instantiate(pnd.skin[Mathf.Min(</span></div>
<div class="l li"><span class="si">                    pnd.skin.Length-1,Mathf.Abs(durability-1))]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">//----------</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s1-85">&quot;No panel skin available. Have you forgotten to skin the panel script?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(backPanel != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// re-parent the object to the gameManager panel</span></div>
<div class="l li"><span class="si">            backPanel.transform.parent = master.gm.gameObject.transform;</span></div>
<div class="l li"><span class="si">            backPanel.transform.localPosition = master.localPos;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(JMFUtils.gm.boardType){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">                JMFUtils.autoScale(backPanel); </span><span class="s1-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                JMFUtils.autoScaleHexagon(backPanel); </span><span class="s1-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// positioning code</span></div>
<div class="l li"><span class="si">            backPanel.transform.localPosition +=</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">new</span><span class="si"> Vector3(0,0,5 + master.gm.size + backPanel.transform.localPosition.z);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// to create the foreground visual...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> createFrontPanel() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!pnd.isInFront || pnd.hasNoSkin || (pi.Count &gt; 1 &amp;&amp; !pnd.showSkinUnderMultiPanels) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// not a front panel... no need to proceed</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pnd.skin.Length &gt; 0) { </span><span class="s1-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(JMFUtils.isPooling){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">                frontPanel = PoolManager.Pools[panelPoolName].Spawn(</span></div>
<div class="l li"><span class="si">                    pnd.skin[Mathf.Min( pnd.skin.Length-1,Mathf.Abs(durability-1))].transform).gameObject;</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// NON POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">                frontPanel = (GameObject) Object.Instantiate(pnd.skin[Mathf.Min(</span></div>
<div class="l li"><span class="si">                    pnd.skin.Length-1,Mathf.Abs(durability-1))]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        }</span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s1-85">&quot;No panel skin available. Have you forgotten to skin the panel script?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(frontPanel != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// re-parent the object to the gameManager panel</span></div>
<div class="l li"><span class="si">            frontPanel.transform.parent = master.gm.gameObject.transform;</span></div>
<div class="l li"><span class="si">            frontPanel.transform.localPosition = master.localPos;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(JMFUtils.gm.boardType){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">                JMFUtils.autoScale(frontPanel); </span><span class="s1-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                JMFUtils.autoScaleHexagon(frontPanel); </span><span class="s1-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// minor code just to arrange the Z order to always be at the front</span></div>
<div class="l li"><span class="si">            frontPanel.transform.localPosition +=</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">new</span><span class="si"> Vector3(0,0,-5 - master.gm.size + frontPanel.transform.localPosition.z);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to create the default panel - in case of tranparency backPanels</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">protected</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> createDefaultPanel(){</span></div>
<div class="l li"><span class="si">        GameObject prefab = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(JMFUtils.gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">((master.arrayRef[0] + master.arrayRef[1]) % 2 == 0){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(JMFUtils.vm.defaultSquareBackPanel != </span><span class="s1-90">null</span><span class="si">) { </span><span class="s1-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">                    prefab = JMFUtils.vm.defaultSquareBackPanel;</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    Debug.Log(</span><span class="s1-85">&quot;whoops? have you forgotten to provide a default panel prefab?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// do not continue...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(JMFUtils.vm.defaultAltSquareBackPanel != </span><span class="s1-90">null</span><span class="si">) { </span><span class="s1-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">                    prefab = JMFUtils.vm.defaultAltSquareBackPanel;</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(JMFUtils.vm.defaultSquareBackPanel != </span><span class="s1-90">null</span><span class="si">) { </span><span class="s1-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">                    prefab = JMFUtils.vm.defaultSquareBackPanel;</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    Debug.Log(</span><span class="s1-85">&quot;whoops? have you forgotten to provide a default panel prefab?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// do not continue...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(JMFUtils.vm.defaultHexBackPanel != </span><span class="s1-90">null</span><span class="si">) { </span><span class="s1-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">                prefab = JMFUtils.vm.defaultHexBackPanel;</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                Debug.Log(</span><span class="s1-85">&quot;whoops? have you forgotten to provide a default panel prefab?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// do not continue...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(JMFUtils.isPooling){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">            defaultPanel = PoolManager.Pools[panelPoolName].Spawn(prefab.transform).gameObject;</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// NON POOL MANAGER Version ~~~~~~~~</span></div>
<div class="l li"><span class="si">            defaultPanel = (GameObject) Object.Instantiate(prefab);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// re-parent the object to the gameManager panel</span></div>
<div class="l li"><span class="si">        defaultPanel.transform.parent = master.gm.gameObject.transform;</span></div>
<div class="l li"><span class="si">        defaultPanel.transform.localPosition = master.localPos;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(JMFUtils.gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">            JMFUtils.autoScale(defaultPanel); </span><span class="s1-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            JMFUtils.autoScaleHexagon(defaultPanel); </span><span class="s1-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// minor code just to arrange the Z order to always be at the back</span></div>
<div class="l li"><span class="si">        defaultPanel.transform.localPosition +=</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">new</span><span class="si"> Vector3(0,0,10 + master.gm.size + defaultPanel.transform.localPosition.z);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> attachPanelScript(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pnd.hasNoSkin &amp;&amp; !pnd.hasDefaultPanel){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// no panels created... empty panel perhaps?</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pnd.hasNoSkin &amp;&amp; pnd.hasDefaultPanel){ </span><span class="s1-89">// no skin but has default panel?</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(defaultPanel.GetComponent&lt;PanelTracker&gt;() == </span><span class="s1-90">null</span><span class="si">) </span></div>
<div class="l li"><span class="si">                defaultPanel.AddComponent&lt;PanelTracker&gt;();</span></div>
<div class="l li"><span class="si">            defaultPanel.GetComponent&lt;PanelTracker&gt;().arrayRef = master.arrayRef;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(pnd.isInFront){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(frontPanel.GetComponent&lt;PanelTracker&gt;() == </span><span class="s1-90">null</span><span class="si">)</span></div>
<div class="l li"><span class="si">                frontPanel.AddComponent&lt;PanelTracker&gt;();</span></div>
<div class="l li"><span class="si">            frontPanel.GetComponent&lt;PanelTracker&gt;().arrayRef = master.arrayRef;</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(backPanel.GetComponent&lt;PanelTracker&gt;() == </span><span class="s1-90">null</span><span class="si">) </span></div>
<div class="l li"><span class="si">                backPanel.AddComponent&lt;PanelTracker&gt;();</span></div>
<div class="l li"><span class="si">            backPanel.GetComponent&lt;PanelTracker&gt;().arrayRef = master.arrayRef;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// NOTES :- the box collider for this to work is already defined in PanelTracker.cs script itself.</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ###########################</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ACCESS FUNCTIONS FOR PANEL-DEFINITION</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// relays information to PanelDefinition for easy access from GameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ###########################</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// for external scripts to call, will indicate that the panel got hit</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> gotHit(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">bool</span><span class="si"> registeredHit = pnd.gotHit(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(registeredHit){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(durability &lt; 1 &amp;&amp; !(pnd == master.gm.panelTypes[0]) ){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(pi.Count &gt; 1){ </span><span class="s1-89">// if using multi-panels</span></div>
<div class="l li"><span class="si">                    destroyPanels(); </span><span class="s1-89">// remove old panel's GUI</span></div>
<div class="l la d1"> </div>
<div class="l li"><span class="si">                    pi.RemoveAt(pi.Count-1); </span><span class="s1-89">// removes the last entry...</span></div>
<div class="l li"><span class="si">                    createPanels(); </span><span class="s1-89">// adds new panel's GUI</span></div>
<div class="l li"><span class="si">                    onPanelCreate(); </span><span class="s1-89">// calls the createPanel event</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// not using multi-panels, re-use the current panel</span></div>
<div class="l li"><span class="si">                    setType( master.gm.panelTypes[0], 0 ); </span><span class="s1-89">// change back to basic panel</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                createPanels(); </span><span class="s1-89">// refresh the panel gameObjects</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> registeredHit;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// for external scripts to call, if splash damage hits correct panel type, perform the hit</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> splashDamage() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">bool</span><span class="si"> registeredHit = pnd.splashDamage(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(registeredHit){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(durability &lt; 1 &amp;&amp; !(pnd == master.gm.panelTypes[0]) ){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(pi.Count &gt; 1){ </span><span class="s1-89">// if using multi-panels</span></div>
<div class="l li"><span class="si">                    destroyPanels(); </span><span class="s1-89">// remove old panel's GUI</span></div>
<div class="l la d2"> </div>
<div class="l li"><span class="si">                    pi.RemoveAt(pi.Count-1); </span><span class="s1-89">// removes the last entry...</span></div>
<div class="l li"><span class="si">                    createPanels(); </span><span class="s1-89">// adds new panel's GUI</span></div>
<div class="l li"><span class="si">                    onPanelCreate(); </span><span class="s1-89">// calls the createPanel event</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// not using multi-panels, re-use the current panel</span></div>
<div class="l li"><span class="si">                    setType( master.gm.panelTypes[0], 0 ); </span><span class="s1-89">// change back to basic panel</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                createPanels(); </span><span class="s1-89">// refresh the panel gameObjects</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> registeredHit;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// on destroy call</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPanelDestroy() {</span></div>
<div class="l li"><span class="si">        pnd.onPanelDestroy(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// on create call</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPanelCreate() {</span></div>
<div class="l li"><span class="si">        pnd.onPanelCreate(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check if pieces can fall into this board box</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> allowsGravity() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> pnd.allowsGravity(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// if the piece here can be used to form a match</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isMatchable() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> pnd.isMatchable(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// if the piece here can be switched around</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isSwitchable() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> pnd.isSwitchable(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// if the piece here (if any) can be destroyed</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isDestructible() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> pnd.isDestructible(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check if pieces can be stolen from this box by gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isStealable() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> pnd.isStealable(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check if this board needs to be filled by gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isFillable() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> pnd.isFillable(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check if this board is a solid panel that gravity cannot pass through</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isSolid() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> pnd.isSolid(</span><span class="s1-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">// a class to store data about a panel ( use for storing multiple panel entries )</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> PanelInfo {</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> PanelDefinition pnd;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> durability = 0;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject backPanel; </span><span class="s1-89">// for visuals</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject frontPanel; </span><span class="s1-89">// for visuals</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="BoardPanel (new).cs"><b>BoardPanel (new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>
<div class="num">409 </div>
<div class="num">410 </div>
<div class="num">411 </div>
<div class="num">412 </div>
<div class="num">413 </div>
<div class="num">414 </div>
<div class="num">415 </div>
<div class="num">416 </div>
<div class="num">417 </div>
<div class="num">418 </div>
<div class="num">419 </div>
<div class="num">420 </div>
<div class="num">421 </div>
<div class="num">422 </div>
<div class="num">423 </div>
<div class="num">424 </div>
<div class="num">425 </div>
<div class="num">426 </div>
<div class="num">427 </div>
<div class="num">428 </div>
<div class="num">429 </div>
<div class="num">430 </div>
<div class="num">431 </div>
<div class="num">432 </div>
<div class="num">433 </div>
<div class="num">434 </div>
<div class="num">435 </div>
<div class="num">436 </div>
<div class="num">437 </div>
<div class="num">438 </div>
<div class="num">439 </div>
<div class="num">440 </div>
<div class="num">441 </div>
<div class="num">442 </div>
<div class="num">443 </div>
<div class="num">444 </div>
<div class="num">445 </div>
<div class="num">446 </div>
<div class="num">447 </div>
<div class="num">448 </div>
<div class="num">449 </div>
<div class="num">450 </div>
<div class="num">451 </div>
<div class="num">452 </div>
<div class="num">453 </div>
<div class="num">454 </div>
<div class="num">455 </div>
<div class="num">456 </div>
<div class="num">457 </div>
<div class="num">458 </div>
<div class="num">459 </div>
<div class="num">460 </div>
<div class="num">461 </div>
<div class="num">462 </div>
<div class="num">463 </div>
<div class="num">464 </div>
<div class="num">465 </div>
<div class="num">466 </div>
<div class="num">467 </div>
<div class="num">468 </div>
<div class="num">469 </div>
<div class="num">470 </div>
<div class="num">471 </div>
<div class="num">472 </div>
<div class="num">473 </div>
<div class="num">474 </div>
<div class="num">475 </div>
<div class="num">476 </div>
<div class="num">477 </div>
<div class="num">478 </div>
<div class="num">479 </div>
<div class="num">480 </div>
<div class="num">481 </div>
<div class="num">482 </div>
<div class="num">483 </div>
<div class="num">484 </div>
<div class="num">485 </div>
<div class="num">486 </div>
<div class="num">487 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> PathologicalGames;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// NOTICE :</span></div>
<div class="l li"><span class="s2-89">/// This script is the Panel class used by the &quot;Board&quot; script.</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> BoardPanel {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region variables</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">string</span><span class="si"> panelPoolName {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> JMFUtils.panelPoolName;}}</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> durability { </span><span class="s2-89">// the amount of hit strength of this panel</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> pi[pi.Count-1].durability;} </span><span class="s2-89">// gets the durability from the last entry...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">set</span><span class="si">{pi[pi.Count-1].durability = </span><span class="s2-90">value</span><span class="si">;} </span><span class="s2-89">// sets the durability from the last entry...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Board master; </span><span class="s2-89">// the origin of the panel - aka who this panel belongs too</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> PanelDefinition pnd{ </span><span class="s2-89">// definition reference</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> pi[pi.Count-1].pnd;} </span><span class="s2-89">// gets the PanelDefinition from the last entry...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">set</span><span class="si">{</span></div>
<div class="l li"><span class="si">            pi[pi.Count-1].pnd = </span><span class="s2-90">value</span><span class="si">; </span><span class="s2-89">// sets the PanelDefinition from the last entry...</span></div>
<div class="l li"><span class="si">            master.isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// makes the board active for checks again due to change in panels</span></div>
<div class="l li"><span class="si">            master.gm.notifyBoardHasChanged(); </span><span class="s2-89">// board has changed... </span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject backPanel{ </span><span class="s2-89">// for visuals</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> pi[pi.Count-1].backPanel;} </span><span class="s2-89">// gets the backPanel object from the last entry...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">set</span><span class="si">{pi[pi.Count-1].backPanel = </span><span class="s2-90">value</span><span class="si">;} </span><span class="s2-89">// sets the backPanel object from the last entry...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject frontPanel{ </span><span class="s2-89">// for visuals</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> pi[pi.Count-1].frontPanel;} </span><span class="s2-89">// gets the frontPanel object from the last entry...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">set</span><span class="si">{pi[pi.Count-1].frontPanel = </span><span class="s2-90">value</span><span class="si">;} </span><span class="s2-89">// sets the frontPanel object from the last entry...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject defaultPanel; </span><span class="s2-89">// for visuals - the default panel at the back</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;PanelInfo&gt; pi = </span><span class="s2-90">new</span><span class="si"> List&lt;PanelInfo&gt;(); </span><span class="s2-89">// to store multiple panel data</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion variables</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> BoardPanel(PanelDefinition newDefinition, </span><span class="s2-90">int</span><span class="si"> strength, Board myMaster){</span></div>
<div class="l li"><span class="si">        master = myMaster; </span><span class="s2-89">// set the master script</span></div>
<div class="l li"><span class="si">        pi.Add(</span><span class="s2-90">new</span><span class="si"> PanelInfo()); </span><span class="s2-89">// adds the initial Panel Info to be used...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// set the type - DO NOT USE setType() as we do not want to initPanels()~!</span></div>
<div class="l li"><span class="si">        pnd = newDefinition;</span></div>
<div class="l li"><span class="si">        durability = strength;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ##############################</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// EXTERNAL SCRIPTS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ##############################</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// for external scripts to set the current panel type</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setStrength(</span><span class="s2-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        durability = strength;</span></div>
<div class="l li"><span class="si">        createPanels();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// overloaded method to reduce input requirements</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setType(System.Type newDefinition, </span><span class="s2-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        setType(master.gm.panelManager.GetComponent(newDefinition) </span><span class="s2-90">as</span><span class="si"> PanelDefinition,strength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// sets the panel type according to input</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setType(PanelDefinition newDefinition, </span><span class="s2-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pnd != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            onPanelDestroy(); </span><span class="s2-89">// the destroy call if there is a panel type</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        pnd = newDefinition;</span></div>
<div class="l li"><span class="si">        durability = strength;</span></div>
<div class="l li"><span class="si">        initPanels();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// overloaded method to reduce input requirements</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> addType(System.Type newDefinition, </span><span class="s2-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        addType(master.gm.panelManager.GetComponent(newDefinition) </span><span class="s2-90">as</span><span class="si"> PanelDefinition,</span></div>
<div class="l li"><span class="si">                strength,</span><span class="s2-90">true</span><span class="si">,</span><span class="s2-90">true</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// overloaded method to reduce input requirements</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> addType(System.Type newDefinition, </span><span class="s2-90">int</span><span class="si"> strength, </span><span class="s2-90">bool</span><span class="si"> addToExisting, </span><span class="s2-90">bool</span><span class="si"> reOrder){</span></div>
<div class="l li"><span class="si">        addType(master.gm.panelManager.GetComponent(newDefinition) </span><span class="s2-90">as</span><span class="si"> PanelDefinition,</span></div>
<div class="l li"><span class="si">                strength,addToExisting,reOrder);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// overloaded method to reduce input requirements</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> addType(PanelDefinition newDefinition, </span><span class="s2-90">int</span><span class="si"> strength){</span></div>
<div class="l li"><span class="si">        addType(newDefinition,strength,</span><span class="s2-90">true</span><span class="si">,</span><span class="s2-90">true</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// add panel types for multi-layered panels :D</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> addType(PanelDefinition newDefinition, </span><span class="s2-90">int</span><span class="si"> strength, </span><span class="s2-90">bool</span><span class="si"> addToExisting, </span><span class="s2-90">bool</span><span class="si"> reOrder){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(newDefinition == </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            Debug.LogError(</span><span class="s2-85">&quot;Warning! null panel was given! please check your codes!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">bool</span><span class="si"> foundExisting = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// variable to determine if we found existing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(addToExisting){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(PanelInfo _pi </span><span class="s2-90">in</span><span class="si"> pi){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(_pi.pnd.GetType() == newDefinition.GetType()){ </span><span class="s2-89">// same Panel Definition type...</span></div>
<div class="l li"><span class="si">                    _pi.durability += strength; </span><span class="s2-89">// add to the durability...</span></div>
<div class="l li"><span class="si">                    foundExisting = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// set found</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// break out of loop</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!foundExisting){ </span><span class="s2-89">// adds a new panelInfo if it does not exist...</span></div>
<div class="l li"><span class="si">            pi.Add(</span><span class="s2-90">new</span><span class="si"> PanelInfo());</span></div>
<div class="l li"><span class="si">            pnd = newDefinition;</span></div>
<div class="l li"><span class="si">            durability = strength;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!newDefinition.hasStartingPiece &amp;&amp; master.isFilled){</span></div>
<div class="l li"><span class="si">            master.piece.removePiece(); </span><span class="s2-89">// removes piece if necessary</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(reOrder) reorderMultiPanelsList(); </span><span class="s2-89">// call to sort the order of multiPanels</span></div>
<div class="l li"><span class="si">        createPanels();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pnd == newDefinition) pnd.onPanelCreate(</span><span class="s2-90">this</span><span class="si">); </span><span class="s2-89">// panel onCreate call for the current new panel...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> reorderMultiPanelsList(){</span></div>
<div class="l li"><span class="si">        List&lt;PanelInfo&gt; tempList = </span><span class="s2-90">new</span><span class="si"> List&lt;PanelInfo&gt;(); </span><span class="s2-89">// temporary list to hold PanelInfo</span></div>
<div class="l li"><span class="si">        List&lt;PanelInfo&gt; itrList = </span><span class="s2-90">new</span><span class="si"> List&lt;PanelInfo&gt;(); </span><span class="s2-89">// the iteration list</span></div>
<div class="l li"><span class="si">        List&lt;PanelInfo&gt; sortList = </span><span class="s2-90">new</span><span class="si"> List&lt;PanelInfo&gt;(); </span><span class="s2-89">// the sorted list</span></div>
<div class="l li"><span class="si">        tempList.AddRange(pi.ToArray()); </span><span class="s2-89">// add the original list to the temp list</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(tempList.Count &gt; 0){ </span><span class="s2-89">// while there is still definitions to sort...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(PanelDefinition pTypes </span><span class="s2-90">in</span><span class="si"> JMFUtils.gm.panelTypes){</span></div>
<div class="l li"><span class="si">                itrList.Clear();</span></div>
<div class="l li"><span class="si">                itrList.AddRange(tempList.ToArray()); </span><span class="s2-89">// add to the iteration list</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(PanelInfo _pi </span><span class="s2-90">in</span><span class="si"> itrList){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(_pi.pnd.GetType() == pTypes.GetType()){ </span><span class="s2-89">// same Panel Definition type...</span></div>
<div class="l li"><span class="si">                        sortList.Add(_pi); </span><span class="s2-89">// add to sort list</span></div>
<div class="l li"><span class="si">                        tempList.Remove(_pi); </span><span class="s2-89">// remove from the temp list</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        pi.Clear(); </span><span class="s2-89">// clears the list...</span></div>
<div class="l li"><span class="si">        pi.AddRange(sortList.ToArray()); </span><span class="s2-89">// adds the sorted list to be used...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ##############################</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// INTERNAL SCRIPTS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ##############################</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// panel definition init function</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> initPanels(){</span></div>
<div class="l li"><span class="si">        createPanels(); </span><span class="s2-89">// the actual creation of the GameObject</span></div>
<div class="l li"><span class="si">        onPanelCreate(); </span><span class="s2-89">// the onCreate function for the panel (if any)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to call all related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyPanels(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(JMFUtils.isPooling){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// ******** POOL MANAGER version *********</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// give back backPanel to the pool</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( backPanel != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[panelPoolName].Despawn(backPanel.transform);</span></div>
<div class="l li"><span class="si">                backPanel = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// give back frontPanel to the pool</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( frontPanel != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[panelPoolName].Despawn(frontPanel.transform);</span></div>
<div class="l li"><span class="si">                frontPanel = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// give back defaultPanel to the pool</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( defaultPanel != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[panelPoolName].Despawn(defaultPanel.transform);</span></div>
<div class="l li"><span class="si">                defaultPanel = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// ******** NON POOL MANAGER version ********</span></div>
<div class="l li"><span class="si">            Object.Destroy(backPanel); </span><span class="s2-89">// destroy previous leftover panel (if any)</span></div>
<div class="l li"><span class="si">            Object.Destroy(frontPanel); </span><span class="s2-89">// destroy previous leftover panel (if any)</span></div>
<div class="l li"><span class="si">            Object.Destroy(defaultPanel); </span><span class="s2-89">// destroy previous default panel (if any)</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to call all related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> createPanels(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(durability &lt; 0 &amp;&amp; !(pnd == master.gm.panelTypes[0]) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(pi.Count &gt; 1){ </span><span class="s2-89">// if using multi-panels</span></div>
<div class="l li"><span class="si">                destroyPanels(); </span><span class="s2-89">// remove old panels first</span></div>
<div class="l li"><span class="si">                pi.RemoveAt(pi.Count-1); </span><span class="s2-89">// removes the last entry...</span></div>
<div class="l li"><span class="si">                createPanels(); </span><span class="s2-89">// adds new panel's GUI</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// not using multi-panels, re-use the current panel</span></div>
<div class="l li"><span class="si">                setType( master.gm.panelTypes[0], 0 ); </span><span class="s2-89">// change back to basic panel</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// stop here...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// the actual creation of the GameObject // final init for the top panel...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!pnd.hasStartingPiece &amp;&amp; master.isFilled){</span></div>
<div class="l li"><span class="si">            master.piece.removePiece();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        List&lt;PanelInfo&gt; tempPi = </span><span class="s2-90">new</span><span class="si"> List&lt;PanelInfo&gt;();</span></div>
<div class="l li"><span class="si">        tempPi.AddRange(pi.ToArray());</span></div>
<div class="l li"><span class="si">        pi.Reverse(); </span><span class="s2-89">// iterate backwards...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(pi.Count &gt; 0){</span></div>
<div class="l li"><span class="si">            destroyPanels(); </span><span class="s2-89">// remove old panels first</span></div>
<div class="l li"><span class="si">            createFrontPanel(); </span><span class="s2-89">// the front panel as the foreground on top of the game piece</span></div>
<div class="l li"><span class="si">            createBackPanel(); </span><span class="s2-89">// the back panel as the background</span></div>
<div class="l li"><span class="si">            pi.RemoveAt(pi.Count - 1); </span><span class="s2-89">// remove the entry when done processing...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        pi = tempPi; </span><span class="s2-89">// re-assign back the panelInfo list...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        attachPanelScript(); </span><span class="s2-89">// attaches the panel script</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// to create the background visual... </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> createBackPanel() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pnd.hasDefaultPanel){</span></div>
<div class="l li"><span class="si">            createDefaultPanel(); </span><span class="s2-89">// creates the default panel when specified</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pnd.isInFront || pnd.hasNoSkin || (pi.Count &gt; 1 &amp;&amp; !pnd.showSkinUnderMultiPanels) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// already created a front panel, do not make this back panel</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pnd.skin.Length &gt; 0) { </span><span class="s2-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(JMFUtils.isPooling){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">                backPanel = PoolManager.Pools[panelPoolName].Spawn(</span></div>
<div class="l li"><span class="si">                    pnd.skin[Mathf.Min( pnd.skin.Length-1,Mathf.Abs(durability-1))].transform).gameObject;</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// NON POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">                backPanel = (GameObject) Object.Instantiate(pnd.skin[Mathf.Min(</span></div>
<div class="l li"><span class="si">                    pnd.skin.Length-1,Mathf.Abs(durability-1))]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">//----------</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s2-85">&quot;No panel skin available. Have you forgotten to skin the panel script?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(backPanel != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// re-parent the object to the gameManager panel</span></div>
<div class="l li"><span class="si">            backPanel.transform.parent = master.gm.gameObject.transform;</span></div>
<div class="l li"><span class="si">            backPanel.transform.localPosition = master.localPos;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(JMFUtils.gm.boardType){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">                JMFUtils.autoScale(backPanel); </span><span class="s2-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                JMFUtils.autoScaleHexagon(backPanel); </span><span class="s2-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// positioning code</span></div>
<div class="l li"><span class="si">            backPanel.transform.localPosition +=</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">new</span><span class="si"> Vector3(0,0,5 + master.gm.size + backPanel.transform.localPosition.z);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// to create the foreground visual...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> createFrontPanel() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!pnd.isInFront || pnd.hasNoSkin || (pi.Count &gt; 1 &amp;&amp; !pnd.showSkinUnderMultiPanels) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// not a front panel... no need to proceed</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pnd.skin.Length &gt; 0) { </span><span class="s2-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(JMFUtils.isPooling){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">                frontPanel = PoolManager.Pools[panelPoolName].Spawn(</span></div>
<div class="l li"><span class="si">                    pnd.skin[Mathf.Min( pnd.skin.Length-1,Mathf.Abs(durability-1))].transform).gameObject;</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// NON POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">                frontPanel = (GameObject) Object.Instantiate(pnd.skin[Mathf.Min(</span></div>
<div class="l li"><span class="si">                    pnd.skin.Length-1,Mathf.Abs(durability-1))]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">        }</span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s2-85">&quot;No panel skin available. Have you forgotten to skin the panel script?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(frontPanel != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// re-parent the object to the gameManager panel</span></div>
<div class="l li"><span class="si">            frontPanel.transform.parent = master.gm.gameObject.transform;</span></div>
<div class="l li"><span class="si">            frontPanel.transform.localPosition = master.localPos;</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(JMFUtils.gm.boardType){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">                JMFUtils.autoScale(frontPanel); </span><span class="s2-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                JMFUtils.autoScaleHexagon(frontPanel); </span><span class="s2-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// minor code just to arrange the Z order to always be at the front</span></div>
<div class="l li"><span class="si">            frontPanel.transform.localPosition +=</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">new</span><span class="si"> Vector3(0,0,-5 - master.gm.size + frontPanel.transform.localPosition.z);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to create the default panel - in case of tranparency backPanels</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">protected</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> createDefaultPanel(){</span></div>
<div class="l li"><span class="si">        GameObject prefab = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(JMFUtils.gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">((master.arrayRef[0] + master.arrayRef[1]) % 2 == 0){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(JMFUtils.vm.defaultSquareBackPanel != </span><span class="s2-90">null</span><span class="si">) { </span><span class="s2-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">                    prefab = JMFUtils.vm.defaultSquareBackPanel;</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    Debug.Log(</span><span class="s2-85">&quot;whoops? have you forgotten to provide a default panel prefab?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// do not continue...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(JMFUtils.vm.defaultAltSquareBackPanel != </span><span class="s2-90">null</span><span class="si">) { </span><span class="s2-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">                    prefab = JMFUtils.vm.defaultAltSquareBackPanel;</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(JMFUtils.vm.defaultSquareBackPanel != </span><span class="s2-90">null</span><span class="si">) { </span><span class="s2-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">                    prefab = JMFUtils.vm.defaultSquareBackPanel;</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    Debug.Log(</span><span class="s2-85">&quot;whoops? have you forgotten to provide a default panel prefab?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// do not continue...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(JMFUtils.vm.defaultHexBackPanel != </span><span class="s2-90">null</span><span class="si">) { </span><span class="s2-89">// if the prefab exists</span></div>
<div class="l li"><span class="si">                prefab = JMFUtils.vm.defaultHexBackPanel;</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                Debug.Log(</span><span class="s2-85">&quot;whoops? have you forgotten to provide a default panel prefab?&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// do not continue...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(JMFUtils.isPooling){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// POOL MANAGER Version ~~~~~~~~~</span></div>
<div class="l li"><span class="si">            defaultPanel = PoolManager.Pools[panelPoolName].Spawn(prefab.transform).gameObject;</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// NON POOL MANAGER Version ~~~~~~~~</span></div>
<div class="l li"><span class="si">            defaultPanel = (GameObject) Object.Instantiate(prefab);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// re-parent the object to the gameManager panel</span></div>
<div class="l li"><span class="si">        defaultPanel.transform.parent = master.gm.gameObject.transform;</span></div>
<div class="l li"><span class="si">        defaultPanel.transform.localPosition = master.localPos;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(JMFUtils.gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square :</span></div>
<div class="l li"><span class="si">            JMFUtils.autoScale(defaultPanel); </span><span class="s2-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            JMFUtils.autoScaleHexagon(defaultPanel); </span><span class="s2-89">// auto scaling feature</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// minor code just to arrange the Z order to always be at the back</span></div>
<div class="l li"><span class="si">        defaultPanel.transform.localPosition +=</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">new</span><span class="si"> Vector3(0,0,10 + master.gm.size + defaultPanel.transform.localPosition.z);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> attachPanelScript(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pnd.hasNoSkin &amp;&amp; !pnd.hasDefaultPanel){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// no panels created... empty panel perhaps?</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pnd.hasNoSkin &amp;&amp; pnd.hasDefaultPanel){ </span><span class="s2-89">// no skin but has default panel?</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(defaultPanel.GetComponent&lt;PanelTracker&gt;() == </span><span class="s2-90">null</span><span class="si">) </span></div>
<div class="l li"><span class="si">                defaultPanel.AddComponent&lt;PanelTracker&gt;();</span></div>
<div class="l li"><span class="si">            defaultPanel.GetComponent&lt;PanelTracker&gt;().arrayRef = master.arrayRef;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(pnd.isInFront){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(frontPanel.GetComponent&lt;PanelTracker&gt;() == </span><span class="s2-90">null</span><span class="si">)</span></div>
<div class="l li"><span class="si">                frontPanel.AddComponent&lt;PanelTracker&gt;();</span></div>
<div class="l li"><span class="si">            frontPanel.GetComponent&lt;PanelTracker&gt;().arrayRef = master.arrayRef;</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(backPanel.GetComponent&lt;PanelTracker&gt;() == </span><span class="s2-90">null</span><span class="si">) </span></div>
<div class="l li"><span class="si">                backPanel.AddComponent&lt;PanelTracker&gt;();</span></div>
<div class="l li"><span class="si">            backPanel.GetComponent&lt;PanelTracker&gt;().arrayRef = master.arrayRef;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// NOTES :- the box collider for this to work is already defined in PanelTracker.cs script itself.</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ###########################</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ACCESS FUNCTIONS FOR PANEL-DEFINITION</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// relays information to PanelDefinition for easy access from GameManager</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ###########################</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// for external scripts to call, will indicate that the panel got hit</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> gotHit(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">bool</span><span class="si"> registeredHit = pnd.gotHit(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(registeredHit){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(durability &lt; 1 &amp;&amp; !(pnd == master.gm.panelTypes[0]) ){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(pi.Count &gt; 1){ </span><span class="s2-89">// if using multi-panels</span></div>
<div class="l li"><span class="si">                    destroyPanels(); </span><span class="s2-89">// remove old panel's GUI</span></div>
<div class="l la d1"><span class="sa">                    pi[pi.Count-1].pnd.onPanelDestroy(this); // on destroy event call</span></div>
<div class="l li"><span class="si">                    pi.RemoveAt(pi.Count-1); </span><span class="s2-89">// removes the last entry...</span></div>
<div class="l li"><span class="si">                    createPanels(); </span><span class="s2-89">// adds new panel's GUI</span></div>
<div class="l li"><span class="si">                    onPanelCreate(); </span><span class="s2-89">// calls the createPanel event</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// not using multi-panels, re-use the current panel</span></div>
<div class="l li"><span class="si">                    setType( master.gm.panelTypes[0], 0 ); </span><span class="s2-89">// change back to basic panel</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                createPanels(); </span><span class="s2-89">// refresh the panel gameObjects</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> registeredHit;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// for external scripts to call, if splash damage hits correct panel type, perform the hit</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> splashDamage() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">bool</span><span class="si"> registeredHit = pnd.splashDamage(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(registeredHit){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(durability &lt; 1 &amp;&amp; !(pnd == master.gm.panelTypes[0]) ){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(pi.Count &gt; 1){ </span><span class="s2-89">// if using multi-panels</span></div>
<div class="l li"><span class="si">                    destroyPanels(); </span><span class="s2-89">// remove old panel's GUI</span></div>
<div class="l la d2"><span class="sa">                    pi[pi.Count-1].pnd.onPanelDestroy(this); // on destroy event call</span></div>
<div class="l li"><span class="si">                    pi.RemoveAt(pi.Count-1); </span><span class="s2-89">// removes the last entry...</span></div>
<div class="l li"><span class="si">                    createPanels(); </span><span class="s2-89">// adds new panel's GUI</span></div>
<div class="l li"><span class="si">                    onPanelCreate(); </span><span class="s2-89">// calls the createPanel event</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// not using multi-panels, re-use the current panel</span></div>
<div class="l li"><span class="si">                    setType( master.gm.panelTypes[0], 0 ); </span><span class="s2-89">// change back to basic panel</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                createPanels(); </span><span class="s2-89">// refresh the panel gameObjects</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> registeredHit;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// on destroy call</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPanelDestroy() {</span></div>
<div class="l li"><span class="si">        pnd.onPanelDestroy(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// on create call</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPanelCreate() {</span></div>
<div class="l li"><span class="si">        pnd.onPanelCreate(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check if pieces can fall into this board box</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> allowsGravity() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> pnd.allowsGravity(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// if the piece here can be used to form a match</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isMatchable() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> pnd.isMatchable(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// if the piece here can be switched around</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isSwitchable() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> pnd.isSwitchable(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// if the piece here (if any) can be destroyed</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isDestructible() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> pnd.isDestructible(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check if pieces can be stolen from this box by gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isStealable() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> pnd.isStealable(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check if this board needs to be filled by gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isFillable() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> pnd.isFillable(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check if this board is a solid panel that gravity cannot pass through</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isSolid() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> pnd.isSolid(</span><span class="s2-90">this</span><span class="si">);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">// a class to store data about a panel ( use for storing multiple panel entries )</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> PanelInfo {</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> PanelDefinition pnd;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> durability = 0;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject backPanel; </span><span class="s2-89">// for visuals</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject frontPanel; </span><span class="s2-89">// for visuals</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs"><b>2 differences</b>: 2 lines, 0 inline differences in 0 changed lines</div><div id="colors"><div class="sa" title="Added lines: 2, inline additions in changed lines: 0">Added(2,0)</div><div class="sd" title="Deleted lines: 0, inline deletions in changed lines: 0">Deleted(0,0)</div><div class="sc" title="Changed lines: 0">Changed(0)</div><div class="sc2" title="Inline changes in changed lines: 0">Changed in changed(0)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on August 13, 2015, 2:06 AM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 8.0.0.1.
    </div>
</div>
</body>

</html>

