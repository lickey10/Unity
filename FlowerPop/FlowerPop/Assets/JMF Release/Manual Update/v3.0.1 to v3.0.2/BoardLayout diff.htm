<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 8.0.0.0 -->
<!-- saved from url=(0014)about:internet -->

<head>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0; height: 12px; border-bottom: 1px solid #666;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg, .lh{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}
.lh{font-weight: 700; color: #3A33BC; display: inline-block; position: relative; white-space: nowrap;}
.lh:before{position: absolute; display:block; top:0; left:0; bottom:0; content: attr(data-content); background-color:#FFF; color:#FFF; z-index:-1; padding-right:.5em;}
.lh:after{position:absolute; content:''; display: block; left:0; right:0; top:50%; background-color:#3A33BC; height:1px; min-height:1px; z-index:-2;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2576px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="/4FD8B397F5AF4D68BC7217E2B7C5B70A/4C49FEE6-C7B5-E643-95D8-00C465BEB40A/main.js" charset="UTF-8"></script><script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2576
    var $diffs = [
null,
{d:'Diff 1: Delete 1 line (251, first file) after line 250 (second file)',l:[250,250]},
{d:'Diff 2: Delete 1 line (254, first file) after line 252 (second file)',l:[253,253]},
{d:'Diff 3: Delete 1 line (257, first file) after line 254 (second file)',l:[256,256]},
{d:'Diff 4: Delete 1 line (276, first file) after line 272 (second file)',l:[275,275]},
{d:'Diff 5: Delete 1 line (279, first file) after line 274 (second file)',l:[278,278]},
{d:'Diff 6: Delete 1 line (282, first file) after line 276 (second file)',l:[281,281]},
{d:'Diff 7: Delete 1 line (302, first file) after line 295 (second file)',l:[301,301]},
{d:'Diff 8: Delete 1 line (305, first file) after line 297 (second file)',l:[304,304]},
{d:'Diff 9: Delete 1 line (308, first file) after line 299 (second file)',l:[307,307]},
{d:'Diff 10: Delete 1 line (327, first file) after line 317 (second file)',l:[326,326]},
{d:'Diff 11: Delete 1 line (330, first file) after line 319 (second file)',l:[329,329]},
{d:'Diff 12: Delete 1 line (333, first file) after line 321 (second file)',l:[332,332]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="BoardLayout(old).cs"><b>BoardLayout(old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>
<div class="num">409 </div>
<div class="num">410 </div>
<div class="num">411 </div>
<div class="num">412 </div>
<div class="num">413 </div>
<div class="num">414 </div>
<div class="num">415 </div>
<div class="num">416 </div>
<div class="num">417 </div>
<div class="num">418 </div>
<div class="num">419 </div>
<div class="num">420 </div>
<div class="num">421 </div>
<div class="num">422 </div>
<div class="num">423 </div>
<div class="num">424 </div>
<div class="num">425 </div>
<div class="num">426 </div>
<div class="num">427 </div>
<div class="num">428 </div>
<div class="num">429 </div>
<div class="num">430 </div>
<div class="num">431 </div>
<div class="num">432 </div>
<div class="num">433 </div>
<div class="num">434 </div>
<div class="num">435 </div>
<div class="num">436 </div>
<div class="num">437 </div>
<div class="num">438 </div>
<div class="num">439 </div>
<div class="num">440 </div>
<div class="num">441 </div>
<div class="num">442 </div>
<div class="num">443 </div>
<div class="num">444 </div>
<div class="num">445 </div>
<div class="num">446 </div>
<div class="num">447 </div>
<div class="num">448 </div>
<div class="num">449 </div>
<div class="num">450 </div>
<div class="num">451 </div>
<div class="num">452 </div>
<div class="num">453 </div>
<div class="num">454 </div>
<div class="num">455 </div>
<div class="num">456 </div>
<div class="num">457 </div>
<div class="num">458 </div>
<div class="num">459 </div>
<div class="num">460 </div>
<div class="num">461 </div>
<div class="num">462 </div>
<div class="num">463 </div>
<div class="num">464 </div>
<div class="num">465 </div>
<div class="num">466 </div>
<div class="num">467 </div>
<div class="num">468 </div>
<div class="num">469 </div>
<div class="num">470 </div>
<div class="num">471 </div>
<div class="num">472 </div>
<div class="num">473 </div>
<div class="num">474 </div>
<div class="num">475 </div>
<div class="num">476 </div>
<div class="num">477 </div>
<div class="num">478 </div>
<div class="num">479 </div>
<div class="num">480 </div>
<div class="num">481 </div>
<div class="num">482 </div>
<div class="num">483 </div>
<div class="num">484 </div>
<div class="num">485 </div>
<div class="num">486 </div>
<div class="num">487 </div>
<div class="num">488 </div>
<div class="num">489 </div>
<div class="num">490 </div>
<div class="num">491 </div>
<div class="num">492 </div>
<div class="num">493 </div>
<div class="num">494 </div>
<div class="num">495 </div>
<div class="num">496 </div>
<div class="num">497 </div>
<div class="num">498 </div>
<div class="num">499 </div>
<div class="num">500 </div>
<div class="num">501 </div>
<div class="num">502 </div>
<div class="num">503 </div>
<div class="num">504 </div>
<div class="num">505 </div>
<div class="num">506 </div>
<div class="num">507 </div>
<div class="num">508 </div>
<div class="num">509 </div>
<div class="num">510 </div>
<div class="num">511 </div>
<div class="num">512 </div>
<div class="num">513 </div>
<div class="num">514 </div>
<div class="num">515 </div>
<div class="num">516 </div>
<div class="num">517 </div>
<div class="num">518 </div>
<div class="num">519 </div>
<div class="num">520 </div>
<div class="num">521 </div>
<div class="num">522 </div>
<div class="num">523 </div>
<div class="num">524 </div>
<div class="num">525 </div>
<div class="num">526 </div>
<div class="num">527 </div>
<div class="num">528 </div>
<div class="num">529 </div>
<div class="num">530 </div>
<div class="num">531 </div>
<div class="num">532 </div>
<div class="num">533 </div>
<div class="num">534 </div>
<div class="num">535 </div>
<div class="num">536 </div>
<div class="num">537 </div>
<div class="num">538 </div>
<div class="num">539 </div>
<div class="num">540 </div>
<div class="num">541 </div>
<div class="num">542 </div>
<div class="num">543 </div>
<div class="num">544 </div>
<div class="num">545 </div>
<div class="num">546 </div>
<div class="num">547 </div>
<div class="num">548 </div>
<div class="num">549 </div>
<div class="num">550 </div>
<div class="num">551 </div>
<div class="num">552 </div>
<div class="num">553 </div>
<div class="num">554 </div>
<div class="num">555 </div>
<div class="num">556 </div>
<div class="num">557 </div>
<div class="num">558 </div>
<div class="num">559 </div>
<div class="num">560 </div>
<div class="num">561 </div>
<div class="num">562 </div>
<div class="num">563 </div>
<div class="num">564 </div>
<div class="num">565 </div>
<div class="num">566 </div>
<div class="num">567 </div>
<div class="num">568 </div>
<div class="num">569 </div>
<div class="num">570 </div>
<div class="num">571 </div>
<div class="num">572 </div>
<div class="num">573 </div>
<div class="num">574 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s1-89">///</span></div>
<div class="l li"><span class="s1-89">/// NOTICE :</span></div>
<div class="l li"><span class="s1-89">/// This script is a setup function to customize the gameBoard looks during gameplay.</span></div>
<div class="l li"><span class="s1-89">///</span></div>
<div class="l li"><span class="s1-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s1-89">///</span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> BoardLayout : MonoBehaviour {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameManager gm;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If enabled, will generate a random board&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">             </span><span class="s1-85">&quot;\nwhenever a new game starts disregarding the below layout.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> randomOnStart = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Click behaviour of the buttons on the BoardLayout.&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">        </span><span class="s1-85">&quot;\nhold 'ctrl-btn' to alternate between the modes during clicks.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> useSelector = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="s1-89">//  [Tooltip(&quot;Shows the hex Grid style when&quot;)]</span></div>
<div class="l li"><span class="s1-89">//  public bool showHexGrid = true;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Shows/hides the sub-panel buttons.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showSubPanels = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> hidePanel1 = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> hidePanel2 = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> hidePanel3 = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> PanelDefinition[] panelScripts; </span><span class="s1-89">// panel reference scripts to be used</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> PieceDefinition[] pieceScripts; </span><span class="s1-89">// piece reference scripts to be used</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> SubPanelDefinition[] subPanelScripts; </span><span class="s1-89">// piece reference scripts to be used</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// these are max values for a panel type during randomize</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> PanelLimit[] randomPanelLimit;</span></div>
<div class="l li"><span class="si">    [System.Serializable]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> PanelLimit {</span></div>
<div class="l li"><span class="si">        [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">string</span><span class="si"> name;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> randomLimit;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// these are the counter for the max panels above</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] randomPanelCount;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// these are the texture array for representing the panels</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextureArray[] panelEditVisuals;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// these are the texture array for representing the pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextureArray[] pieceEditVisuals;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// these are the texture array for representing the sub panels</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> TextureArray[] subPanelEditVisuals;</span></div>
<div class="l li"><span class="si">    [System.Serializable]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> TextureArray {</span></div>
<div class="l li"><span class="si">        [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">string</span><span class="si"> name;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> Texture texture;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] panelArray; </span><span class="s1-89">// the PanelType[] converted to be and int reference so that it is serialisable</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] pStrength; </span><span class="s1-89">// the strength of the panel assigned</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> MultiPanelArray[] multiPanelArray;</span></div>
<div class="l li"><span class="si">    [System.Serializable]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> MultiPanelArray {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> List&lt;</span><span class="s1-90">int</span><span class="si">&gt; panelArray; </span><span class="s1-89">// the PanelType[] converted to be and int reference so that it is serialisable</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> List&lt;</span><span class="s1-90">int</span><span class="si">&gt; pStrength; </span><span class="s1-89">// the strength of the panel assigned</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] subPanelTBArray; </span><span class="s1-89">// the subPanelType[] Top Bottom</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] spTBStrength; </span><span class="s1-89">// the strength of the subpanel assigned</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] subPanelLRArray; </span><span class="s1-89">// the subPanelType[] Left Right</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] spLRStrength; </span><span class="s1-89">// the strength of the subpanel assigned</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] subPanelLRAltArray; </span><span class="s1-89">// the subPanelType[] Left Right Altenative</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] spLRAltStrength; </span><span class="s1-89">// the strength of the subpanel assigned</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] pieceArray; </span><span class="s1-89">// the piece type to be assigned during gameplay.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] colorArray; </span><span class="s1-89">// the manual skin to assign ( semi randomized )</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// these textures are for inspector visuals only - does not effect gameplay</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// paired and referenced by &quot;BoardSetup&quot; GUI script</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector2 scrollPos; </span><span class="s1-89">// for the scrollbar</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector2 scrollPos2; </span><span class="s1-89">// for the scrollbar</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector2 scrollPos3; </span><span class="s1-89">// for the scrollbar</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// for post manual color pre-start match</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si">[,] isManual;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// weighted colors</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;WeightedLayout&gt; colorWeight;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> WeightedLayout displayedWeight;</span></div>
<div class="l li"><span class="si">    [System.Serializable]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> WeightedLayout {</span></div>
<div class="l li"><span class="si">        [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">string</span><span class="si"> name;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> useWeights = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        [Range(0,100)]</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">public</span><span class="si"> List&lt;</span><span class="s1-90">int</span><span class="si">&gt; weights = </span><span class="s1-90">new</span><span class="si"> List&lt;</span><span class="s1-90">int</span><span class="si">&gt;(9);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">int</span><span class="si"> totalWeight = 0; </span><span class="s1-89">// variable to hold the total weights</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">int</span><span class="si"> selected = 0; </span><span class="s1-89">// a variable to store the selected random range for weights</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">int</span><span class="si"> addedWeight = 0; </span><span class="s1-89">// a variable to store the cumulative added weight for calculations</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// called by GameManager for panel setup during pre-game init</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setupGamePanels(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(randomOnStart){</span></div>
<div class="l li"><span class="si">            randomize();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// code below sets up the layout as per shown in the inspector</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> num;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> num2;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = gm.boardHeight -1 ; y &gt;= 0 ; y--){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(multiPanelArray[count].panelArray.Count &gt; 0){ </span><span class="s1-89">// multi-panel creations</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> z = 0; z &lt; multiPanelArray[count].panelArray.Count; z++){ </span><span class="s1-89">// add each multi-Panels</span></div>
<div class="l li"><span class="si">                        num = multiPanelArray[count].panelArray[z];</span></div>
<div class="l li"><span class="si">                        num2 = multiPanelArray[count].pStrength[z];</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-89">// adds the type by PanelDefinition selected</span></div>
<div class="l li"><span class="si">                        gm.board[x,y].panel.addType( panelScripts[num], num2,</span><span class="s1-90">false</span><span class="si">,</span><span class="s1-90">false</span><span class="si"> );</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// normal panel creation</span></div>
<div class="l li"><span class="si">                    num = panelArray[count];</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// set the type by PanelDefinition selected</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].panel.setType( panelScripts[num], pStrength[count] );</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setupGameSubPanels();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setupGameSubPanels(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// code below sets up the layout as per shown in the inspector</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> num;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = 0 ; y &lt; gm.boardHeight+1; y++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth+1; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// create the panel and set the type by SubPanelDefinition selected</span></div>
<div class="l li"><span class="si">                num = subPanelTBArray[count];</span></div>
<div class="l li"><span class="si">                gm.subPanelV[x,y].setType( subPanelScripts[num], spTBStrength[count]);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                num = subPanelLRArray[count];</span></div>
<div class="l li"><span class="si">                gm.subPanelH[x,y,0].setType( subPanelScripts[num], spLRStrength[count]);</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(gm.boardType == BoardType.Hexagon){</span></div>
<div class="l li"><span class="si">                    num = subPanelLRAltArray[count];</span></div>
<div class="l li"><span class="si">                    gm.subPanelH[x,y,1].setType( subPanelScripts[num], spLRAltStrength[count]);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setupGamePieces(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// code below sets up the pieces as per shown in the inspector</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// color randomization</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> randomColor = Random.Range(0,9);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// save the manual color reference</span></div>
<div class="l li"><span class="si">        isManual = </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">bool</span><span class="si">[gm.boardWidth,gm.boardHeight]; </span><span class="s1-89">// size of the board</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = gm.boardHeight -1 ; y &gt;= 0 ; y--){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// init default value</span></div>
<div class="l li"><span class="si">                isManual[x,y] = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s1-89">// set the piece type first</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(pieceArray[count] != 0 ){</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].setSpecialPiece( pieceScripts[pieceArray[count] ] );</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s1-89">// then set the color (if defined...)</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(colorArray[count] != 0 &amp;&amp; gm.board[x,y].isFilled &amp;&amp; !gm.board[x,y].piece.pd.isSpecial){</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].piece.slotNum = (colorArray[count] + randomColor) % gm.NumOfActiveType ;</span></div>
<div class="l li"><span class="si">                    isManual[x,y] = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// manual override is true</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(gm.board[x,y].isFilled &amp;&amp; !gm.board[x,y].piece.pd.isSpecial &amp;&amp; colorWeight[count].useWeights){ </span><span class="s1-89">// weights distribution functionality</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// run once weighted calculation...</span></div>
<div class="l li"><span class="si">                    totalWeight = 0; </span><span class="s1-89">// reset the value first...</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> z = 0; z &lt; gm.NumOfActiveType; z++){ </span><span class="s1-89">// adds all available skin based on active type</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(z &lt; colorWeight[count].weights.Count ){ </span><span class="s1-89">// ensure we have allocated weights and add to the list</span></div>
<div class="l li"><span class="si">                            totalWeight += colorWeight[count].weights[z];</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    selected = Random.Range(1,totalWeight+1); </span><span class="s1-89">// the selected weight by random</span></div>
<div class="l li"><span class="si">                    addedWeight = 0; </span><span class="s1-89">// resets the value first...</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> z = 0; z &lt; colorWeight[count].weights.Count; z++){</span></div>
<div class="l li"><span class="si">                        addedWeight+= colorWeight[count].weights[z];</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(colorWeight[count].weights[z] &gt; 0 &amp;&amp; addedWeight &gt; selected){</span></div>
<div class="l li"><span class="si">                            gm.board[x,y].piece.slotNum = z; </span><span class="s1-89">// found the skin we want to use based on the selected weight</span></div>
<div class="l li"><span class="si">                            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    isManual[x,y] = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// manual override is true</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// pre-game eliminate pre-start match</span></div>
<div class="l li"><span class="si">        postPrestartMatch();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> postPrestartMatch(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// redesign the board until there's no starting match</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.eliminatePreStartMatch &amp;&amp; gm.NumOfActiveType &gt;= 2 ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++) { </span><span class="s1-89">// iterate through each board block</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">( findPrematches(x,y) ){ </span><span class="s1-89">// find any match and change its type</span></div>
<div class="l li"><span class="si">                        x = 0; y = -1; </span><span class="s1-89">// restart the loop</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(count &gt; 9999){ </span><span class="s1-89">// if cannot solve by this num of tries, break!</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(count &gt; 9999){ </span><span class="s1-89">// if cannot solve by this num of tries, break!</span></div>
<div class="l li"><span class="si">                    Debug.LogError(</span><span class="s1-85">&quot;failed to eliminate pre-start match...&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to eliminate pre-start matches</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> findPrematches(</span><span class="s1-90">int</span><span class="si"> xPos, </span><span class="s1-90">int</span><span class="si"> yPos) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// variables to keep track of the match potentials</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> matchingRows = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> matchingCols = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> matchingTR = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> matchingTL = 0;</span></div>
<div class="l li"><span class="si">        SubBoardPanel sbp;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!( gm.board[xPos,yPos].isFilled &amp;&amp; gm.board[xPos,yPos].canBeMatched() )  ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// no match can be made from here... quit~</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> mType = gm.board[xPos,yPos].piece.slotNum; </span><span class="s1-89">// identifier of the current block type</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">//  check columns</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> y = (yPos+1) ; y &lt; gm.boardHeight ; y++) { </span><span class="s1-89">//check the top side of the cube</span></div>
<div class="l li"><span class="si">            sbp = gm.board[xPos,y].getSubPanelBetween(gm.board[xPos,y-1]);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si"> ( gm.board[xPos,y].canBeMatched() &amp;&amp; sbp.isMatchable() &amp;&amp; gm.board[xPos,y].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                matchingCols++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si"> ( matchingCols &gt; 1 ) { </span><span class="s1-89">// if a column is matching</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(! (yPos+2 &gt;= gm.boardHeight || !gm.board[xPos,yPos+2].panel.pnd.hasStartingPiece || isManual[xPos,yPos+2]) ){</span></div>
<div class="l li"><span class="si">                gm.board[xPos,yPos+2].piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d1"><span class="sd">                gm.board[xPos,yPos+2].piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(! (yPos+1 &gt;= gm.boardHeight || !gm.board[xPos,yPos+1].panel.pnd.hasStartingPiece || isManual[xPos,yPos+1]) ){</span></div>
<div class="l li"><span class="si">                gm.board[xPos,yPos+1].piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d2"><span class="sd">                gm.board[xPos,yPos+1].piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(!isManual[xPos,yPos]){</span></div>
<div class="l li"><span class="si">                gm.board[xPos,yPos].piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d3"><span class="sd">                gm.board[xPos,yPos].piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Square : </span><span class="s1-89">// square type pre-match criteria...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check rows</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> x = (xPos+1) ; x &lt; gm.boardWidth ; x++) { </span><span class="s1-89">//check the right side of the cube</span></div>
<div class="l li"><span class="si">                sbp = gm.board[x,yPos].getSubPanelBetween(gm.board[x-1,yPos]);</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si"> ( gm.board[x,yPos].canBeMatched() &amp;&amp; sbp.isMatchable() &amp;&amp; gm.board[x,yPos].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    matchingRows++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si"> ( matchingRows &gt; 1 ){ </span><span class="s1-89">// if a row is matching</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(! (xPos+2 &gt;= gm.boardWidth || !gm.board[xPos+2,yPos].panel.pnd.hasStartingPiece || isManual[xPos+2,yPos]) ){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos+2,yPos].piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d4"><span class="sd">                    gm.board[xPos+2,yPos].piece.dressMe(); // assign a new type</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(! (xPos+1 &gt;= gm.boardWidth || !gm.board[xPos+1,yPos].panel.pnd.hasStartingPiece || isManual[xPos+1,yPos]) ){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos+1,yPos].piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d5"><span class="sd">                    gm.board[xPos+2,yPos].piece.dressMe(); // assign a new type</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(!isManual[xPos,yPos]){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos,yPos].piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d6"><span class="sd">                    gm.board[xPos,yPos].piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> BoardType.Hexagon : </span><span class="s1-89">// hex type pre-match criteria...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check TopLeft segment</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> gm.board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopLeft)) { </span><span class="s1-89">//check the topLeft side of the cube</span></div>
<div class="l li"><span class="si">                sbp = _board.getSubPanelBetween(_board.bottomRight);</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si"> ( _board.canBeMatched() &amp;&amp; sbp.isMatchable() &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    matchingTL++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si"> ( matchingTL &gt; 1 ){ </span><span class="s1-89">// if a row is matching</span></div>
<div class="l li"><span class="si">                Board TL2 = gm.board[xPos,yPos].getBoardFromDirection(BoardDirection.TopLeft,2);</span></div>
<div class="l li"><span class="si">                Board TL1 = gm.board[xPos,yPos].getBoardFromDirection(BoardDirection.TopLeft,1);</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(TL2.panel.pnd.hasStartingPiece &amp;&amp; !isManual[TL2.arrayRef[0],TL2.arrayRef[1]]){</span></div>
<div class="l li"><span class="si">                    TL2.piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d7"><span class="sd">                    TL2.piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(TL1.panel.pnd.hasStartingPiece &amp;&amp; !isManual[TL1.arrayRef[0],TL1.arrayRef[1]] ){</span></div>
<div class="l li"><span class="si">                    TL1.piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d8"><span class="sd">                    TL1.piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(!isManual[xPos,yPos]){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos,yPos].piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d9"><span class="sd">                    gm.board[xPos,yPos].piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check TopRight segment</span></div>
<div class="l li"><span class="si">            Board TR2 = gm.board[xPos,yPos].getBoardFromDirection(BoardDirection.TopRight,2);</span></div>
<div class="l li"><span class="si">            Board TR1 = gm.board[xPos,yPos].getBoardFromDirection(BoardDirection.TopRight,1);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(Board _board </span><span class="s1-90">in</span><span class="si"> gm.board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopRight)) { </span><span class="s1-89">//check the topRight side of the cube</span></div>
<div class="l li"><span class="si">                sbp = _board.getSubPanelBetween(_board.bottomLeft);</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si"> ( _board.canBeMatched() &amp;&amp; sbp.isMatchable() &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    matchingTR++; </span><span class="s1-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si"> ( matchingTR &gt; 1 ){ </span><span class="s1-89">// if a row is matching</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(TR2.panel.pnd.hasStartingPiece &amp;&amp; !isManual[TR2.arrayRef[0],TR2.arrayRef[1]] ){</span></div>
<div class="l li"><span class="si">                    TR2.piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d10"><span class="sd">                    TR2.piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(TR1.panel.pnd.hasStartingPiece &amp;&amp; !isManual[TR1.arrayRef[0],TR1.arrayRef[1]] ){</span></div>
<div class="l li"><span class="si">                    TR1.piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d11"><span class="sd">                    TR1.piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(!isManual[xPos,yPos]){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos,yPos].piece.slotNum = gm.ranType(); </span><span class="s1-89">// assign a new type</span></div>
<div class="l ld d12"><span class="sd">                    gm.board[xPos,yPos].piece.dressMe(); // update the GUI</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// piece is ok... move to the next</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> togglePanel(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        panelArray[position] = (panelArray[position] + val) % panelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(panelArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            panelArray[position] = panelScripts.Length-1; </span><span class="s1-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrength(position);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setPanel(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        panelArray[position] = val;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        setDefaultStrength(position);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> toggleMultiPanel(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val,</span><span class="s1-90">int</span><span class="si"> arrayNum){</span></div>
<div class="l li"><span class="si">        multiPanelArray[position].panelArray[arrayNum] =</span></div>
<div class="l li"><span class="si">            (multiPanelArray[position].panelArray[arrayNum] + val) % panelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(multiPanelArray[position].panelArray[arrayNum] &lt; 0){</span></div>
<div class="l li"><span class="si">            multiPanelArray[position].panelArray[arrayNum] = panelScripts.Length-1; </span><span class="s1-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrengthMultiPanel(position,arrayNum);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setMultiPanel(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val,</span><span class="s1-90">int</span><span class="si"> arrayNum){</span></div>
<div class="l li"><span class="si">        multiPanelArray[position].panelArray[arrayNum] = val;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        setDefaultStrengthMultiPanel(position,arrayNum);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// cycles through each piece type based on the &quot;Piece Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> togglePiece(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        pieceArray[position] = (pieceArray[position] + val) % pieceScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(pieceArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            pieceArray[position] = pieceScripts.Length-1; </span><span class="s1-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// set piece directly</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setPiece(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        pieceArray[position] = val;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// cycles through each piece type based on the &quot;Piece Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> toggleColor(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        colorArray[position] = (colorArray[position] + val) % (gm.NumOfActiveType + 1);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(colorArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            colorArray[position] = gm.NumOfActiveType; </span><span class="s1-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> setDefaultStrength(</span><span class="s1-90">int</span><span class="si"> position){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; panelScripts.Length; x++){ </span><span class="s1-89">// search the array</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(panelScripts[x] == panelScripts[panelArray[position]] ){ </span><span class="s1-89">// if found the correct array</span></div>
<div class="l li"><span class="si">                pStrength[position] = panelScripts[x].defaultStrength; </span><span class="s1-89">// return the associated default strength</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> setDefaultStrengthMultiPanel(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> arrayNum){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; panelScripts.Length; x++){ </span><span class="s1-89">// search the array</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(panelScripts[x] == panelScripts[multiPanelArray[position].panelArray[arrayNum]] ){ </span><span class="s1-89">// if found the correct array</span></div>
<div class="l li"><span class="si">                multiPanelArray[position].pStrength[arrayNum] = panelScripts[x].defaultStrength; </span><span class="s1-89">// return the associated default strength</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> toggleSubPanelTB(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelTBArray[position] = (subPanelTBArray[position] + val) % subPanelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(subPanelTBArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            subPanelTBArray[position] = subPanelScripts.Length-1; </span><span class="s1-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s1-90">ref</span><span class="si"> subPanelTBArray,</span><span class="s1-90">ref</span><span class="si"> spTBStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setSubPanelTB(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelTBArray[position] = val;</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s1-90">ref</span><span class="si"> subPanelTBArray,</span><span class="s1-90">ref</span><span class="si"> spTBStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> toggleSubPanelLR(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelLRArray[position] = (subPanelLRArray[position] + val) % subPanelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(subPanelLRArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            subPanelLRArray[position] = subPanelScripts.Length-1; </span><span class="s1-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s1-90">ref</span><span class="si"> subPanelLRArray,</span><span class="s1-90">ref</span><span class="si"> spLRStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setSubPanelLR(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelLRArray[position] = val;</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s1-90">ref</span><span class="si"> subPanelLRArray,</span><span class="s1-90">ref</span><span class="si"> spLRStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> toggleSubPanelLRAlt(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelLRAltArray[position] = (subPanelLRAltArray[position] + val) % subPanelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(subPanelLRAltArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            subPanelLRAltArray[position] = subPanelScripts.Length-1; </span><span class="s1-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s1-90">ref</span><span class="si"> subPanelLRAltArray,</span><span class="s1-90">ref</span><span class="si"> spLRAltStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> setSubPanelLRAlt(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelLRAltArray[position] = val;</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s1-90">ref</span><span class="si"> subPanelLRAltArray,</span><span class="s1-90">ref</span><span class="si"> spLRAltStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> setDefaultStrengthSubPanel(</span><span class="s1-90">int</span><span class="si"> position,</span><span class="s1-90">ref</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] subPanelArray, </span><span class="s1-90">ref</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] strengthArray){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; subPanelScripts.Length; x++){ </span><span class="s1-89">// search the array</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(subPanelScripts[x] == subPanelScripts[subPanelArray[position]] ){ </span><span class="s1-89">// if found the correct array</span></div>
<div class="l li"><span class="si">                strengthArray[position] = subPanelScripts[x].defaultStrength; </span><span class="s1-89">// return the associated default strength</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to reset everything!</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> resetMe(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                panelArray[count] = 0;</span></div>
<div class="l li"><span class="si">                pieceArray[count] = 0;</span></div>
<div class="l li"><span class="si">                colorArray[count] = 0;</span></div>
<div class="l li"><span class="si">                colorWeight = </span><span class="s1-90">new</span><span class="si"> List&lt;WeightedLayout&gt;();</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(MultiPanelArray mpa </span><span class="s1-90">in</span><span class="si"> multiPanelArray){</span></div>
<div class="l li"><span class="si">                    mpa.panelArray.Clear();</span></div>
<div class="l li"><span class="si">                    mpa.pStrength.Clear();</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                setDefaultStrength(count);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        resetSubPanelOnly(); </span><span class="s1-89">// resets sub panels too~!</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to reset all pieces to BASIC type</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> resetPieceOnly(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                pieceArray[count] = 0;</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to reset all piece color type to random</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> resetColorOnly(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                colorArray[count] = 0;</span></div>
<div class="l li"><span class="si">                colorWeight = </span><span class="s1-90">new</span><span class="si"> List&lt;WeightedLayout&gt;();</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to reset all panels to basic</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> resetPanelOnly(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                panelArray[count] = 0;</span></div>
<div class="l li"><span class="si">                setDefaultStrength(count);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(MultiPanelArray mpa </span><span class="s1-90">in</span><span class="si"> multiPanelArray){</span></div>
<div class="l li"><span class="si">            mpa.panelArray.Clear();</span></div>
<div class="l li"><span class="si">            mpa.pStrength.Clear();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to reset all panels to basic</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> resetSubPanelOnly(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth+1; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight+1; y++){</span></div>
<div class="l li"><span class="si">                subPanelTBArray[count] = subPanelLRArray[count] = subPanelLRAltArray[count] = 0;</span></div>
<div class="l li"><span class="si">                setDefaultStrengthSubPanel(count,</span><span class="s1-90">ref</span><span class="si"> subPanelTBArray,</span><span class="s1-90">ref</span><span class="si"> spTBStrength);</span></div>
<div class="l li"><span class="si">                setDefaultStrengthSubPanel(count,</span><span class="s1-90">ref</span><span class="si"> subPanelLRArray,</span><span class="s1-90">ref</span><span class="si"> spLRStrength);</span></div>
<div class="l li"><span class="si">                setDefaultStrengthSubPanel(count,</span><span class="s1-90">ref</span><span class="si"> subPanelLRAltArray,</span><span class="s1-90">ref</span><span class="si"> spLRAltStrength);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to click all panels</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> clickAll(</span><span class="s1-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                togglePanel(count,val);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// just a simple function to randomize all panels</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> randomize(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// reset to initial count of panels</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; randomPanelCount.Length; x++){</span></div>
<div class="l li"><span class="si">            randomPanelCount[x] = 0;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                panelArray[count] = generateNumber(); </span><span class="s1-89">// generate and assigns a random number</span></div>
<div class="l li"><span class="si">                setDefaultStrength(count);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// an internal function to generate a number but also keep within the max limits</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// of the panels defined.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">int</span><span class="si"> generateNumber(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> generated = Random.Range(0, panelScripts.Length);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(generated &gt; 0){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(Random.Range(0, 2) == 0){ </span><span class="s1-89">// 1/2 chance to make a special panel</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">( randomPanelCount[generated] &lt; randomPanelLimit[generated].randomLimit ){</span></div>
<div class="l li"><span class="si">                    randomPanelCount[generated]++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">return</span><span class="si"> generated;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> 0; </span><span class="s1-89">// if nothing happens above, return default panel</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="BoardLayout(new).cs"><b>BoardLayout(new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">    </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">    </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">    </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">    </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">    </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">    </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">    </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">    </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">    </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">    </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">    </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">    </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>
<div class="num">409 </div>
<div class="num">410 </div>
<div class="num">411 </div>
<div class="num">412 </div>
<div class="num">413 </div>
<div class="num">414 </div>
<div class="num">415 </div>
<div class="num">416 </div>
<div class="num">417 </div>
<div class="num">418 </div>
<div class="num">419 </div>
<div class="num">420 </div>
<div class="num">421 </div>
<div class="num">422 </div>
<div class="num">423 </div>
<div class="num">424 </div>
<div class="num">425 </div>
<div class="num">426 </div>
<div class="num">427 </div>
<div class="num">428 </div>
<div class="num">429 </div>
<div class="num">430 </div>
<div class="num">431 </div>
<div class="num">432 </div>
<div class="num">433 </div>
<div class="num">434 </div>
<div class="num">435 </div>
<div class="num">436 </div>
<div class="num">437 </div>
<div class="num">438 </div>
<div class="num">439 </div>
<div class="num">440 </div>
<div class="num">441 </div>
<div class="num">442 </div>
<div class="num">443 </div>
<div class="num">444 </div>
<div class="num">445 </div>
<div class="num">446 </div>
<div class="num">447 </div>
<div class="num">448 </div>
<div class="num">449 </div>
<div class="num">450 </div>
<div class="num">451 </div>
<div class="num">452 </div>
<div class="num">453 </div>
<div class="num">454 </div>
<div class="num">455 </div>
<div class="num">456 </div>
<div class="num">457 </div>
<div class="num">458 </div>
<div class="num">459 </div>
<div class="num">460 </div>
<div class="num">461 </div>
<div class="num">462 </div>
<div class="num">463 </div>
<div class="num">464 </div>
<div class="num">465 </div>
<div class="num">466 </div>
<div class="num">467 </div>
<div class="num">468 </div>
<div class="num">469 </div>
<div class="num">470 </div>
<div class="num">471 </div>
<div class="num">472 </div>
<div class="num">473 </div>
<div class="num">474 </div>
<div class="num">475 </div>
<div class="num">476 </div>
<div class="num">477 </div>
<div class="num">478 </div>
<div class="num">479 </div>
<div class="num">480 </div>
<div class="num">481 </div>
<div class="num">482 </div>
<div class="num">483 </div>
<div class="num">484 </div>
<div class="num">485 </div>
<div class="num">486 </div>
<div class="num">487 </div>
<div class="num">488 </div>
<div class="num">489 </div>
<div class="num">490 </div>
<div class="num">491 </div>
<div class="num">492 </div>
<div class="num">493 </div>
<div class="num">494 </div>
<div class="num">495 </div>
<div class="num">496 </div>
<div class="num">497 </div>
<div class="num">498 </div>
<div class="num">499 </div>
<div class="num">500 </div>
<div class="num">501 </div>
<div class="num">502 </div>
<div class="num">503 </div>
<div class="num">504 </div>
<div class="num">505 </div>
<div class="num">506 </div>
<div class="num">507 </div>
<div class="num">508 </div>
<div class="num">509 </div>
<div class="num">510 </div>
<div class="num">511 </div>
<div class="num">512 </div>
<div class="num">513 </div>
<div class="num">514 </div>
<div class="num">515 </div>
<div class="num">516 </div>
<div class="num">517 </div>
<div class="num">518 </div>
<div class="num">519 </div>
<div class="num">520 </div>
<div class="num">521 </div>
<div class="num">522 </div>
<div class="num">523 </div>
<div class="num">524 </div>
<div class="num">525 </div>
<div class="num">526 </div>
<div class="num">527 </div>
<div class="num">528 </div>
<div class="num">529 </div>
<div class="num">530 </div>
<div class="num">531 </div>
<div class="num">532 </div>
<div class="num">533 </div>
<div class="num">534 </div>
<div class="num">535 </div>
<div class="num">536 </div>
<div class="num">537 </div>
<div class="num">538 </div>
<div class="num">539 </div>
<div class="num">540 </div>
<div class="num">541 </div>
<div class="num">542 </div>
<div class="num">543 </div>
<div class="num">544 </div>
<div class="num">545 </div>
<div class="num">546 </div>
<div class="num">547 </div>
<div class="num">548 </div>
<div class="num">549 </div>
<div class="num">550 </div>
<div class="num">551 </div>
<div class="num">552 </div>
<div class="num">553 </div>
<div class="num">554 </div>
<div class="num">555 </div>
<div class="num">556 </div>
<div class="num">557 </div>
<div class="num">558 </div>
<div class="num">559 </div>
<div class="num">560 </div>
<div class="num">561 </div>
<div class="num">562 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"><span class="s2-89">/// NOTICE :</span></div>
<div class="l li"><span class="s2-89">/// This script is a setup function to customize the gameBoard looks during gameplay.</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"><span class="s2-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s2-89">///</span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> BoardLayout : MonoBehaviour {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameManager gm;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If enabled, will generate a random board&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">             </span><span class="s2-85">&quot;\nwhenever a new game starts disregarding the below layout.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> randomOnStart = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Click behaviour of the buttons on the BoardLayout.&quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">        </span><span class="s2-85">&quot;\nhold 'ctrl-btn' to alternate between the modes during clicks.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> useSelector = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="s2-89">//  [Tooltip(&quot;Shows the hex Grid style when&quot;)]</span></div>
<div class="l li"><span class="s2-89">//  public bool showHexGrid = true;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Shows/hides the sub-panel buttons.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showSubPanels = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> hidePanel1 = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> hidePanel2 = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> hidePanel3 = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> PanelDefinition[] panelScripts; </span><span class="s2-89">// panel reference scripts to be used</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> PieceDefinition[] pieceScripts; </span><span class="s2-89">// piece reference scripts to be used</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> SubPanelDefinition[] subPanelScripts; </span><span class="s2-89">// piece reference scripts to be used</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// these are max values for a panel type during randomize</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> PanelLimit[] randomPanelLimit;</span></div>
<div class="l li"><span class="si">    [System.Serializable]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> PanelLimit {</span></div>
<div class="l li"><span class="si">        [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">string</span><span class="si"> name;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> randomLimit;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// these are the counter for the max panels above</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] randomPanelCount;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// these are the texture array for representing the panels</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextureArray[] panelEditVisuals;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// these are the texture array for representing the pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextureArray[] pieceEditVisuals;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// these are the texture array for representing the sub panels</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> TextureArray[] subPanelEditVisuals;</span></div>
<div class="l li"><span class="si">    [System.Serializable]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> TextureArray {</span></div>
<div class="l li"><span class="si">        [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">string</span><span class="si"> name;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> Texture texture;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] panelArray; </span><span class="s2-89">// the PanelType[] converted to be and int reference so that it is serialisable</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] pStrength; </span><span class="s2-89">// the strength of the panel assigned</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> MultiPanelArray[] multiPanelArray;</span></div>
<div class="l li"><span class="si">    [System.Serializable]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> MultiPanelArray {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> List&lt;</span><span class="s2-90">int</span><span class="si">&gt; panelArray; </span><span class="s2-89">// the PanelType[] converted to be and int reference so that it is serialisable</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> List&lt;</span><span class="s2-90">int</span><span class="si">&gt; pStrength; </span><span class="s2-89">// the strength of the panel assigned</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] subPanelTBArray; </span><span class="s2-89">// the subPanelType[] Top Bottom</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] spTBStrength; </span><span class="s2-89">// the strength of the subpanel assigned</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] subPanelLRArray; </span><span class="s2-89">// the subPanelType[] Left Right</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] spLRStrength; </span><span class="s2-89">// the strength of the subpanel assigned</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] subPanelLRAltArray; </span><span class="s2-89">// the subPanelType[] Left Right Altenative</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] spLRAltStrength; </span><span class="s2-89">// the strength of the subpanel assigned</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] pieceArray; </span><span class="s2-89">// the piece type to be assigned during gameplay.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] colorArray; </span><span class="s2-89">// the manual skin to assign ( semi randomized )</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// these textures are for inspector visuals only - does not effect gameplay</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// paired and referenced by &quot;BoardSetup&quot; GUI script</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector2 scrollPos; </span><span class="s2-89">// for the scrollbar</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector2 scrollPos2; </span><span class="s2-89">// for the scrollbar</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector2 scrollPos3; </span><span class="s2-89">// for the scrollbar</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// for post manual color pre-start match</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si">[,] isManual;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// weighted colors</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;WeightedLayout&gt; colorWeight;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> WeightedLayout displayedWeight;</span></div>
<div class="l li"><span class="si">    [System.Serializable]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> WeightedLayout {</span></div>
<div class="l li"><span class="si">        [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">string</span><span class="si"> name;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> useWeights = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        [Range(0,100)]</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">public</span><span class="si"> List&lt;</span><span class="s2-90">int</span><span class="si">&gt; weights = </span><span class="s2-90">new</span><span class="si"> List&lt;</span><span class="s2-90">int</span><span class="si">&gt;(9);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">int</span><span class="si"> totalWeight = 0; </span><span class="s2-89">// variable to hold the total weights</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">int</span><span class="si"> selected = 0; </span><span class="s2-89">// a variable to store the selected random range for weights</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">int</span><span class="si"> addedWeight = 0; </span><span class="s2-89">// a variable to store the cumulative added weight for calculations</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// called by GameManager for panel setup during pre-game init</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setupGamePanels(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(randomOnStart){</span></div>
<div class="l li"><span class="si">            randomize();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// code below sets up the layout as per shown in the inspector</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> num;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> num2;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = gm.boardHeight -1 ; y &gt;= 0 ; y--){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(multiPanelArray[count].panelArray.Count &gt; 0){ </span><span class="s2-89">// multi-panel creations</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> z = 0; z &lt; multiPanelArray[count].panelArray.Count; z++){ </span><span class="s2-89">// add each multi-Panels</span></div>
<div class="l li"><span class="si">                        num = multiPanelArray[count].panelArray[z];</span></div>
<div class="l li"><span class="si">                        num2 = multiPanelArray[count].pStrength[z];</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-89">// adds the type by PanelDefinition selected</span></div>
<div class="l li"><span class="si">                        gm.board[x,y].panel.addType( panelScripts[num], num2,</span><span class="s2-90">false</span><span class="si">,</span><span class="s2-90">false</span><span class="si"> );</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// normal panel creation</span></div>
<div class="l li"><span class="si">                    num = panelArray[count];</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// set the type by PanelDefinition selected</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].panel.setType( panelScripts[num], pStrength[count] );</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setupGameSubPanels();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setupGameSubPanels(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// code below sets up the layout as per shown in the inspector</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> num;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = 0 ; y &lt; gm.boardHeight+1; y++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth+1; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// create the panel and set the type by SubPanelDefinition selected</span></div>
<div class="l li"><span class="si">                num = subPanelTBArray[count];</span></div>
<div class="l li"><span class="si">                gm.subPanelV[x,y].setType( subPanelScripts[num], spTBStrength[count]);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                num = subPanelLRArray[count];</span></div>
<div class="l li"><span class="si">                gm.subPanelH[x,y,0].setType( subPanelScripts[num], spLRStrength[count]);</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(gm.boardType == BoardType.Hexagon){</span></div>
<div class="l li"><span class="si">                    num = subPanelLRAltArray[count];</span></div>
<div class="l li"><span class="si">                    gm.subPanelH[x,y,1].setType( subPanelScripts[num], spLRAltStrength[count]);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setupGamePieces(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// code below sets up the pieces as per shown in the inspector</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// color randomization</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> randomColor = Random.Range(0,9);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// save the manual color reference</span></div>
<div class="l li"><span class="si">        isManual = </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">bool</span><span class="si">[gm.boardWidth,gm.boardHeight]; </span><span class="s2-89">// size of the board</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = gm.boardHeight -1 ; y &gt;= 0 ; y--){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// init default value</span></div>
<div class="l li"><span class="si">                isManual[x,y] = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s2-89">// set the piece type first</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(pieceArray[count] != 0 ){</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].setSpecialPiece( pieceScripts[pieceArray[count] ] );</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s2-89">// then set the color (if defined...)</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(colorArray[count] != 0 &amp;&amp; gm.board[x,y].isFilled &amp;&amp; !gm.board[x,y].piece.pd.isSpecial){</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].piece.slotNum = (colorArray[count] + randomColor) % gm.NumOfActiveType ;</span></div>
<div class="l li"><span class="si">                    isManual[x,y] = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// manual override is true</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(gm.board[x,y].isFilled &amp;&amp; !gm.board[x,y].piece.pd.isSpecial &amp;&amp; colorWeight[count].useWeights){ </span><span class="s2-89">// weights distribution functionality</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// run once weighted calculation...</span></div>
<div class="l li"><span class="si">                    totalWeight = 0; </span><span class="s2-89">// reset the value first...</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> z = 0; z &lt; gm.NumOfActiveType; z++){ </span><span class="s2-89">// adds all available skin based on active type</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(z &lt; colorWeight[count].weights.Count ){ </span><span class="s2-89">// ensure we have allocated weights and add to the list</span></div>
<div class="l li"><span class="si">                            totalWeight += colorWeight[count].weights[z];</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    selected = Random.Range(1,totalWeight+1); </span><span class="s2-89">// the selected weight by random</span></div>
<div class="l li"><span class="si">                    addedWeight = 0; </span><span class="s2-89">// resets the value first...</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> z = 0; z &lt; colorWeight[count].weights.Count; z++){</span></div>
<div class="l li"><span class="si">                        addedWeight+= colorWeight[count].weights[z];</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(colorWeight[count].weights[z] &gt; 0 &amp;&amp; addedWeight &gt; selected){</span></div>
<div class="l li"><span class="si">                            gm.board[x,y].piece.slotNum = z; </span><span class="s2-89">// found the skin we want to use based on the selected weight</span></div>
<div class="l li"><span class="si">                            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    isManual[x,y] = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// manual override is true</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// pre-game eliminate pre-start match</span></div>
<div class="l li"><span class="si">        postPrestartMatch();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> postPrestartMatch(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// redesign the board until there's no starting match</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.eliminatePreStartMatch &amp;&amp; gm.NumOfActiveType &gt;= 2 ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++) { </span><span class="s2-89">// iterate through each board block</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">( findPrematches(x,y) ){ </span><span class="s2-89">// find any match and change its type</span></div>
<div class="l li"><span class="si">                        x = 0; y = -1; </span><span class="s2-89">// restart the loop</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(count &gt; 9999){ </span><span class="s2-89">// if cannot solve by this num of tries, break!</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(count &gt; 9999){ </span><span class="s2-89">// if cannot solve by this num of tries, break!</span></div>
<div class="l li"><span class="si">                    Debug.LogError(</span><span class="s2-85">&quot;failed to eliminate pre-start match...&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to eliminate pre-start matches</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> findPrematches(</span><span class="s2-90">int</span><span class="si"> xPos, </span><span class="s2-90">int</span><span class="si"> yPos) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// variables to keep track of the match potentials</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> matchingRows = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> matchingCols = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> matchingTR = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> matchingTL = 0;</span></div>
<div class="l li"><span class="si">        SubBoardPanel sbp;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!( gm.board[xPos,yPos].isFilled &amp;&amp; gm.board[xPos,yPos].canBeMatched() )  ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// no match can be made from here... quit~</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> mType = gm.board[xPos,yPos].piece.slotNum; </span><span class="s2-89">// identifier of the current block type</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">//  check columns</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> y = (yPos+1) ; y &lt; gm.boardHeight ; y++) { </span><span class="s2-89">//check the top side of the cube</span></div>
<div class="l li"><span class="si">            sbp = gm.board[xPos,y].getSubPanelBetween(gm.board[xPos,y-1]);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si"> ( gm.board[xPos,y].canBeMatched() &amp;&amp; sbp.isMatchable() &amp;&amp; gm.board[xPos,y].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                matchingCols++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si"> ( matchingCols &gt; 1 ) { </span><span class="s2-89">// if a column is matching</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(! (yPos+2 &gt;= gm.boardHeight || !gm.board[xPos,yPos+2].panel.pnd.hasStartingPiece || isManual[xPos,yPos+2]) ){</span></div>
<div class="l li"><span class="si">                gm.board[xPos,yPos+2].piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d1"> </div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(! (yPos+1 &gt;= gm.boardHeight || !gm.board[xPos,yPos+1].panel.pnd.hasStartingPiece || isManual[xPos,yPos+1]) ){</span></div>
<div class="l li"><span class="si">                gm.board[xPos,yPos+1].piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d2"> </div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(!isManual[xPos,yPos]){</span></div>
<div class="l li"><span class="si">                gm.board[xPos,yPos].piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d3"> </div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(gm.boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Square : </span><span class="s2-89">// square type pre-match criteria...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check rows</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> x = (xPos+1) ; x &lt; gm.boardWidth ; x++) { </span><span class="s2-89">//check the right side of the cube</span></div>
<div class="l li"><span class="si">                sbp = gm.board[x,yPos].getSubPanelBetween(gm.board[x-1,yPos]);</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si"> ( gm.board[x,yPos].canBeMatched() &amp;&amp; sbp.isMatchable() &amp;&amp; gm.board[x,yPos].piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    matchingRows++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si"> ( matchingRows &gt; 1 ){ </span><span class="s2-89">// if a row is matching</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(! (xPos+2 &gt;= gm.boardWidth || !gm.board[xPos+2,yPos].panel.pnd.hasStartingPiece || isManual[xPos+2,yPos]) ){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos+2,yPos].piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d4"> </div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(! (xPos+1 &gt;= gm.boardWidth || !gm.board[xPos+1,yPos].panel.pnd.hasStartingPiece || isManual[xPos+1,yPos]) ){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos+1,yPos].piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d5"> </div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(!isManual[xPos,yPos]){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos,yPos].piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d6"> </div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> BoardType.Hexagon : </span><span class="s2-89">// hex type pre-match criteria...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check TopLeft segment</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> gm.board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopLeft)) { </span><span class="s2-89">//check the topLeft side of the cube</span></div>
<div class="l li"><span class="si">                sbp = _board.getSubPanelBetween(_board.bottomRight);</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si"> ( _board.canBeMatched() &amp;&amp; sbp.isMatchable() &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    matchingTL++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si"> ( matchingTL &gt; 1 ){ </span><span class="s2-89">// if a row is matching</span></div>
<div class="l li"><span class="si">                Board TL2 = gm.board[xPos,yPos].getBoardFromDirection(BoardDirection.TopLeft,2);</span></div>
<div class="l li"><span class="si">                Board TL1 = gm.board[xPos,yPos].getBoardFromDirection(BoardDirection.TopLeft,1);</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(TL2.panel.pnd.hasStartingPiece &amp;&amp; !isManual[TL2.arrayRef[0],TL2.arrayRef[1]]){</span></div>
<div class="l li"><span class="si">                    TL2.piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d7"> </div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(TL1.panel.pnd.hasStartingPiece &amp;&amp; !isManual[TL1.arrayRef[0],TL1.arrayRef[1]] ){</span></div>
<div class="l li"><span class="si">                    TL1.piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d8"> </div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(!isManual[xPos,yPos]){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos,yPos].piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d9"> </div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check TopRight segment</span></div>
<div class="l li"><span class="si">            Board TR2 = gm.board[xPos,yPos].getBoardFromDirection(BoardDirection.TopRight,2);</span></div>
<div class="l li"><span class="si">            Board TR1 = gm.board[xPos,yPos].getBoardFromDirection(BoardDirection.TopRight,1);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(Board _board </span><span class="s2-90">in</span><span class="si"> gm.board[xPos,yPos].getAllBoardInDirection(BoardDirection.TopRight)) { </span><span class="s2-89">//check the topRight side of the cube</span></div>
<div class="l li"><span class="si">                sbp = _board.getSubPanelBetween(_board.bottomLeft);</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si"> ( _board.canBeMatched() &amp;&amp; sbp.isMatchable() &amp;&amp; _board.piece.slotNum == mType) {</span></div>
<div class="l li"><span class="si">                    matchingTR++; </span><span class="s2-89">// increase linked counter</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// exit loop as no more match this side...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si"> ( matchingTR &gt; 1 ){ </span><span class="s2-89">// if a row is matching</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(TR2.panel.pnd.hasStartingPiece &amp;&amp; !isManual[TR2.arrayRef[0],TR2.arrayRef[1]] ){</span></div>
<div class="l li"><span class="si">                    TR2.piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d10"> </div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(TR1.panel.pnd.hasStartingPiece &amp;&amp; !isManual[TR1.arrayRef[0],TR1.arrayRef[1]] ){</span></div>
<div class="l li"><span class="si">                    TR1.piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d11"> </div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(!isManual[xPos,yPos]){</span></div>
<div class="l li"><span class="si">                    gm.board[xPos,yPos].piece.slotNum = gm.ranType(); </span><span class="s2-89">// assign a new type</span></div>
<div class="l ld d12"> </div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// piece is ok... move to the next</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> togglePanel(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        panelArray[position] = (panelArray[position] + val) % panelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(panelArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            panelArray[position] = panelScripts.Length-1; </span><span class="s2-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrength(position);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setPanel(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        panelArray[position] = val;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        setDefaultStrength(position);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> toggleMultiPanel(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val,</span><span class="s2-90">int</span><span class="si"> arrayNum){</span></div>
<div class="l li"><span class="si">        multiPanelArray[position].panelArray[arrayNum] =</span></div>
<div class="l li"><span class="si">            (multiPanelArray[position].panelArray[arrayNum] + val) % panelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(multiPanelArray[position].panelArray[arrayNum] &lt; 0){</span></div>
<div class="l li"><span class="si">            multiPanelArray[position].panelArray[arrayNum] = panelScripts.Length-1; </span><span class="s2-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrengthMultiPanel(position,arrayNum);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setMultiPanel(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val,</span><span class="s2-90">int</span><span class="si"> arrayNum){</span></div>
<div class="l li"><span class="si">        multiPanelArray[position].panelArray[arrayNum] = val;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        setDefaultStrengthMultiPanel(position,arrayNum);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// cycles through each piece type based on the &quot;Piece Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> togglePiece(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        pieceArray[position] = (pieceArray[position] + val) % pieceScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(pieceArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            pieceArray[position] = pieceScripts.Length-1; </span><span class="s2-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// set piece directly</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setPiece(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        pieceArray[position] = val;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// cycles through each piece type based on the &quot;Piece Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> toggleColor(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        colorArray[position] = (colorArray[position] + val) % (gm.NumOfActiveType + 1);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(colorArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            colorArray[position] = gm.NumOfActiveType; </span><span class="s2-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> setDefaultStrength(</span><span class="s2-90">int</span><span class="si"> position){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; panelScripts.Length; x++){ </span><span class="s2-89">// search the array</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(panelScripts[x] == panelScripts[panelArray[position]] ){ </span><span class="s2-89">// if found the correct array</span></div>
<div class="l li"><span class="si">                pStrength[position] = panelScripts[x].defaultStrength; </span><span class="s2-89">// return the associated default strength</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> setDefaultStrengthMultiPanel(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> arrayNum){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; panelScripts.Length; x++){ </span><span class="s2-89">// search the array</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(panelScripts[x] == panelScripts[multiPanelArray[position].panelArray[arrayNum]] ){ </span><span class="s2-89">// if found the correct array</span></div>
<div class="l li"><span class="si">                multiPanelArray[position].pStrength[arrayNum] = panelScripts[x].defaultStrength; </span><span class="s2-89">// return the associated default strength</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> toggleSubPanelTB(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelTBArray[position] = (subPanelTBArray[position] + val) % subPanelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(subPanelTBArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            subPanelTBArray[position] = subPanelScripts.Length-1; </span><span class="s2-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s2-90">ref</span><span class="si"> subPanelTBArray,</span><span class="s2-90">ref</span><span class="si"> spTBStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setSubPanelTB(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelTBArray[position] = val;</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s2-90">ref</span><span class="si"> subPanelTBArray,</span><span class="s2-90">ref</span><span class="si"> spTBStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> toggleSubPanelLR(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelLRArray[position] = (subPanelLRArray[position] + val) % subPanelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(subPanelLRArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            subPanelLRArray[position] = subPanelScripts.Length-1; </span><span class="s2-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s2-90">ref</span><span class="si"> subPanelLRArray,</span><span class="s2-90">ref</span><span class="si"> spLRStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setSubPanelLR(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelLRArray[position] = val;</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s2-90">ref</span><span class="si"> subPanelLRArray,</span><span class="s2-90">ref</span><span class="si"> spLRStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// cycles through each panel type based on the &quot;Panel Definition&quot; scripts. any changes there will reflect here.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> toggleSubPanelLRAlt(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelLRAltArray[position] = (subPanelLRAltArray[position] + val) % subPanelScripts.Length;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(subPanelLRAltArray[position] &lt; 0){</span></div>
<div class="l li"><span class="si">            subPanelLRAltArray[position] = subPanelScripts.Length-1; </span><span class="s2-89">// loop backwards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s2-90">ref</span><span class="si"> subPanelLRAltArray,</span><span class="s2-90">ref</span><span class="si"> spLRAltStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// set panel directly</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> setSubPanelLRAlt(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        subPanelLRAltArray[position] = val;</span></div>
<div class="l li"><span class="si">        setDefaultStrengthSubPanel(position,</span><span class="s2-90">ref</span><span class="si"> subPanelLRAltArray,</span><span class="s2-90">ref</span><span class="si"> spLRAltStrength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> setDefaultStrengthSubPanel(</span><span class="s2-90">int</span><span class="si"> position,</span><span class="s2-90">ref</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] subPanelArray, </span><span class="s2-90">ref</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] strengthArray){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; subPanelScripts.Length; x++){ </span><span class="s2-89">// search the array</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(subPanelScripts[x] == subPanelScripts[subPanelArray[position]] ){ </span><span class="s2-89">// if found the correct array</span></div>
<div class="l li"><span class="si">                strengthArray[position] = subPanelScripts[x].defaultStrength; </span><span class="s2-89">// return the associated default strength</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to reset everything!</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> resetMe(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                panelArray[count] = 0;</span></div>
<div class="l li"><span class="si">                pieceArray[count] = 0;</span></div>
<div class="l li"><span class="si">                colorArray[count] = 0;</span></div>
<div class="l li"><span class="si">                colorWeight = </span><span class="s2-90">new</span><span class="si"> List&lt;WeightedLayout&gt;();</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(MultiPanelArray mpa </span><span class="s2-90">in</span><span class="si"> multiPanelArray){</span></div>
<div class="l li"><span class="si">                    mpa.panelArray.Clear();</span></div>
<div class="l li"><span class="si">                    mpa.pStrength.Clear();</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                setDefaultStrength(count);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        resetSubPanelOnly(); </span><span class="s2-89">// resets sub panels too~!</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to reset all pieces to BASIC type</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> resetPieceOnly(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                pieceArray[count] = 0;</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to reset all piece color type to random</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> resetColorOnly(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                colorArray[count] = 0;</span></div>
<div class="l li"><span class="si">                colorWeight = </span><span class="s2-90">new</span><span class="si"> List&lt;WeightedLayout&gt;();</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to reset all panels to basic</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> resetPanelOnly(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                panelArray[count] = 0;</span></div>
<div class="l li"><span class="si">                setDefaultStrength(count);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(MultiPanelArray mpa </span><span class="s2-90">in</span><span class="si"> multiPanelArray){</span></div>
<div class="l li"><span class="si">            mpa.panelArray.Clear();</span></div>
<div class="l li"><span class="si">            mpa.pStrength.Clear();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to reset all panels to basic</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> resetSubPanelOnly(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth+1; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight+1; y++){</span></div>
<div class="l li"><span class="si">                subPanelTBArray[count] = subPanelLRArray[count] = subPanelLRAltArray[count] = 0;</span></div>
<div class="l li"><span class="si">                setDefaultStrengthSubPanel(count,</span><span class="s2-90">ref</span><span class="si"> subPanelTBArray,</span><span class="s2-90">ref</span><span class="si"> spTBStrength);</span></div>
<div class="l li"><span class="si">                setDefaultStrengthSubPanel(count,</span><span class="s2-90">ref</span><span class="si"> subPanelLRArray,</span><span class="s2-90">ref</span><span class="si"> spLRStrength);</span></div>
<div class="l li"><span class="si">                setDefaultStrengthSubPanel(count,</span><span class="s2-90">ref</span><span class="si"> subPanelLRAltArray,</span><span class="s2-90">ref</span><span class="si"> spLRAltStrength);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to click all panels</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> clickAll(</span><span class="s2-90">int</span><span class="si"> val){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                togglePanel(count,val);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// just a simple function to randomize all panels</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> randomize(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// reset to initial count of panels</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; randomPanelCount.Length; x++){</span></div>
<div class="l li"><span class="si">            randomPanelCount[x] = 0;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight; y++){</span></div>
<div class="l li"><span class="si">                panelArray[count] = generateNumber(); </span><span class="s2-89">// generate and assigns a random number</span></div>
<div class="l li"><span class="si">                setDefaultStrength(count);</span></div>
<div class="l li"><span class="si">                count++;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// an internal function to generate a number but also keep within the max limits</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// of the panels defined.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">int</span><span class="si"> generateNumber(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> generated = Random.Range(0, panelScripts.Length);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(generated &gt; 0){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(Random.Range(0, 2) == 0){ </span><span class="s2-89">// 1/2 chance to make a special panel</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">( randomPanelCount[generated] &lt; randomPanelLimit[generated].randomLimit ){</span></div>
<div class="l li"><span class="si">                    randomPanelCount[generated]++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">return</span><span class="si"> generated;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> 0; </span><span class="s2-89">// if nothing happens above, return default panel</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs"><b>12 differences</b>: 12 lines, 0 inline differences in 0 changed lines</div><div id="colors"><div class="sa" title="Added lines: 0, inline additions in changed lines: 0">Added(0,0)</div><div class="sd" title="Deleted lines: 12, inline deletions in changed lines: 0">Deleted(12,0)</div><div class="sc" title="Changed lines: 0">Changed(0)</div><div class="sc2" title="Inline changes in changed lines: 0">Changed in changed(0)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on June 1, 2015, 5:33 AM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 8.0.0.0.
    </div>
</div>
</body>

</html>

