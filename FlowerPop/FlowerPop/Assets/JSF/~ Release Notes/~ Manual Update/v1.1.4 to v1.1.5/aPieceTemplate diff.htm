<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 7.0.1.4 -->
<!-- saved from url=(0014)about:internet -->

<head><script type="text/javascript" src="/4B6D6BB14090486CAB497E737B878663/B248D2F6-B09F-3B42-A26C-5BBB9AED7DA2/main.js" charset="UTF-8"></script>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0;height: 13px;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 1920px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 1920
    var $diffs = [
null,
{d:'Diff 1: Add 14 lines (189 - 202, second file) after line 187 (first file)',l:[188,201]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="aPieceTemplate (old).cs"><b>aPieceTemplate (old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/*</span></div>
<div class="l li"><span class="s1-89"> * JSFPieceDefinition template class</span></div>
<div class="l li"><span class="s1-89"> * ==========================</span></div>
<div class="l li"><span class="s1-89"> * </span></div>
<div class="l li"><span class="s1-89"> * use this as a guide template to create your own custom piece</span></div>
<div class="l li"><span class="s1-89"> * </span></div>
<div class="l li"><span class="s1-89"> */</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// BELOW ARE THE FUNCTIONS THAT IS USEFUL</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// ==============</span></div>
<div class="l li"><span class="s1-89">/// WARNING, wrap these in StartCoroutine( &quot;x&quot; );</span></div>
<div class="l li"><span class="s1-89">/// gm.destroyInTime()    &lt;--- this is a function that accepts 4 properties. </span></div>
<div class="l li"><span class="s1-89">///                       1. the x position.</span></div>
<div class="l li"><span class="s1-89">///                       2. the y position.</span></div>
<div class="l li"><span class="s1-89">///                       3. the delay before the piece is destroyed ( in float value )</span></div>
<div class="l li"><span class="s1-89">///                       4. the score added once the piece is destroyed.</span></div>
<div class="l li"><span class="s1-89">/// gm.destroyInTimeMarked()  &lt;--- same as destroyInTime(), but pieces here will be marked and other</span></div>
<div class="l li"><span class="s1-89">///                                destroy calls will not affect it. (i.e., another bomb will not pre-maturely</span></div>
<div class="l li"><span class="s1-89">///                                destroy the piece.)</span></div>
<div class="l li"><span class="s1-89">/// ===============</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// yield return new WaitForSeconds(gm.gemSwitchSpeed);  &lt;--- use this to wait for the visual effect above...</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// gm.boardWidth / gm.boardHeight    &lt;--- the width and height of the current board</span></div>
<div class="l li"><span class="s1-89">/// gm.board[x,y]    &lt;--- use this to reference the board if you needed more board properties</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// gm.lockJustCreated(posX1,posY1,0f)   &lt;--- use this to lock the pieces so that it will not be destroyed by</span></div>
<div class="l li"><span class="s1-89">///                                           a chain explosion so quickly.</span></div>
<div class="l li"><span class="s1-89">///                                           var 1 &amp; var 2 = the board array position [x,y]</span></div>
<div class="l li"><span class="s1-89">///                                           var 3 = the delay before it is unlocked</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// gm.audioScript.playSound(PlayFx.fxtype) &lt;--- to play sound effects defined in AudioPlayer script</span></div>
<div class="l li"><span class="s1-89">/// gm.animScript.doAnim(animType,x,y) &lt;--- to play your desired anim defined in CustomAnimations script</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> aPieceTemplate : JSFPieceDefinition {</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ============================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">//  Virtual functions that users can override</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">//  or leave it as default behaviours</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// P.S.&gt; you can delete this entire section / any specific function if you are not changing anything...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ============================================================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// called by Board during GameManager game-start phase</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// different from Start() as that is unity start, not neccessarily the game is set-up yet</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onGameStart(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// do nothing....</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// called by JSFRelay during onPieceClicked</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPieceClicked(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default does nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// called by GamePiece during creation of a type</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPieceCreated(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default does nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// called by GamePiece during destruction of a type</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPieceDestroyed(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default do nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// called by GameManager when player makes the next move</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPlayerMove(JSFBoard board) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default do nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// called by GameManager when board stabilize and gets a suggestion</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onBoardStabilize(JSFBoard board) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default do nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// think of this as something like &quot;on the next turn&quot;...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Optional piece splash function when a piece is destroyed</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> splashDamage(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default do nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// splash when a match is formed...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// for external script to call (mainly GamePiece.cs) to call which skin to use</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> GameObject getSkin(</span><span class="s1-90">int</span><span class="si"> num){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> skin[num]; </span><span class="s1-89">// default behaviour will use back the same color skin</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// different from getSkin() ... this is for piece to specify </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the skin to use during spawning new piece ** when you use chanceToSpawnThis()</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> skinToUseDuringSpawn(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// ** x / y is the board position being called for spawning...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> 0; </span><span class="s1-89">// default behaviour when called, return skin 0</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// when spawning a new piece, chance to spawn this type...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> JSFPieceDefinition chanceToSpawnThis(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// ** x / y is the board position being called for spawning...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">null</span><span class="si">; </span><span class="s1-89">// default does nothing... will create a normal piece instead</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">/*</span></div>
<div class="l li"><span class="s1-89">         * else, </span></div>
<div class="l li"><span class="s1-89">         * if( your criteria here...)</span></div>
<div class="l li"><span class="s1-89">         * return this; // spawns this piece if conditions are met...</span></div>
<div class="l li"><span class="s1-89">         * WARNING - beware of returning true all the time, then it will only spawn this piece!</span></div>
<div class="l li"><span class="s1-89">         */</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// user can further specify the position of the object on top of the default if needed</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> extraPiecePositioning(GameObject thisPiece){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default is no extra positioning</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// else, in front of the normal board position</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// thisPiece.transform.localPosition += new Vector3(0,0,-1*thisPiece.transform.localScale.z);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// else, behind the normal board position</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// thisPiece.transform.localPosition += new Vector3(0,0,1*thisPiece.transform.localScale.z);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the minimum swipe distance between the last piece and this new swiped piece</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> minSwipeDistance(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// extra stuff you want want to do...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> 1; </span><span class="s1-89">// default is 1.</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the maximum swipe distance between the last piece and this new swiped piece</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> maxSwipeDistance(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// extra stuff you want want to do...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> 1; </span><span class="s1-89">// default is 1.</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function called when user starts the first swipe touch (the first piece)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> useAsFirstSwipe(JSFGamePiece gp, </span><span class="s1-90">bool</span><span class="si"> isBoardCheck) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// return true to allow SwipeManager to use this piece as a starting swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// return false to NOT allow SwipeManager to use this piece as a starting swipe</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// below is the default behaviour</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// if it's not a special... set the swipeColor to the slotNum; use as first swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isSpecial){ </span><span class="s1-89">// just making sure it's not a special piece</span></div>
<div class="l li"><span class="si">            JSFSwipeManager.swipeColor = gp.slotNum; </span><span class="s1-89">// default sets the swipe color</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function called when user continues swiping (the next pieces being swiped other than the first) </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> addToSwipeChain(JSFGamePiece gp, </span><span class="s1-90">int</span><span class="si"> swipeColor, </span><span class="s1-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// return true to allow SwipeManager to add this piece to the swipe chain</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// return false to NOT allow SwipeManager to add this piece to the swipe chain</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// P.S.&gt; this status (true/false) is IGNORED if JSFSwipeManager.allowAnyColorOnce() is active </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//          and this piece is not a special (isSpecial == false)!</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// below is the default behaviour</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// if it's not a special... if swiped is same color, add to swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isSpecial){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(gp.slotNum == swipeColor){ </span><span class="s1-89">// same color...</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// allow add to chain</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// DO NOT allow add to chain</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// when the piece is added to the swipe chain (after addToSwipeChain() )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onSwipeAdded(JSFGamePiece gp, </span><span class="s1-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default does nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// suggest calling &quot;JSFSwipeManager.allowAnyColorOnce()&quot; here to allow the next piece</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//     to be added without color limitation :)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l la d1"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// when the piece is being removed 1 by 1 (swipe is valid and being processed) </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// this is per piece call function</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onSwipeValidating(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        gm.increaseScore(scorePerPiece,gp.master.arrayRef[0],gp.master.arrayRef[1]); </span><span class="s1-89">// increase score</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(JSFBoard neighbour </span><span class="s1-90">in</span><span class="si"> gp.master.allNeighbourBoards){ </span><span class="s1-89">// to all its neighbour boards</span></div>
<div class="l li"><span class="si">            neighbour.SplashDamage(); </span><span class="s1-89">// splash damage call (causes splash damage)</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(JSFSwipeManager.lastSwipeChainBoard == gp.master) { </span><span class="s1-89">// if this is the last piece of the swipe</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> w = gm.pieceTypes.Length-1; w &gt;= 0; w--){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(gm.pieceTypes[w].createPowerAtSwipeEnd(gp, JSFSwipeManager.currentSwipeCount)){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// finished here.. </span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            gp.master.destroyBox(); </span><span class="s1-89">// no power created... destroys the piece here</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            gp.master.destroyBox(); </span><span class="s1-89">// destroys the piece here ( default )</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// Creates the power at swipe end.</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt;, if power at swipe end was created, &lt;c&gt;false&lt;/c&gt; otherwise.&lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name=&quot;gp&quot;&gt;target Game Piece at the end of the chain&lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">/// &lt;param name=&quot;swipeLength&quot;&gt;Swipe length.&lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> createPowerAtSwipeEnd(JSFGamePiece gp, </span><span class="s1-90">int</span><span class="si"> swipeLength){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// return calls...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// default call, destroys the piece here at the end...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// return true; // Only if you do NOT wish the piece here to be destroyed</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// when the swipe is backtracked to this piece during a swipe</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onSwipeBackTracked(JSFGamePiece gp, </span><span class="s1-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// default does nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// this is called when a swipe back-tracked to this piece :)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// suggest re-calling &quot;JSFSwipeManager.allowAnyColorOnce()&quot; here (if needed)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//     to allow the next piece to be added without color limitation :)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// performs power during destruction of the piece (if any)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> performPower(</span><span class="s1-90">int</span><span class="si">[] arrayRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// NOTE :- this function is called during piece destruction ( of destroyBox() )</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">/* your function call here - define your own power...</span></div>
<div class="l li"><span class="s1-89">         * e.g. doMyPower(arrayRef);</span></div>
<div class="l li"><span class="s1-89">         * </span></div>
<div class="l li"><span class="s1-89">         * arrayRef is the board position of the piece..</span></div>
<div class="l li"><span class="s1-89">         * arrayRef[0] = x position; arrayRef[1] = y position.</span></div>
<div class="l li"><span class="s1-89">         * use it to call gm.board[x,y]</span></div>
<div class="l li"><span class="s1-89">         * </span></div>
<div class="l li"><span class="s1-89">         */</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// return calls...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// default call - will destroy the piece immediately after this ( AKA after calling the power )</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//      return true; // Only if you do not wish the custom piece to be destroyed instantly</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">/*</span></div>
<div class="l li"><span class="s1-89">         * IMPORTANT : </span></div>
<div class="l li"><span class="s1-89">         * you must call StartCoroutine( gm.destroyInTimeMarked(x,y, delay, mScore) );</span></div>
<div class="l li"><span class="s1-89">         * either here or in your power function to manually destroy the piece</span></div>
<div class="l li"><span class="s1-89">         * ( that is if you returned false; )</span></div>
<div class="l li"><span class="s1-89">         * </span></div>
<div class="l li"><span class="s1-89">        */</span><span class="si"> </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// allows you to specify a power merge...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">override</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> powerMerge(List&lt;JSFBoard&gt; chain, JSFGamePiece target,</span></div>
<div class="l li"><span class="si">                                   JSFGamePiece refPiece, </span><span class="s1-90">int</span><span class="si">[] arrayRef, </span><span class="s1-90">bool</span><span class="si"> isACheck){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">/* NOTES :-</span></div>
<div class="l li"><span class="s1-89">         * List&lt;JSFBoard&gt; chain &lt;--- the current swipe chain</span></div>
<div class="l li"><span class="s1-89">         * arrayRef &lt;--- the current board position the call is being executed</span></div>
<div class="l li"><span class="s1-89">         * target &lt;--- the current GamePiece being checked for powerMerge</span></div>
<div class="l li"><span class="s1-89">         * refPiece &lt;--- the GamePiece used as a reference (the piece that owns this PieceDefinition</span></div>
<div class="l li"><span class="s1-89">         * isACheck &lt;--- signifies whether this call is a check or an execute call</span></div>
<div class="l li"><span class="s1-89">         * </span></div>
<div class="l li"><span class="s1-89">         * return statements :-</span></div>
<div class="l li"><span class="s1-89">         * return true; &lt;--- tell JSF that there is a powerMerge</span></div>
<div class="l li"><span class="s1-89">         * return false; &lt;--- tell JSF NO powerMerge happened...</span></div>
<div class="l li"><span class="s1-89">         * </span></div>
<div class="l li"><span class="s1-89">         */</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="aPieceTemplate (new).cs"><b>aPieceTemplate (new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/*</span></div>
<div class="l li"><span class="s2-89"> * JSFPieceDefinition template class</span></div>
<div class="l li"><span class="s2-89"> * ==========================</span></div>
<div class="l li"><span class="s2-89"> * </span></div>
<div class="l li"><span class="s2-89"> * use this as a guide template to create your own custom piece</span></div>
<div class="l li"><span class="s2-89"> * </span></div>
<div class="l li"><span class="s2-89"> */</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// BELOW ARE THE FUNCTIONS THAT IS USEFUL</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// ==============</span></div>
<div class="l li"><span class="s2-89">/// WARNING, wrap these in StartCoroutine( &quot;x&quot; );</span></div>
<div class="l li"><span class="s2-89">/// gm.destroyInTime()    &lt;--- this is a function that accepts 4 properties. </span></div>
<div class="l li"><span class="s2-89">///                       1. the x position.</span></div>
<div class="l li"><span class="s2-89">///                       2. the y position.</span></div>
<div class="l li"><span class="s2-89">///                       3. the delay before the piece is destroyed ( in float value )</span></div>
<div class="l li"><span class="s2-89">///                       4. the score added once the piece is destroyed.</span></div>
<div class="l li"><span class="s2-89">/// gm.destroyInTimeMarked()  &lt;--- same as destroyInTime(), but pieces here will be marked and other</span></div>
<div class="l li"><span class="s2-89">///                                destroy calls will not affect it. (i.e., another bomb will not pre-maturely</span></div>
<div class="l li"><span class="s2-89">///                                destroy the piece.)</span></div>
<div class="l li"><span class="s2-89">/// ===============</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// yield return new WaitForSeconds(gm.gemSwitchSpeed);  &lt;--- use this to wait for the visual effect above...</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// gm.boardWidth / gm.boardHeight    &lt;--- the width and height of the current board</span></div>
<div class="l li"><span class="s2-89">/// gm.board[x,y]    &lt;--- use this to reference the board if you needed more board properties</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// gm.lockJustCreated(posX1,posY1,0f)   &lt;--- use this to lock the pieces so that it will not be destroyed by</span></div>
<div class="l li"><span class="s2-89">///                                           a chain explosion so quickly.</span></div>
<div class="l li"><span class="s2-89">///                                           var 1 &amp; var 2 = the board array position [x,y]</span></div>
<div class="l li"><span class="s2-89">///                                           var 3 = the delay before it is unlocked</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// gm.audioScript.playSound(PlayFx.fxtype) &lt;--- to play sound effects defined in AudioPlayer script</span></div>
<div class="l li"><span class="s2-89">/// gm.animScript.doAnim(animType,x,y) &lt;--- to play your desired anim defined in CustomAnimations script</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> aPieceTemplate : JSFPieceDefinition {</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ============================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">//  Virtual functions that users can override</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">//  or leave it as default behaviours</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// P.S.&gt; you can delete this entire section / any specific function if you are not changing anything...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ============================================================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// called by Board during GameManager game-start phase</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// different from Start() as that is unity start, not neccessarily the game is set-up yet</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onGameStart(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// do nothing....</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// called by JSFRelay during onPieceClicked</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPieceClicked(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default does nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// called by GamePiece during creation of a type</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPieceCreated(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default does nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// called by GamePiece during destruction of a type</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPieceDestroyed(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default do nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// called by GameManager when player makes the next move</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPlayerMove(JSFBoard board) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default do nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// called by GameManager when board stabilize and gets a suggestion</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onBoardStabilize(JSFBoard board) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default do nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// think of this as something like &quot;on the next turn&quot;...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Optional piece splash function when a piece is destroyed</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> splashDamage(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default do nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own code here if you need</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// splash when a match is formed...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// for external script to call (mainly GamePiece.cs) to call which skin to use</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> GameObject getSkin(</span><span class="s2-90">int</span><span class="si"> num){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> skin[num]; </span><span class="s2-89">// default behaviour will use back the same color skin</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// different from getSkin() ... this is for piece to specify </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the skin to use during spawning new piece ** when you use chanceToSpawnThis()</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> skinToUseDuringSpawn(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// ** x / y is the board position being called for spawning...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> 0; </span><span class="s2-89">// default behaviour when called, return skin 0</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// when spawning a new piece, chance to spawn this type...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> JSFPieceDefinition chanceToSpawnThis(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// ** x / y is the board position being called for spawning...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">null</span><span class="si">; </span><span class="s2-89">// default does nothing... will create a normal piece instead</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">/*</span></div>
<div class="l li"><span class="s2-89">         * else, </span></div>
<div class="l li"><span class="s2-89">         * if( your criteria here...)</span></div>
<div class="l li"><span class="s2-89">         * return this; // spawns this piece if conditions are met...</span></div>
<div class="l li"><span class="s2-89">         * WARNING - beware of returning true all the time, then it will only spawn this piece!</span></div>
<div class="l li"><span class="s2-89">         */</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// user can further specify the position of the object on top of the default if needed</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> extraPiecePositioning(GameObject thisPiece){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default is no extra positioning</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// else, in front of the normal board position</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// thisPiece.transform.localPosition += new Vector3(0,0,-1*thisPiece.transform.localScale.z);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// else, behind the normal board position</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// thisPiece.transform.localPosition += new Vector3(0,0,1*thisPiece.transform.localScale.z);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the minimum swipe distance between the last piece and this new swiped piece</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> minSwipeDistance(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// extra stuff you want want to do...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> 1; </span><span class="s2-89">// default is 1.</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the maximum swipe distance between the last piece and this new swiped piece</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> maxSwipeDistance(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// extra stuff you want want to do...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> 1; </span><span class="s2-89">// default is 1.</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function called when user starts the first swipe touch (the first piece)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> useAsFirstSwipe(JSFGamePiece gp, </span><span class="s2-90">bool</span><span class="si"> isBoardCheck) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// return true to allow SwipeManager to use this piece as a starting swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// return false to NOT allow SwipeManager to use this piece as a starting swipe</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// below is the default behaviour</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// if it's not a special... set the swipeColor to the slotNum; use as first swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isSpecial){ </span><span class="s2-89">// just making sure it's not a special piece</span></div>
<div class="l li"><span class="si">            JSFSwipeManager.swipeColor = gp.slotNum; </span><span class="s2-89">// default sets the swipe color</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function called when user continues swiping (the next pieces being swiped other than the first) </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> addToSwipeChain(JSFGamePiece gp, </span><span class="s2-90">int</span><span class="si"> swipeColor, </span><span class="s2-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// return true to allow SwipeManager to add this piece to the swipe chain</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// return false to NOT allow SwipeManager to add this piece to the swipe chain</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// P.S.&gt; this status (true/false) is IGNORED if JSFSwipeManager.allowAnyColorOnce() is active </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//          and this piece is not a special (isSpecial == false)!</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// below is the default behaviour</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// if it's not a special... if swiped is same color, add to swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isSpecial){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(gp.slotNum == swipeColor){ </span><span class="s2-89">// same color...</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// allow add to chain</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// DO NOT allow add to chain</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// when the piece is added to the swipe chain (after addToSwipeChain() )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onSwipeAdded(JSFGamePiece gp, </span><span class="s2-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default does nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// suggest calling &quot;JSFSwipeManager.allowAnyColorOnce()&quot; here to allow the next piece</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//     to be added without color limitation :)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l lg"> </div>
<div class="l la d1"><span class="sa">    // when this piece is removed to the swipe chain</span></div>
<div class="l la d1"><span class="sa">    // P.S.&gt; NOT THE SAME AS onSwipeBackTracked !!</span></div>
<div class="l la d1"><span class="sa">    public override void onSwipeRemoved(JSFGamePiece gp, bool isBoardCheck){</span></div>
<div class="l la d1"><span class="sa">        // isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l la d1"><span class="sa">        // default does nothing...</span></div>
<div class="l la d1"><span class="sa">        // Use this method to remove any special power triggered during &quot;onSwipeAdd&quot;...</span></div>
<div class="l la d1"><span class="sa">    }</span></div>
<div class="l lg d1"> </div>
<div class="l la d1"><span class="sa">    // when the swipe is illegal, void and being removed...</span></div>
<div class="l la d1"><span class="sa">    // this is per piece call function</span></div>
<div class="l la d1"><span class="sa">    public override void onSwipeFailed(JSFGamePiece gp){</span></div>
<div class="l la d1"><span class="sa">        // default does nothing...</span></div>
<div class="l la d1"><span class="sa">        // p.s.&gt; you can remove active power triggered by onSwipeAdded() here :)</span></div>
<div class="l la d1"><span class="sa">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// when the piece is being removed 1 by 1 (swipe is valid and being processed) </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// this is per piece call function</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onSwipeValidating(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        gm.increaseScore(scorePerPiece,gp.master.arrayRef[0],gp.master.arrayRef[1]); </span><span class="s2-89">// increase score</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(JSFBoard neighbour </span><span class="s2-90">in</span><span class="si"> gp.master.allNeighbourBoards){ </span><span class="s2-89">// to all its neighbour boards</span></div>
<div class="l li"><span class="si">            neighbour.SplashDamage(); </span><span class="s2-89">// splash damage call (causes splash damage)</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(JSFSwipeManager.lastSwipeChainBoard == gp.master) { </span><span class="s2-89">// if this is the last piece of the swipe</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> w = gm.pieceTypes.Length-1; w &gt;= 0; w--){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(gm.pieceTypes[w].createPowerAtSwipeEnd(gp, JSFSwipeManager.currentSwipeCount)){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// finished here.. </span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            gp.master.destroyBox(); </span><span class="s2-89">// no power created... destroys the piece here</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            gp.master.destroyBox(); </span><span class="s2-89">// destroys the piece here ( default )</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// Creates the power at swipe end.</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt;, if power at swipe end was created, &lt;c&gt;false&lt;/c&gt; otherwise.&lt;/returns&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name=&quot;gp&quot;&gt;target Game Piece at the end of the chain&lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">/// &lt;param name=&quot;swipeLength&quot;&gt;Swipe length.&lt;/param&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> createPowerAtSwipeEnd(JSFGamePiece gp, </span><span class="s2-90">int</span><span class="si"> swipeLength){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// return calls...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// default call, destroys the piece here at the end...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// return true; // Only if you do NOT wish the piece here to be destroyed</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// when the swipe is backtracked to this piece during a swipe</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onSwipeBackTracked(JSFGamePiece gp, </span><span class="s2-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// isBoardCheck == true if the board is checking for legal swipes (use it in if-else when needed!)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// default does nothing...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// this is called when a swipe back-tracked to this piece :)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// suggest re-calling &quot;JSFSwipeManager.allowAnyColorOnce()&quot; here (if needed)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//     to allow the next piece to be added without color limitation :)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// performs power during destruction of the piece (if any)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> performPower(</span><span class="s2-90">int</span><span class="si">[] arrayRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// NOTE :- this function is called during piece destruction ( of destroyBox() )</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">/* your function call here - define your own power...</span></div>
<div class="l li"><span class="s2-89">         * e.g. doMyPower(arrayRef);</span></div>
<div class="l li"><span class="s2-89">         * </span></div>
<div class="l li"><span class="s2-89">         * arrayRef is the board position of the piece..</span></div>
<div class="l li"><span class="s2-89">         * arrayRef[0] = x position; arrayRef[1] = y position.</span></div>
<div class="l li"><span class="s2-89">         * use it to call gm.board[x,y]</span></div>
<div class="l li"><span class="s2-89">         * </span></div>
<div class="l li"><span class="s2-89">         */</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// return calls...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// default call - will destroy the piece immediately after this ( AKA after calling the power )</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//      return true; // Only if you do not wish the custom piece to be destroyed instantly</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">/*</span></div>
<div class="l li"><span class="s2-89">         * IMPORTANT : </span></div>
<div class="l li"><span class="s2-89">         * you must call StartCoroutine( gm.destroyInTimeMarked(x,y, delay, mScore) );</span></div>
<div class="l li"><span class="s2-89">         * either here or in your power function to manually destroy the piece</span></div>
<div class="l li"><span class="s2-89">         * ( that is if you returned false; )</span></div>
<div class="l li"><span class="s2-89">         * </span></div>
<div class="l li"><span class="s2-89">        */</span><span class="si"> </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// allows you to specify a power merge...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">override</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> powerMerge(List&lt;JSFBoard&gt; chain, JSFGamePiece target,</span></div>
<div class="l li"><span class="si">                                   JSFGamePiece refPiece, </span><span class="s2-90">int</span><span class="si">[] arrayRef, </span><span class="s2-90">bool</span><span class="si"> isACheck){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">/* NOTES :-</span></div>
<div class="l li"><span class="s2-89">         * List&lt;JSFBoard&gt; chain &lt;--- the current swipe chain</span></div>
<div class="l li"><span class="s2-89">         * arrayRef &lt;--- the current board position the call is being executed</span></div>
<div class="l li"><span class="s2-89">         * target &lt;--- the current GamePiece being checked for powerMerge</span></div>
<div class="l li"><span class="s2-89">         * refPiece &lt;--- the GamePiece used as a reference (the piece that owns this PieceDefinition</span></div>
<div class="l li"><span class="s2-89">         * isACheck &lt;--- signifies whether this call is a check or an execute call</span></div>
<div class="l li"><span class="s2-89">         * </span></div>
<div class="l li"><span class="s2-89">         * return statements :-</span></div>
<div class="l li"><span class="s2-89">         * return true; &lt;--- tell JSF that there is a powerMerge</span></div>
<div class="l li"><span class="s2-89">         * return false; &lt;--- tell JSF NO powerMerge happened...</span></div>
<div class="l li"><span class="s2-89">         * </span></div>
<div class="l li"><span class="s2-89">         */</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs">Number of differences: <b>1</b></div><div id="colors"><div class="sa" title="14 added lines and 0 inline additions in changed lines">Added(14,0)</div><div class="sd" title="0 deleted lines and 0 inline deletions in changed lines">Deleted(0,0)</div><div class="sc" title="0 changed lines">Changed(0)</div><div class="sc2" title="0 inline changes in changed lines">Changed in changed(0)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on March 18, 2015, 10:01 PM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 7.0.1.4.
    </div>
</div>
</body>

</html>

