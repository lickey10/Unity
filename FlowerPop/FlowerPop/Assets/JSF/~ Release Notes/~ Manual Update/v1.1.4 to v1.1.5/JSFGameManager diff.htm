<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 7.0.1.4 -->
<!-- saved from url=(0014)about:internet -->

<head><script type="text/javascript" src="/4B6D6BB14090486CAB497E737B878663/DD6921FB-BBB8-D340-987C-B0FAD49BE80D/main.js" charset="UTF-8"></script>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0;height: 13px;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2064px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2064
    var $diffs = [
null,
{d:'Diff 1: Change 1 line (419, first file) to 1 line (419, second file)',l:[418,418]},
{d:'Diff 2: Change 1 line (486, first file) to 1 line (486, second file)',l:[485,485]},
{d:'Diff 3: Add 4 lines (490 - 493, second file) after line 488 (first file)',l:[489,492]},
{d:'Diff 4: Change 1 line (529, first file) to 1 line (535, second file)',l:[534,534]},
{d:'Diff 5: Change 1 line (540, first file) to 1 line (546, second file)',l:[545,545]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="JSFGameManager (old).cs"><b>JSFGameManager (old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">   1 </div>
<div class="num">   2 </div>
<div class="num">   3 </div>
<div class="num">   4 </div>
<div class="num">   5 </div>
<div class="num">   6 </div>
<div class="num">   7 </div>
<div class="num">   8 </div>
<div class="num">   9 </div>
<div class="num">  10 </div>
<div class="num">  11 </div>
<div class="num">  12 </div>
<div class="num">  13 </div>
<div class="num">  14 </div>
<div class="num">  15 </div>
<div class="num">  16 </div>
<div class="num">  17 </div>
<div class="num">  18 </div>
<div class="num">  19 </div>
<div class="num">  20 </div>
<div class="num">  21 </div>
<div class="num">  22 </div>
<div class="num">  23 </div>
<div class="num">  24 </div>
<div class="num">  25 </div>
<div class="num">  26 </div>
<div class="num">  27 </div>
<div class="num">  28 </div>
<div class="num">  29 </div>
<div class="num">  30 </div>
<div class="num">  31 </div>
<div class="num">  32 </div>
<div class="num">  33 </div>
<div class="num">  34 </div>
<div class="num">  35 </div>
<div class="num">  36 </div>
<div class="num">  37 </div>
<div class="num">  38 </div>
<div class="num">  39 </div>
<div class="num">  40 </div>
<div class="num">  41 </div>
<div class="num">  42 </div>
<div class="num">  43 </div>
<div class="num">  44 </div>
<div class="num">  45 </div>
<div class="num">  46 </div>
<div class="num">  47 </div>
<div class="num">  48 </div>
<div class="num">  49 </div>
<div class="num">  50 </div>
<div class="num">  51 </div>
<div class="num">  52 </div>
<div class="num">  53 </div>
<div class="num">  54 </div>
<div class="num">  55 </div>
<div class="num">  56 </div>
<div class="num">  57 </div>
<div class="num">  58 </div>
<div class="num">  59 </div>
<div class="num">  60 </div>
<div class="num">  61 </div>
<div class="num">  62 </div>
<div class="num">  63 </div>
<div class="num">  64 </div>
<div class="num">  65 </div>
<div class="num">  66 </div>
<div class="num">  67 </div>
<div class="num">  68 </div>
<div class="num">  69 </div>
<div class="num">  70 </div>
<div class="num">  71 </div>
<div class="num">  72 </div>
<div class="num">  73 </div>
<div class="num">  74 </div>
<div class="num">  75 </div>
<div class="num">  76 </div>
<div class="num">  77 </div>
<div class="num">  78 </div>
<div class="num">  79 </div>
<div class="num">  80 </div>
<div class="num">  81 </div>
<div class="num">  82 </div>
<div class="num">  83 </div>
<div class="num">  84 </div>
<div class="num">  85 </div>
<div class="num">  86 </div>
<div class="num">  87 </div>
<div class="num">  88 </div>
<div class="num">  89 </div>
<div class="num">  90 </div>
<div class="num">  91 </div>
<div class="num">  92 </div>
<div class="num">  93 </div>
<div class="num">  94 </div>
<div class="num">  95 </div>
<div class="num">  96 </div>
<div class="num">  97 </div>
<div class="num">  98 </div>
<div class="num">  99 </div>
<div class="num"> 100 </div>
<div class="num"> 101 </div>
<div class="num"> 102 </div>
<div class="num"> 103 </div>
<div class="num"> 104 </div>
<div class="num"> 105 </div>
<div class="num"> 106 </div>
<div class="num"> 107 </div>
<div class="num"> 108 </div>
<div class="num"> 109 </div>
<div class="num"> 110 </div>
<div class="num"> 111 </div>
<div class="num"> 112 </div>
<div class="num"> 113 </div>
<div class="num"> 114 </div>
<div class="num"> 115 </div>
<div class="num"> 116 </div>
<div class="num"> 117 </div>
<div class="num"> 118 </div>
<div class="num"> 119 </div>
<div class="num"> 120 </div>
<div class="num"> 121 </div>
<div class="num"> 122 </div>
<div class="num"> 123 </div>
<div class="num"> 124 </div>
<div class="num"> 125 </div>
<div class="num"> 126 </div>
<div class="num"> 127 </div>
<div class="num"> 128 </div>
<div class="num"> 129 </div>
<div class="num"> 130 </div>
<div class="num"> 131 </div>
<div class="num"> 132 </div>
<div class="num"> 133 </div>
<div class="num"> 134 </div>
<div class="num"> 135 </div>
<div class="num"> 136 </div>
<div class="num"> 137 </div>
<div class="num"> 138 </div>
<div class="num"> 139 </div>
<div class="num"> 140 </div>
<div class="num"> 141 </div>
<div class="num"> 142 </div>
<div class="num"> 143 </div>
<div class="num"> 144 </div>
<div class="num"> 145 </div>
<div class="num"> 146 </div>
<div class="num"> 147 </div>
<div class="num"> 148 </div>
<div class="num"> 149 </div>
<div class="num"> 150 </div>
<div class="num"> 151 </div>
<div class="num"> 152 </div>
<div class="num"> 153 </div>
<div class="num"> 154 </div>
<div class="num"> 155 </div>
<div class="num"> 156 </div>
<div class="num"> 157 </div>
<div class="num"> 158 </div>
<div class="num"> 159 </div>
<div class="num"> 160 </div>
<div class="num"> 161 </div>
<div class="num"> 162 </div>
<div class="num"> 163 </div>
<div class="num"> 164 </div>
<div class="num"> 165 </div>
<div class="num"> 166 </div>
<div class="num"> 167 </div>
<div class="num"> 168 </div>
<div class="num"> 169 </div>
<div class="num"> 170 </div>
<div class="num"> 171 </div>
<div class="num"> 172 </div>
<div class="num"> 173 </div>
<div class="num"> 174 </div>
<div class="num"> 175 </div>
<div class="num"> 176 </div>
<div class="num"> 177 </div>
<div class="num"> 178 </div>
<div class="num"> 179 </div>
<div class="num"> 180 </div>
<div class="num"> 181 </div>
<div class="num"> 182 </div>
<div class="num"> 183 </div>
<div class="num"> 184 </div>
<div class="num"> 185 </div>
<div class="num"> 186 </div>
<div class="num"> 187 </div>
<div class="num"> 188 </div>
<div class="num"> 189 </div>
<div class="num"> 190 </div>
<div class="num"> 191 </div>
<div class="num"> 192 </div>
<div class="num"> 193 </div>
<div class="num"> 194 </div>
<div class="num"> 195 </div>
<div class="num"> 196 </div>
<div class="num"> 197 </div>
<div class="num"> 198 </div>
<div class="num"> 199 </div>
<div class="num"> 200 </div>
<div class="num"> 201 </div>
<div class="num"> 202 </div>
<div class="num"> 203 </div>
<div class="num"> 204 </div>
<div class="num"> 205 </div>
<div class="num"> 206 </div>
<div class="num"> 207 </div>
<div class="num"> 208 </div>
<div class="num"> 209 </div>
<div class="num"> 210 </div>
<div class="num"> 211 </div>
<div class="num"> 212 </div>
<div class="num"> 213 </div>
<div class="num"> 214 </div>
<div class="num"> 215 </div>
<div class="num"> 216 </div>
<div class="num"> 217 </div>
<div class="num"> 218 </div>
<div class="num"> 219 </div>
<div class="num"> 220 </div>
<div class="num"> 221 </div>
<div class="num"> 222 </div>
<div class="num"> 223 </div>
<div class="num"> 224 </div>
<div class="num"> 225 </div>
<div class="num"> 226 </div>
<div class="num"> 227 </div>
<div class="num"> 228 </div>
<div class="num"> 229 </div>
<div class="num"> 230 </div>
<div class="num"> 231 </div>
<div class="num"> 232 </div>
<div class="num"> 233 </div>
<div class="num"> 234 </div>
<div class="num"> 235 </div>
<div class="num"> 236 </div>
<div class="num"> 237 </div>
<div class="num"> 238 </div>
<div class="num"> 239 </div>
<div class="num"> 240 </div>
<div class="num"> 241 </div>
<div class="num"> 242 </div>
<div class="num"> 243 </div>
<div class="num"> 244 </div>
<div class="num"> 245 </div>
<div class="num"> 246 </div>
<div class="num"> 247 </div>
<div class="num"> 248 </div>
<div class="num"> 249 </div>
<div class="num"> 250 </div>
<div class="num"> 251 </div>
<div class="num"> 252 </div>
<div class="num"> 253 </div>
<div class="num"> 254 </div>
<div class="num"> 255 </div>
<div class="num"> 256 </div>
<div class="num"> 257 </div>
<div class="num"> 258 </div>
<div class="num"> 259 </div>
<div class="num"> 260 </div>
<div class="num"> 261 </div>
<div class="num"> 262 </div>
<div class="num"> 263 </div>
<div class="num"> 264 </div>
<div class="num"> 265 </div>
<div class="num"> 266 </div>
<div class="num"> 267 </div>
<div class="num"> 268 </div>
<div class="num"> 269 </div>
<div class="num"> 270 </div>
<div class="num"> 271 </div>
<div class="num"> 272 </div>
<div class="num"> 273 </div>
<div class="num"> 274 </div>
<div class="num"> 275 </div>
<div class="num"> 276 </div>
<div class="num"> 277 </div>
<div class="num"> 278 </div>
<div class="num"> 279 </div>
<div class="num"> 280 </div>
<div class="num"> 281 </div>
<div class="num"> 282 </div>
<div class="num"> 283 </div>
<div class="num"> 284 </div>
<div class="num"> 285 </div>
<div class="num"> 286 </div>
<div class="num"> 287 </div>
<div class="num"> 288 </div>
<div class="num"> 289 </div>
<div class="num"> 290 </div>
<div class="num"> 291 </div>
<div class="num"> 292 </div>
<div class="num"> 293 </div>
<div class="num"> 294 </div>
<div class="num"> 295 </div>
<div class="num"> 296 </div>
<div class="num"> 297 </div>
<div class="num"> 298 </div>
<div class="num"> 299 </div>
<div class="num"> 300 </div>
<div class="num"> 301 </div>
<div class="num"> 302 </div>
<div class="num"> 303 </div>
<div class="num"> 304 </div>
<div class="num"> 305 </div>
<div class="num"> 306 </div>
<div class="num"> 307 </div>
<div class="num"> 308 </div>
<div class="num"> 309 </div>
<div class="num"> 310 </div>
<div class="num"> 311 </div>
<div class="num"> 312 </div>
<div class="num"> 313 </div>
<div class="num"> 314 </div>
<div class="num"> 315 </div>
<div class="num"> 316 </div>
<div class="num"> 317 </div>
<div class="num"> 318 </div>
<div class="num"> 319 </div>
<div class="num"> 320 </div>
<div class="num"> 321 </div>
<div class="num"> 322 </div>
<div class="num"> 323 </div>
<div class="num"> 324 </div>
<div class="num"> 325 </div>
<div class="num"> 326 </div>
<div class="num"> 327 </div>
<div class="num"> 328 </div>
<div class="num"> 329 </div>
<div class="num"> 330 </div>
<div class="num"> 331 </div>
<div class="num"> 332 </div>
<div class="num"> 333 </div>
<div class="num"> 334 </div>
<div class="num"> 335 </div>
<div class="num"> 336 </div>
<div class="num"> 337 </div>
<div class="num"> 338 </div>
<div class="num"> 339 </div>
<div class="num"> 340 </div>
<div class="num"> 341 </div>
<div class="num"> 342 </div>
<div class="num"> 343 </div>
<div class="num"> 344 </div>
<div class="num"> 345 </div>
<div class="num"> 346 </div>
<div class="num"> 347 </div>
<div class="num"> 348 </div>
<div class="num"> 349 </div>
<div class="num"> 350 </div>
<div class="num"> 351 </div>
<div class="num"> 352 </div>
<div class="num"> 353 </div>
<div class="num"> 354 </div>
<div class="num"> 355 </div>
<div class="num"> 356 </div>
<div class="num"> 357 </div>
<div class="num"> 358 </div>
<div class="num"> 359 </div>
<div class="num"> 360 </div>
<div class="num"> 361 </div>
<div class="num"> 362 </div>
<div class="num"> 363 </div>
<div class="num"> 364 </div>
<div class="num"> 365 </div>
<div class="num"> 366 </div>
<div class="num"> 367 </div>
<div class="num"> 368 </div>
<div class="num"> 369 </div>
<div class="num"> 370 </div>
<div class="num"> 371 </div>
<div class="num"> 372 </div>
<div class="num"> 373 </div>
<div class="num"> 374 </div>
<div class="num"> 375 </div>
<div class="num"> 376 </div>
<div class="num"> 377 </div>
<div class="num"> 378 </div>
<div class="num"> 379 </div>
<div class="num"> 380 </div>
<div class="num"> 381 </div>
<div class="num"> 382 </div>
<div class="num"> 383 </div>
<div class="num"> 384 </div>
<div class="num"> 385 </div>
<div class="num"> 386 </div>
<div class="num"> 387 </div>
<div class="num"> 388 </div>
<div class="num"> 389 </div>
<div class="num"> 390 </div>
<div class="num"> 391 </div>
<div class="num"> 392 </div>
<div class="num"> 393 </div>
<div class="num"> 394 </div>
<div class="num"> 395 </div>
<div class="num"> 396 </div>
<div class="num"> 397 </div>
<div class="num"> 398 </div>
<div class="num"> 399 </div>
<div class="num"> 400 </div>
<div class="num"> 401 </div>
<div class="num"> 402 </div>
<div class="num"> 403 </div>
<div class="num"> 404 </div>
<div class="num"> 405 </div>
<div class="num"> 406 </div>
<div class="num"> 407 </div>
<div class="num"> 408 </div>
<div class="num"> 409 </div>
<div class="num"> 410 </div>
<div class="num"> 411 </div>
<div class="num"> 412 </div>
<div class="num"> 413 </div>
<div class="num"> 414 </div>
<div class="num"> 415 </div>
<div class="num"> 416 </div>
<div class="num"> 417 </div>
<div class="num"> 418 </div>
<div class="num"> 419 </div>
<div class="num"> 420 </div>
<div class="num"> 421 </div>
<div class="num"> 422 </div>
<div class="num"> 423 </div>
<div class="num"> 424 </div>
<div class="num"> 425 </div>
<div class="num"> 426 </div>
<div class="num"> 427 </div>
<div class="num"> 428 </div>
<div class="num"> 429 </div>
<div class="num"> 430 </div>
<div class="num"> 431 </div>
<div class="num"> 432 </div>
<div class="num"> 433 </div>
<div class="num"> 434 </div>
<div class="num"> 435 </div>
<div class="num"> 436 </div>
<div class="num"> 437 </div>
<div class="num"> 438 </div>
<div class="num"> 439 </div>
<div class="num"> 440 </div>
<div class="num"> 441 </div>
<div class="num"> 442 </div>
<div class="num"> 443 </div>
<div class="num"> 444 </div>
<div class="num"> 445 </div>
<div class="num"> 446 </div>
<div class="num"> 447 </div>
<div class="num"> 448 </div>
<div class="num"> 449 </div>
<div class="num"> 450 </div>
<div class="num"> 451 </div>
<div class="num"> 452 </div>
<div class="num"> 453 </div>
<div class="num"> 454 </div>
<div class="num"> 455 </div>
<div class="num"> 456 </div>
<div class="num"> 457 </div>
<div class="num"> 458 </div>
<div class="num"> 459 </div>
<div class="num"> 460 </div>
<div class="num"> 461 </div>
<div class="num"> 462 </div>
<div class="num"> 463 </div>
<div class="num"> 464 </div>
<div class="num"> 465 </div>
<div class="num"> 466 </div>
<div class="num"> 467 </div>
<div class="num"> 468 </div>
<div class="num"> 469 </div>
<div class="num"> 470 </div>
<div class="num"> 471 </div>
<div class="num"> 472 </div>
<div class="num"> 473 </div>
<div class="num"> 474 </div>
<div class="num"> 475 </div>
<div class="num"> 476 </div>
<div class="num"> 477 </div>
<div class="num"> 478 </div>
<div class="num"> 479 </div>
<div class="num"> 480 </div>
<div class="num"> 481 </div>
<div class="num"> 482 </div>
<div class="num"> 483 </div>
<div class="num"> 484 </div>
<div class="num"> 485 </div>
<div class="num"> 486 </div>
<div class="num"> 487 </div>
<div class="num"> 488 </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num">     </div>
<div class="num"> 489 </div>
<div class="num"> 490 </div>
<div class="num"> 491 </div>
<div class="num"> 492 </div>
<div class="num"> 493 </div>
<div class="num"> 494 </div>
<div class="num"> 495 </div>
<div class="num"> 496 </div>
<div class="num"> 497 </div>
<div class="num"> 498 </div>
<div class="num"> 499 </div>
<div class="num"> 500 </div>
<div class="num"> 501 </div>
<div class="num"> 502 </div>
<div class="num"> 503 </div>
<div class="num"> 504 </div>
<div class="num"> 505 </div>
<div class="num"> 506 </div>
<div class="num"> 507 </div>
<div class="num"> 508 </div>
<div class="num"> 509 </div>
<div class="num"> 510 </div>
<div class="num"> 511 </div>
<div class="num"> 512 </div>
<div class="num"> 513 </div>
<div class="num"> 514 </div>
<div class="num"> 515 </div>
<div class="num"> 516 </div>
<div class="num"> 517 </div>
<div class="num"> 518 </div>
<div class="num"> 519 </div>
<div class="num"> 520 </div>
<div class="num"> 521 </div>
<div class="num"> 522 </div>
<div class="num"> 523 </div>
<div class="num"> 524 </div>
<div class="num"> 525 </div>
<div class="num"> 526 </div>
<div class="num"> 527 </div>
<div class="num"> 528 </div>
<div class="num"> 529 </div>
<div class="num"> 530 </div>
<div class="num"> 531 </div>
<div class="num"> 532 </div>
<div class="num"> 533 </div>
<div class="num"> 534 </div>
<div class="num"> 535 </div>
<div class="num"> 536 </div>
<div class="num"> 537 </div>
<div class="num"> 538 </div>
<div class="num"> 539 </div>
<div class="num"> 540 </div>
<div class="num"> 541 </div>
<div class="num"> 542 </div>
<div class="num"> 543 </div>
<div class="num"> 544 </div>
<div class="num"> 545 </div>
<div class="num"> 546 </div>
<div class="num"> 547 </div>
<div class="num"> 548 </div>
<div class="num"> 549 </div>
<div class="num"> 550 </div>
<div class="num"> 551 </div>
<div class="num"> 552 </div>
<div class="num"> 553 </div>
<div class="num"> 554 </div>
<div class="num"> 555 </div>
<div class="num"> 556 </div>
<div class="num"> 557 </div>
<div class="num"> 558 </div>
<div class="num"> 559 </div>
<div class="num"> 560 </div>
<div class="num"> 561 </div>
<div class="num"> 562 </div>
<div class="num"> 563 </div>
<div class="num"> 564 </div>
<div class="num"> 565 </div>
<div class="num"> 566 </div>
<div class="num"> 567 </div>
<div class="num"> 568 </div>
<div class="num"> 569 </div>
<div class="num"> 570 </div>
<div class="num"> 571 </div>
<div class="num"> 572 </div>
<div class="num"> 573 </div>
<div class="num"> 574 </div>
<div class="num"> 575 </div>
<div class="num"> 576 </div>
<div class="num"> 577 </div>
<div class="num"> 578 </div>
<div class="num"> 579 </div>
<div class="num"> 580 </div>
<div class="num"> 581 </div>
<div class="num"> 582 </div>
<div class="num"> 583 </div>
<div class="num"> 584 </div>
<div class="num"> 585 </div>
<div class="num"> 586 </div>
<div class="num"> 587 </div>
<div class="num"> 588 </div>
<div class="num"> 589 </div>
<div class="num"> 590 </div>
<div class="num"> 591 </div>
<div class="num"> 592 </div>
<div class="num"> 593 </div>
<div class="num"> 594 </div>
<div class="num"> 595 </div>
<div class="num"> 596 </div>
<div class="num"> 597 </div>
<div class="num"> 598 </div>
<div class="num"> 599 </div>
<div class="num"> 600 </div>
<div class="num"> 601 </div>
<div class="num"> 602 </div>
<div class="num"> 603 </div>
<div class="num"> 604 </div>
<div class="num"> 605 </div>
<div class="num"> 606 </div>
<div class="num"> 607 </div>
<div class="num"> 608 </div>
<div class="num"> 609 </div>
<div class="num"> 610 </div>
<div class="num"> 611 </div>
<div class="num"> 612 </div>
<div class="num"> 613 </div>
<div class="num"> 614 </div>
<div class="num"> 615 </div>
<div class="num"> 616 </div>
<div class="num"> 617 </div>
<div class="num"> 618 </div>
<div class="num"> 619 </div>
<div class="num"> 620 </div>
<div class="num"> 621 </div>
<div class="num"> 622 </div>
<div class="num"> 623 </div>
<div class="num"> 624 </div>
<div class="num"> 625 </div>
<div class="num"> 626 </div>
<div class="num"> 627 </div>
<div class="num"> 628 </div>
<div class="num"> 629 </div>
<div class="num"> 630 </div>
<div class="num"> 631 </div>
<div class="num"> 632 </div>
<div class="num"> 633 </div>
<div class="num"> 634 </div>
<div class="num"> 635 </div>
<div class="num"> 636 </div>
<div class="num"> 637 </div>
<div class="num"> 638 </div>
<div class="num"> 639 </div>
<div class="num"> 640 </div>
<div class="num"> 641 </div>
<div class="num"> 642 </div>
<div class="num"> 643 </div>
<div class="num"> 644 </div>
<div class="num"> 645 </div>
<div class="num"> 646 </div>
<div class="num"> 647 </div>
<div class="num"> 648 </div>
<div class="num"> 649 </div>
<div class="num"> 650 </div>
<div class="num"> 651 </div>
<div class="num"> 652 </div>
<div class="num"> 653 </div>
<div class="num"> 654 </div>
<div class="num"> 655 </div>
<div class="num"> 656 </div>
<div class="num"> 657 </div>
<div class="num"> 658 </div>
<div class="num"> 659 </div>
<div class="num"> 660 </div>
<div class="num"> 661 </div>
<div class="num"> 662 </div>
<div class="num"> 663 </div>
<div class="num"> 664 </div>
<div class="num"> 665 </div>
<div class="num"> 666 </div>
<div class="num"> 667 </div>
<div class="num"> 668 </div>
<div class="num"> 669 </div>
<div class="num"> 670 </div>
<div class="num"> 671 </div>
<div class="num"> 672 </div>
<div class="num"> 673 </div>
<div class="num"> 674 </div>
<div class="num"> 675 </div>
<div class="num"> 676 </div>
<div class="num"> 677 </div>
<div class="num"> 678 </div>
<div class="num"> 679 </div>
<div class="num"> 680 </div>
<div class="num"> 681 </div>
<div class="num"> 682 </div>
<div class="num"> 683 </div>
<div class="num"> 684 </div>
<div class="num"> 685 </div>
<div class="num"> 686 </div>
<div class="num"> 687 </div>
<div class="num"> 688 </div>
<div class="num"> 689 </div>
<div class="num"> 690 </div>
<div class="num"> 691 </div>
<div class="num"> 692 </div>
<div class="num"> 693 </div>
<div class="num"> 694 </div>
<div class="num"> 695 </div>
<div class="num"> 696 </div>
<div class="num"> 697 </div>
<div class="num"> 698 </div>
<div class="num"> 699 </div>
<div class="num"> 700 </div>
<div class="num"> 701 </div>
<div class="num"> 702 </div>
<div class="num"> 703 </div>
<div class="num"> 704 </div>
<div class="num"> 705 </div>
<div class="num"> 706 </div>
<div class="num"> 707 </div>
<div class="num"> 708 </div>
<div class="num"> 709 </div>
<div class="num"> 710 </div>
<div class="num"> 711 </div>
<div class="num"> 712 </div>
<div class="num"> 713 </div>
<div class="num"> 714 </div>
<div class="num"> 715 </div>
<div class="num"> 716 </div>
<div class="num"> 717 </div>
<div class="num"> 718 </div>
<div class="num"> 719 </div>
<div class="num"> 720 </div>
<div class="num"> 721 </div>
<div class="num"> 722 </div>
<div class="num"> 723 </div>
<div class="num"> 724 </div>
<div class="num"> 725 </div>
<div class="num"> 726 </div>
<div class="num"> 727 </div>
<div class="num"> 728 </div>
<div class="num"> 729 </div>
<div class="num"> 730 </div>
<div class="num"> 731 </div>
<div class="num"> 732 </div>
<div class="num"> 733 </div>
<div class="num"> 734 </div>
<div class="num"> 735 </div>
<div class="num"> 736 </div>
<div class="num"> 737 </div>
<div class="num"> 738 </div>
<div class="num"> 739 </div>
<div class="num"> 740 </div>
<div class="num"> 741 </div>
<div class="num"> 742 </div>
<div class="num"> 743 </div>
<div class="num"> 744 </div>
<div class="num"> 745 </div>
<div class="num"> 746 </div>
<div class="num"> 747 </div>
<div class="num"> 748 </div>
<div class="num"> 749 </div>
<div class="num"> 750 </div>
<div class="num"> 751 </div>
<div class="num"> 752 </div>
<div class="num"> 753 </div>
<div class="num"> 754 </div>
<div class="num"> 755 </div>
<div class="num"> 756 </div>
<div class="num"> 757 </div>
<div class="num"> 758 </div>
<div class="num"> 759 </div>
<div class="num"> 760 </div>
<div class="num"> 761 </div>
<div class="num"> 762 </div>
<div class="num"> 763 </div>
<div class="num"> 764 </div>
<div class="num"> 765 </div>
<div class="num"> 766 </div>
<div class="num"> 767 </div>
<div class="num"> 768 </div>
<div class="num"> 769 </div>
<div class="num"> 770 </div>
<div class="num"> 771 </div>
<div class="num"> 772 </div>
<div class="num"> 773 </div>
<div class="num"> 774 </div>
<div class="num"> 775 </div>
<div class="num"> 776 </div>
<div class="num"> 777 </div>
<div class="num"> 778 </div>
<div class="num"> 779 </div>
<div class="num"> 780 </div>
<div class="num"> 781 </div>
<div class="num"> 782 </div>
<div class="num"> 783 </div>
<div class="num"> 784 </div>
<div class="num"> 785 </div>
<div class="num"> 786 </div>
<div class="num"> 787 </div>
<div class="num"> 788 </div>
<div class="num"> 789 </div>
<div class="num"> 790 </div>
<div class="num"> 791 </div>
<div class="num"> 792 </div>
<div class="num"> 793 </div>
<div class="num"> 794 </div>
<div class="num"> 795 </div>
<div class="num"> 796 </div>
<div class="num"> 797 </div>
<div class="num"> 798 </div>
<div class="num"> 799 </div>
<div class="num"> 800 </div>
<div class="num"> 801 </div>
<div class="num"> 802 </div>
<div class="num"> 803 </div>
<div class="num"> 804 </div>
<div class="num"> 805 </div>
<div class="num"> 806 </div>
<div class="num"> 807 </div>
<div class="num"> 808 </div>
<div class="num"> 809 </div>
<div class="num"> 810 </div>
<div class="num"> 811 </div>
<div class="num"> 812 </div>
<div class="num"> 813 </div>
<div class="num"> 814 </div>
<div class="num"> 815 </div>
<div class="num"> 816 </div>
<div class="num"> 817 </div>
<div class="num"> 818 </div>
<div class="num"> 819 </div>
<div class="num"> 820 </div>
<div class="num"> 821 </div>
<div class="num"> 822 </div>
<div class="num"> 823 </div>
<div class="num"> 824 </div>
<div class="num"> 825 </div>
<div class="num"> 826 </div>
<div class="num"> 827 </div>
<div class="num"> 828 </div>
<div class="num"> 829 </div>
<div class="num"> 830 </div>
<div class="num"> 831 </div>
<div class="num"> 832 </div>
<div class="num"> 833 </div>
<div class="num"> 834 </div>
<div class="num"> 835 </div>
<div class="num"> 836 </div>
<div class="num"> 837 </div>
<div class="num"> 838 </div>
<div class="num"> 839 </div>
<div class="num"> 840 </div>
<div class="num"> 841 </div>
<div class="num"> 842 </div>
<div class="num"> 843 </div>
<div class="num"> 844 </div>
<div class="num"> 845 </div>
<div class="num"> 846 </div>
<div class="num"> 847 </div>
<div class="num"> 848 </div>
<div class="num"> 849 </div>
<div class="num"> 850 </div>
<div class="num"> 851 </div>
<div class="num"> 852 </div>
<div class="num"> 853 </div>
<div class="num"> 854 </div>
<div class="num"> 855 </div>
<div class="num"> 856 </div>
<div class="num"> 857 </div>
<div class="num"> 858 </div>
<div class="num"> 859 </div>
<div class="num"> 860 </div>
<div class="num"> 861 </div>
<div class="num"> 862 </div>
<div class="num"> 863 </div>
<div class="num"> 864 </div>
<div class="num"> 865 </div>
<div class="num"> 866 </div>
<div class="num"> 867 </div>
<div class="num"> 868 </div>
<div class="num"> 869 </div>
<div class="num"> 870 </div>
<div class="num"> 871 </div>
<div class="num"> 872 </div>
<div class="num"> 873 </div>
<div class="num"> 874 </div>
<div class="num"> 875 </div>
<div class="num"> 876 </div>
<div class="num"> 877 </div>
<div class="num"> 878 </div>
<div class="num"> 879 </div>
<div class="num"> 880 </div>
<div class="num"> 881 </div>
<div class="num"> 882 </div>
<div class="num"> 883 </div>
<div class="num"> 884 </div>
<div class="num"> 885 </div>
<div class="num"> 886 </div>
<div class="num"> 887 </div>
<div class="num"> 888 </div>
<div class="num"> 889 </div>
<div class="num"> 890 </div>
<div class="num"> 891 </div>
<div class="num"> 892 </div>
<div class="num"> 893 </div>
<div class="num"> 894 </div>
<div class="num"> 895 </div>
<div class="num"> 896 </div>
<div class="num"> 897 </div>
<div class="num"> 898 </div>
<div class="num"> 899 </div>
<div class="num"> 900 </div>
<div class="num"> 901 </div>
<div class="num"> 902 </div>
<div class="num"> 903 </div>
<div class="num"> 904 </div>
<div class="num"> 905 </div>
<div class="num"> 906 </div>
<div class="num"> 907 </div>
<div class="num"> 908 </div>
<div class="num"> 909 </div>
<div class="num"> 910 </div>
<div class="num"> 911 </div>
<div class="num"> 912 </div>
<div class="num"> 913 </div>
<div class="num"> 914 </div>
<div class="num"> 915 </div>
<div class="num"> 916 </div>
<div class="num"> 917 </div>
<div class="num"> 918 </div>
<div class="num"> 919 </div>
<div class="num"> 920 </div>
<div class="num"> 921 </div>
<div class="num"> 922 </div>
<div class="num"> 923 </div>
<div class="num"> 924 </div>
<div class="num"> 925 </div>
<div class="num"> 926 </div>
<div class="num"> 927 </div>
<div class="num"> 928 </div>
<div class="num"> 929 </div>
<div class="num"> 930 </div>
<div class="num"> 931 </div>
<div class="num"> 932 </div>
<div class="num"> 933 </div>
<div class="num"> 934 </div>
<div class="num"> 935 </div>
<div class="num"> 936 </div>
<div class="num"> 937 </div>
<div class="num"> 938 </div>
<div class="num"> 939 </div>
<div class="num"> 940 </div>
<div class="num"> 941 </div>
<div class="num"> 942 </div>
<div class="num"> 943 </div>
<div class="num"> 944 </div>
<div class="num"> 945 </div>
<div class="num"> 946 </div>
<div class="num"> 947 </div>
<div class="num"> 948 </div>
<div class="num"> 949 </div>
<div class="num"> 950 </div>
<div class="num"> 951 </div>
<div class="num"> 952 </div>
<div class="num"> 953 </div>
<div class="num"> 954 </div>
<div class="num"> 955 </div>
<div class="num"> 956 </div>
<div class="num"> 957 </div>
<div class="num"> 958 </div>
<div class="num"> 959 </div>
<div class="num"> 960 </div>
<div class="num"> 961 </div>
<div class="num"> 962 </div>
<div class="num"> 963 </div>
<div class="num"> 964 </div>
<div class="num"> 965 </div>
<div class="num"> 966 </div>
<div class="num"> 967 </div>
<div class="num"> 968 </div>
<div class="num"> 969 </div>
<div class="num"> 970 </div>
<div class="num"> 971 </div>
<div class="num"> 972 </div>
<div class="num"> 973 </div>
<div class="num"> 974 </div>
<div class="num"> 975 </div>
<div class="num"> 976 </div>
<div class="num"> 977 </div>
<div class="num"> 978 </div>
<div class="num"> 979 </div>
<div class="num"> 980 </div>
<div class="num"> 981 </div>
<div class="num"> 982 </div>
<div class="num"> 983 </div>
<div class="num"> 984 </div>
<div class="num"> 985 </div>
<div class="num"> 986 </div>
<div class="num"> 987 </div>
<div class="num"> 988 </div>
<div class="num"> 989 </div>
<div class="num"> 990 </div>
<div class="num"> 991 </div>
<div class="num"> 992 </div>
<div class="num"> 993 </div>
<div class="num"> 994 </div>
<div class="num"> 995 </div>
<div class="num"> 996 </div>
<div class="num"> 997 </div>
<div class="num"> 998 </div>
<div class="num"> 999 </div>
<div class="num">1000 </div>
<div class="num">1001 </div>
<div class="num">1002 </div>
<div class="num">1003 </div>
<div class="num">1004 </div>
<div class="num">1005 </div>
<div class="num">1006 </div>
<div class="num">1007 </div>
<div class="num">1008 </div>
<div class="num">1009 </div>
<div class="num">1010 </div>
<div class="num">1011 </div>
<div class="num">1012 </div>
<div class="num">1013 </div>
<div class="num">1014 </div>
<div class="num">1015 </div>
<div class="num">1016 </div>
<div class="num">1017 </div>
<div class="num">1018 </div>
<div class="num">1019 </div>
<div class="num">1020 </div>
<div class="num">1021 </div>
<div class="num">1022 </div>
<div class="num">1023 </div>
<div class="num">1024 </div>
<div class="num">1025 </div>
<div class="num">1026 </div>
<div class="num">1027 </div>
<div class="num">1028 </div>
<div class="num">1029 </div>
<div class="num">1030 </div>
<div class="num">1031 </div>
<div class="num">1032 </div>
<div class="num">1033 </div>
<div class="num">1034 </div>
<div class="num">1035 </div>
<div class="num">1036 </div>
<div class="num">1037 </div>
<div class="num">1038 </div>
<div class="num">1039 </div>
<div class="num">1040 </div>
<div class="num">1041 </div>
<div class="num">1042 </div>
<div class="num">1043 </div>
<div class="num">1044 </div>
<div class="num">1045 </div>
<div class="num">1046 </div>
<div class="num">1047 </div>
<div class="num">1048 </div>
<div class="num">1049 </div>
<div class="num">1050 </div>
<div class="num">1051 </div>
<div class="num">1052 </div>
<div class="num">1053 </div>
<div class="num">1054 </div>
<div class="num">1055 </div>
<div class="num">1056 </div>
<div class="num">1057 </div>
<div class="num">1058 </div>
<div class="num">1059 </div>
<div class="num">1060 </div>
<div class="num">1061 </div>
<div class="num">1062 </div>
<div class="num">1063 </div>
<div class="num">1064 </div>
<div class="num">1065 </div>
<div class="num">1066 </div>
<div class="num">1067 </div>
<div class="num">1068 </div>
<div class="num">1069 </div>
<div class="num">1070 </div>
<div class="num">1071 </div>
<div class="num">1072 </div>
<div class="num">1073 </div>
<div class="num">1074 </div>
<div class="num">1075 </div>
<div class="num">1076 </div>
<div class="num">1077 </div>
<div class="num">1078 </div>
<div class="num">1079 </div>
<div class="num">1080 </div>
<div class="num">1081 </div>
<div class="num">1082 </div>
<div class="num">1083 </div>
<div class="num">1084 </div>
<div class="num">1085 </div>
<div class="num">1086 </div>
<div class="num">1087 </div>
<div class="num">1088 </div>
<div class="num">1089 </div>
<div class="num">1090 </div>
<div class="num">1091 </div>
<div class="num">1092 </div>
<div class="num">1093 </div>
<div class="num">1094 </div>
<div class="num">1095 </div>
<div class="num">1096 </div>
<div class="num">1097 </div>
<div class="num">1098 </div>
<div class="num">1099 </div>
<div class="num">1100 </div>
<div class="num">1101 </div>
<div class="num">1102 </div>
<div class="num">1103 </div>
<div class="num">1104 </div>
<div class="num">1105 </div>
<div class="num">1106 </div>
<div class="num">1107 </div>
<div class="num">1108 </div>
<div class="num">1109 </div>
<div class="num">1110 </div>
<div class="num">1111 </div>
<div class="num">1112 </div>
<div class="num">1113 </div>
<div class="num">1114 </div>
<div class="num">1115 </div>
<div class="num">1116 </div>
<div class="num">1117 </div>
<div class="num">1118 </div>
<div class="num">1119 </div>
<div class="num">1120 </div>
<div class="num">1121 </div>
<div class="num">1122 </div>
<div class="num">1123 </div>
<div class="num">1124 </div>
<div class="num">1125 </div>
<div class="num">1126 </div>
<div class="num">1127 </div>
<div class="num">1128 </div>
<div class="num">1129 </div>
<div class="num">1130 </div>
<div class="num">1131 </div>
<div class="num">1132 </div>
<div class="num">1133 </div>
<div class="num">1134 </div>
<div class="num">1135 </div>
<div class="num">1136 </div>
<div class="num">1137 </div>
<div class="num">1138 </div>
<div class="num">1139 </div>
<div class="num">1140 </div>
<div class="num">1141 </div>
<div class="num">1142 </div>
<div class="num">1143 </div>
<div class="num">1144 </div>
<div class="num">1145 </div>
<div class="num">1146 </div>
<div class="num">1147 </div>
<div class="num">1148 </div>
<div class="num">1149 </div>
<div class="num">1150 </div>
<div class="num">1151 </div>
<div class="num">1152 </div>
<div class="num">1153 </div>
<div class="num">1154 </div>
<div class="num">1155 </div>
<div class="num">1156 </div>
<div class="num">1157 </div>
<div class="num">1158 </div>
<div class="num">1159 </div>
<div class="num">1160 </div>
<div class="num">1161 </div>
<div class="num">1162 </div>
<div class="num">1163 </div>
<div class="num">1164 </div>
<div class="num">1165 </div>
<div class="num">1166 </div>
<div class="num">1167 </div>
<div class="num">1168 </div>
<div class="num">1169 </div>
<div class="num">1170 </div>
<div class="num">1171 </div>
<div class="num">1172 </div>
<div class="num">1173 </div>
<div class="num">1174 </div>
<div class="num">1175 </div>
<div class="num">1176 </div>
<div class="num">1177 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// NOTICE :</span></div>
<div class="l li"><span class="s1-89">/// This script is the Mother of all script~!</span></div>
<div class="l li"><span class="s1-89">/// Everything that happens during the game will be controlled in this script.</span></div>
<div class="l li"><span class="s1-89">/// (with public references from support scripts too ofcourse.)</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s1-89">/// </span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">// ---</span></div>
<div class="l li"><span class="s1-89">// global access board checking enums</span></div>
<div class="l li"><span class="s1-89">// ---</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> JSFGravity{ UP, DOWN, LEFT, RIGHT};</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> JSFBoardType{ Square, Hexagon};</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> JSFsquareMode{ CrossType, Box9x9Type};</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> JSFNewPieceMethod{ Appear, FallByGravity};</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">enum</span><span class="si"> JSFGameState{GamePending,GameActive,GameFinalizing,GameOver};</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">[RequireComponent(</span><span class="s1-90">typeof</span><span class="si">(JSFDefaultAnimations), </span><span class="s1-90">typeof</span><span class="si">(JSFBoardLayout), </span><span class="s1-90">typeof</span><span class="si">(JSFWinningConditions))]</span></div>
<div class="l li"><span class="si">[RequireComponent(</span><span class="s1-90">typeof</span><span class="si">(JSFVisualManager), </span><span class="s1-90">typeof</span><span class="si">(JSFAudioPlayer), </span><span class="s1-90">typeof</span><span class="si">(JSFVisualizedGrid) )]</span></div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> JSFGameManager : MonoBehaviour {</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// GLOBAL VARIABLES</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The type of board you want to use for this game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> JSFBoardType boardType = JSFBoardType.Square;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The Square swipe mode, cross-type limits the diagonal neighbours of a board box.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> JSFsquareMode squareSwipeMode = JSFsquareMode.Box9x9Type;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The Square splash mode, cross-type limits the diagonal neighbours of a board box.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> JSFsquareMode squareSplashMode = JSFsquareMode.Box9x9Type;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;If you have the original 'PoolManager' asset, and want to use the integrated pooling feature.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> usingPoolManager = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The current board's Width in boxes&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,20)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> boardWidth=4;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The current board's Height in boxes&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,20)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> boardHeight=4;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The current board's display size (visible in the Scene View if 'Show Grid' is enabled)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> size = 4; </span><span class="s1-89">// the size we want the board to be</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of spacing between each board box. (Does not affect board size)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(0.0f,100.0f)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> spacingPercentage = 0f; </span><span class="s1-89">// the percentage of spacing user wants</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of padding you want for the pieces inside the board box&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(0.0f,100.0f)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> paddingPercentage = 20f; </span><span class="s1-89">// the percentage of padding user wants</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> boxPadding = 0; </span><span class="s1-89">// the padding in each box **updated during &quot;Awake()&quot;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Visualize Grid : shows Corners of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showCorners = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Visualize Grid : shows the Grids of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showGrid = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Visualize Grid : shows the padded Tiles for the pieces of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showPaddedTile = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Visualize Grid : shows the extra information relating to the board grid in the scene view&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showToolTips = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The number of active colors in the game. (For non-special pieces)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,9)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> NumOfActiveType = 3; </span><span class="s1-89">// remember not to exceed the normalPieces array~!</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;if Enabled, Players can only swipe when the board has settled during the last move.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> moveOnlyAfterSettle = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// must the player wait for board to settle before next move?</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">//  public bool movingResetsCombo = true; // TODO moving rest combo currently not used in JSF</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// control timer</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The update speed for the Game Engine (the routine checks of Gravity &amp; possible moves)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> gameUpdateSpeed = 0.2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of delay before the board initiates a board reset when no more moves are available.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> noMoreMoveResetTime = 2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of delay before the board shows the player a legal suggested move.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> suggestionTimer = 5f;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// swipe stuff</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The current minimum swipe length the player must meet for the swipe to be accepted.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,10)] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> minSwipeMatch = 3;</span><span class="s1-89">// swipe chain length</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Shows the swipe indicator when swiping over selected pieces. &quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">        </span><span class="s1-85">&quot;(refer to the VisualManager script to set the Swipe Indicator object)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showSwipedIndicator = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Shows the swipe line between two pieces when swiping over selected pieces. &quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">             </span><span class="s1-85">&quot;(refer to the VisualManager script to set the Swipe Line object)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> showSwipeLine = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;How the new pieces will be created after being destroyed.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> JSFNewPieceMethod newPieceMode = JSFNewPieceMethod.Appear;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// appear type...</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The delay before the new pieces start appearing in 'Appear Mode'&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> appearModeDelay = 0.6f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;How fast the new piece will appear in 'Appear Mode' after the delay.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> appearModeSpeed = 0.8f;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// gravity type...</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;How fast the pieces will drop to the next board box.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> gravityDropSpeed = 0.25f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Give an extra effect when pieces reach the bottom of the box (hardcoded effect)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> pieceDropExtraEffect = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;Makes the pieces drop faster the longer the distance to the bottom.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> acceleratedVelocity = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// drop pieces fall faster if it need to cover more distance</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;if Enabled, the pieces will be delayed (by the specified amount) before any gravity call&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> delayedGravity = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// delay before a piece drops when there's an empty space</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The amount of delay before gravity takes affect for each individual piece.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">float</span><span class="si"> gravityDelayTime = 0.3f; </span><span class="s1-89">// the delay in float seconds</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The current gravity direction for the board.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> JSFGravity currentGravity = JSFGravity.DOWN; </span><span class="s1-89">// initial gravity of the game</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// control variables for gravity</span></div>
<div class="l li"><span class="si">    Vector3 gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">    JSFBoardDirection[] bd = </span><span class="s1-90">null</span><span class="si">; </span><span class="s1-89">// the direction array for landslide</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// pieces &amp; panels prefabs</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The reference for the PieceManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject pieceManager;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s1-85">&quot;The reference for the PanelManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> GameObject panelManager;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> JSFPieceDefinition[] pieceTypes;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> JSFPanelDefinition[] panelTypes;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> JSFBoard[,] board; </span><span class="s1-89">// the board array</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// scoring stuff</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">long</span><span class="si"> score = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> currentCombo = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> maxCombo = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> JSFComboPopUp comboScript;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> moves = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] matchCount = </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[9];</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// suggestion variables</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> checkedPossibleMove = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isCheckingPossibleMoves = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">bool</span><span class="si"> hasPowerMerge = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    Vector3 pieceOriginalSize;</span></div>
<div class="l li"><span class="si">    List&lt;GameObject&gt; suggestedPieces = </span><span class="s1-90">new</span><span class="si"> List&lt;GameObject&gt;();</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">//TODO canMove variable currently not being used... but it has been integrated into the engine</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> canMove = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// switch to determine if player can make the next move</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// other helper scripts</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> JSFAudioPlayer audioScript;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> JSFDefaultAnimations animScript;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// environment control variable</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s1-90">public</span><span class="si"> JSFGameState gameState = JSFGameState.GameActive;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Easy Access Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Easy Access FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// an easy access function to call the board from an int-array</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> JSFBoard iBoard(</span><span class="s1-90">int</span><span class="si">[] arrayRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> board[arrayRef[0],arrayRef[1]];</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector3 getBoardPosition(</span><span class="s1-90">int</span><span class="si">[] boardPosition){ </span><span class="s1-89">// OVERLOAD METHOD for int array</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> board[boardPosition[0],boardPosition[1]].position;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector3 getBoardPosition(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){ </span><span class="s1-89">// OVERLOAD METHOD for int x &amp; y</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> board[x,y].position;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Easy Access Functions</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ENGINE FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ================================================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Misc Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Misc. functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// start game preparation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> initializeGame() {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        boxPadding = 1f-(paddingPercentage/100); </span><span class="s1-89">// set the padding value</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        pieceTypes = pieceManager.GetComponents&lt;JSFPieceDefinition&gt;();</span></div>
<div class="l li"><span class="si">        panelTypes = panelManager.GetComponents&lt;JSFPanelDefinition&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// support sub-scripts initialization</span></div>
<div class="l li"><span class="si">        audioScript = GetComponent&lt;JSFAudioPlayer&gt;();</span></div>
<div class="l li"><span class="si">        animScript = GetComponent&lt;JSFDefaultAnimations&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// creates a 2D board</span></div>
<div class="l li"><span class="si">        board = </span><span class="s1-90">new</span><span class="si"> JSFBoard[boardWidth,boardHeight];</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// loop to create the board with blocks</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s1-89">/// For square type</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// for the board height size</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                    Vector3 pos = </span><span class="s1-90">new</span><span class="si"> Vector3( x - (boardWidth/2.0f) + 0.5f, y -(boardHeight/2.0f) + 0.5f, 0);</span></div>
<div class="l li"><span class="si">                    board[x,y] = </span><span class="s1-90">new</span><span class="si"> JSFBoard(</span><span class="s1-90">this</span><span class="si">, </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[2]{x,y}, pos*size ) ;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">//place a cube here to start with...</span></div>
<div class="l li"><span class="si">                    board[x,y].createObject(pieceTypes[0], ranType());</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Hexagon : </span><span class="s1-89">/// For hexagon type</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// for the board height size</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                    Vector3 pos;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(x%2 == 0){ </span><span class="s1-89">// displacement for hexagon type</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                        pos = </span><span class="s1-90">new</span><span class="si"> Vector3( (x - (boardWidth/2.0f) + 0.5f)*0.865f, y -(boardHeight/2.0f) + 0.75f, 0);</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                        pos = </span><span class="s1-90">new</span><span class="si"> Vector3( (x - (boardWidth/2.0f) + 0.5f)*0.865f, y -(boardHeight/2.0f) + 0.25f, 0);</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    board[x,y] = </span><span class="s1-90">new</span><span class="si"> JSFBoard(</span><span class="s1-90">this</span><span class="si">, </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[2]{x,y}, pos*size ) ;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-89">//place a cube here to start with...</span></div>
<div class="l li"><span class="si">                    board[x,y].createObject(pieceTypes[0], ranType());</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.initNeighbourReferences();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> preGameSetup(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// call the board panels preGameSetup...</span></div>
<div class="l li"><span class="si">        GetComponent&lt;JSFBoardLayout&gt;().setupGamePanels();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// call the board piece preGameSetup...</span></div>
<div class="l li"><span class="si">        GetComponent&lt;JSFBoardLayout&gt;().setupGamePieces();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the gravity check as a function call - to keep the updater() neat</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> gravityCheck(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth ; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                dropPieces(x,y);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// primarily for the suggestion functions... </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// but you can do other stuff when the board change as you like...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> notifyBoardHasChanged(){</span></div>
<div class="l li"><span class="si">        checkedPossibleMove = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// board has changed, will check possible moves again</span></div>
<div class="l li"><span class="si">        StopCoroutine(</span><span class="s1-85">&quot;suggestPiece&quot;</span><span class="si">); </span><span class="s1-89">// if it was still pending, stop the routine from executing...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// increase the combo counter &amp; display to GUI(dont worry, combo is reset elsewhere)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> increaseCombo() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// increase combo count!</span></div>
<div class="l li"><span class="si">        currentCombo += 1;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        JSFRelay.onCombo();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// relay to the combo script</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(comboScript != </span><span class="s1-90">null</span><span class="si">){ </span><span class="s1-89">// show combo to GUI (relay to GUI script)</span></div>
<div class="l li"><span class="si">            comboScript.executeCombo(currentCombo);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(maxCombo &lt; currentCombo){</span></div>
<div class="l li"><span class="si">            maxCombo = currentCombo; </span><span class="s1-89">// just to keep track of the max combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD FUNCTION for increaseScore</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> increaseScore(</span><span class="s1-90">int</span><span class="si"> num, </span><span class="s1-90">int</span><span class="si">[] arrayRef) {</span></div>
<div class="l li"><span class="si">        increaseScore(num,arrayRef[0],arrayRef[1]);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// increase the score counter (for external scripts to update)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> increaseScore(</span><span class="s1-90">int</span><span class="si"> num, </span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        num = JSFRelay.onScoreIssue(num,x,y); </span><span class="s1-89">// relay call for modified score</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(currentCombo &gt; 0){</span></div>
<div class="l li"><span class="si">            num = (</span><span class="s1-90">int</span><span class="si">) (num * (1.5+(currentCombo/10.0)) ); </span><span class="s1-89">// increase with multiplier from combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(JSFUtils.vm.displayScoreHUD &amp;&amp; board[x,y].scoreHUD != </span><span class="s1-90">null</span><span class="si">){ </span><span class="s1-89">// display the HUD?</span></div>
<div class="l li"><span class="si">            board[x,y].scoreHUD.display(num);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        score += num; </span><span class="s1-89">// add to the game score</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTime(</span><span class="s1-90">int</span><span class="si">[] arrayRef, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTime(iBoard(arrayRef),delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTime(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y,</span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTime(board[x,y],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTime(JSFBoard _board,</span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeRoutine(_board,delay,mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// destroys the box after a given time so that it looks cooler</span></div>
<div class="l li"><span class="si">    IEnumerator destroyInTimeRoutine(JSFBoard _board,</span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( _board.isFilled &amp;&amp; _board.piece.markedForDestroy ){ </span><span class="s1-89">// ignore those marked for destroy</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not continue... it is already marked</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(delay); </span><span class="s1-89">// wait for it...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(_board.isFilled &amp;&amp; !_board.piece.markedForDestroy &amp;&amp; _board.piece.pd.isDestructible){</span></div>
<div class="l li"><span class="si">            increaseScore( mScore, _board.arrayRef ); </span><span class="s1-89">// add to the score</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        _board.destroyBox();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!_board.panel.isDestructible()){ </span><span class="s1-89">// if the panel is NOT a solid type with no piece to destroy...</span></div>
<div class="l li"><span class="si">            _board.panelHit(); </span><span class="s1-89">// got hit by power attack~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTimeMarked(</span><span class="s1-90">int</span><span class="si">[] arrayRef, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(arrayRef[0],arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTimeMarked(JSFBoard _board, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(_board.arrayRef[0],_board.arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> destroyInTimeMarked(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeMarkedRoutine(x, y, delay, mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// destroys the box after a given time so that it looks cooler - object being marked for delayed destruction</span></div>
<div class="l li"><span class="si">    IEnumerator destroyInTimeMarkedRoutine(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">float</span><span class="si"> delay, </span><span class="s1-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            board[x,y].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// save the piece reference</span></div>
<div class="l li"><span class="si">        JSFGamePiece refPiece = board[x,y].piece;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(refPiece.markedForDestroy){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not continue as it is already marked...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// mark the piece as to be destroyed later</span></div>
<div class="l li"><span class="si">        refPiece.markedForDestroy = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        refPiece.thisPiece.GetComponent&lt;JSFPieceTracker&gt;().enabled = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// no longer movable</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(delay); </span><span class="s1-89">// wait for it...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(refPiece.master.isFilled){</span></div>
<div class="l li"><span class="si">            increaseScore( mScore, refPiece.master.arrayRef[0], refPiece.master.arrayRef[1] ); </span><span class="s1-89">// add to the score</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        refPiece.master.destroyMarked();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!refPiece.master.panel.isDestructible()){ </span><span class="s1-89">// if the panel is a solid type with no piece to destroy...</span></div>
<div class="l li"><span class="si">            refPiece.master.panelHit(); </span><span class="s1-89">// got hit by power attack~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function call for the ieNumerator version</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> lockJustCreated (</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">float</span><span class="si"> time){</span></div>
<div class="l li"><span class="si">        StartCoroutine( lockJustCreatedRoutine(x,y,time) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to lock a piece from being destroyed with a cooldown timer</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> IEnumerator lockJustCreatedRoutine (</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">float</span><span class="si"> time){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// lock the piece so that it isnt destroyed so fast</span></div>
<div class="l li"><span class="si">        JSFGamePiece refPiece = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            refPiece = board[x,y].piece;</span></div>
<div class="l li"><span class="si">            refPiece.justCreated = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            refPiece.master.isActive = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(time); </span><span class="s1-89">// wait for it...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// un-lock the piece again</span></div>
<div class="l li"><span class="si">            refPiece.justCreated = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            refPiece.master.isActive = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Misc Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Routine Checks Related</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ##################################################</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Routine checks and it's related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ##################################################</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// status update on given intervals</span></div>
<div class="l li"><span class="si">    IEnumerator updater () {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si"> (gameState != JSFGameState.GameOver){  </span><span class="s1-89">// loop again (infinite) until game over</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(JSFSwipeManager.isSwiping &amp;&amp; !Input.GetMouseButton(0)){</span></div>
<div class="l li"><span class="si">                JSFSwipeManager.validateSwipe(); </span><span class="s1-89">// validate current swipes (if any)</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            gravityCheck(); </span><span class="s1-89">// for dropping pieces into empty board box</span></div>
<div class="l li"><span class="si">            detectPossibleMoves(); </span><span class="s1-89">// to make sure the game doesn't get stuck with no more possible moves</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(gameUpdateSpeed); </span><span class="s1-89">// wait for the given intervals</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// possible moves detector + suggestor  ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// detects any possibles moves, find suggestions or resets the board is necessary</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> detectPossibleMoves() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//checks through each board boxes</span></div>
<div class="l lc d1"><span class="sc">        if(!checkedPossibleMove &amp;&amp; !isCheckingPossibleMoves){</span></div>
<div class="l li"><span class="si">            isCheckingPossibleMoves = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth ; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">( board[x,y].isBeingDelayed || board[x,y].isFalling ) {</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-89">// &quot;board.isActive&quot; is no longer used atm *to be evaluated of its use*</span></div>
<div class="l li"><span class="si">                        isCheckingPossibleMoves = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// do not continue, wait for board to clear and stabilize</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            checkedPossibleMove = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// once we checked, no need to check again until needed</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            JSFRelay.onBoardStabilize();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-89">// to hold all the pieces for the suggested move</span></div>
<div class="l li"><span class="si">            List&lt;JSFBoard&gt; suggestedBoards = findSuggestionMove();</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si"> (suggestedBoards.Count == 0) { </span><span class="s1-89">// no more possible moves</span></div>
<div class="l li"><span class="si">                StartCoroutine( resetBoard() ); </span><span class="s1-89">// reset board in co-routine mode for delayed event</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// suggest the found possible move to player</span></div>
<div class="l li"><span class="si">                suggestedPieces.Clear(); </span><span class="s1-89">// clear the current list</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s1-90">in</span><span class="si"> suggestedBoards){</span></div>
<div class="l li"><span class="si">                    suggestedPieces.Add(_board.piece.thisPiece); </span><span class="s1-89">// add the new chain to the list</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                suggestedBoards.Clear(); </span><span class="s1-89">// remove stored memory</span></div>
<div class="l li"><span class="si">                pieceOriginalSize = suggestedPieces[0].transform.localScale; </span><span class="s1-89">// remember the current size</span></div>
<div class="l li"><span class="si">                StartCoroutine(</span><span class="s1-85">&quot;suggestPiece&quot;</span><span class="si">); </span><span class="s1-89">// its a string coroutine so that we can use StopCoroutine!</span></div>
<div class="l li"><span class="si">                isCheckingPossibleMoves = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to find a valid chain of suggestion boards</span></div>
<div class="l li"><span class="si">    List&lt;JSFBoard&gt; findSuggestionMove(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// remember current swipe status before using swipeManager for checks...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">bool</span><span class="si"> limitedSwipe = JSFSwipeManager.limitedSwipe;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">bool</span><span class="si"> rainbowSwipe = JSFSwipeManager.rainbowSwipe;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> swipeColor = JSFSwipeManager.swipeColor;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; randomised = </span><span class="s1-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s1-89">// to select a random board for suggestion check</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; list = </span><span class="s1-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s1-89">// the list of boards in the suggestion found</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            list.Add(_board); </span><span class="s1-89">// add to the list of all available boards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> randomNum = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">while</span><span class="si">(list.Count &gt; 0){ </span><span class="s1-89">// transfer all the boards to the randomise list</span></div>
<div class="l li"><span class="si">            randomNum = Random.Range(0,list.Count);</span></div>
<div class="l li"><span class="si">            randomised.Add(list[randomNum]); </span><span class="s1-89">// add to the random list</span></div>
<div class="l li"><span class="si">            list.RemoveAt(randomNum); </span><span class="s1-89">// remove from this list</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-89">// at the end will have a randomised list</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s1-90">in</span><span class="si"> randomised){</span></div>
<div class="l li"><span class="si">            hasPowerMerge = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset status for powerMerge</span></div>
<div class="l li"><span class="si">            JSFSwipeManager.limitedSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset status for limitedSwipe</span></div>
<div class="l li"><span class="si">            list.Clear(); </span><span class="s1-89">// clear it each time before checking</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!_board.isFilled || !isLegalSwipe(_board)){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">continue</span><span class="si">; </span><span class="s1-89">// cannot proceed... move on to the next board...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( _board.pd.useAsFirstSwipe(_board.piece,</span><span class="s1-90">true</span><span class="si">) ) { </span><span class="s1-89">// simulate a swipe start</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">                list.Add(_board);</span></div>
<div class="l li"><span class="si">                JSFSwipeManager.rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// uses up the rainbow swipe each time...</span></div>
<div class="l lc d2"><span class="sc">                </span><span class="sc2">_board</span><span class="sd">.pd</span><span class="sc">.onSwipeAdded(_board.piece,true); // simulate a swipe added...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                list = recursiveFindSuggestion(list,_board);</span></div>
<div class="l li"> </div>
<div class="l la d3"> </div>
<div class="l la d3"> </div>
<div class="l la d3"> </div>
<div class="l la d3"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(list.Count &gt;= minSwipeMatch || hasPowerMerge){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// found a valid suggestion list</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            list.Clear(); </span><span class="s1-89">// clear it each time after checking</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">//reset the old status of the swipe...</span></div>
<div class="l li"><span class="si">        JSFSwipeManager.limitedSwipe = limitedSwipe;</span></div>
<div class="l li"><span class="si">        JSFSwipeManager.rainbowSwipe = rainbowSwipe;</span></div>
<div class="l li"><span class="si">        JSFSwipeManager.swipeColor = swipeColor;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> list; </span><span class="s1-89">// returns the list (be it empty OR with suggestions)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to recursively add valid boards to the suggestion chain</span></div>
<div class="l li"><span class="si">    List&lt;JSFBoard&gt; recursiveFindSuggestion(List&lt;JSFBoard&gt; list,JSFBoard _board){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(list.Count &gt;= minSwipeMatch || hasPowerMerge){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> list; </span><span class="s1-89">// already found a suggested list... go back!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; temp = </span><span class="s1-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s1-89">// a temp list being chained...</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; candidates = </span><span class="s1-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s1-89">// list of all the candidate boards</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> w = _board.pd.minSwipeDistance(_board.piece); </span></div>
<div class="l li"><span class="si">            w &lt;= _board.pd.maxSwipeDistance(_board.piece); w++){ </span><span class="s1-89">// within min/max range</span></div>
<div class="l li"><span class="si">            candidates.AddRange( getBoardsFromDistance(_board,w) ); </span><span class="s1-89">// adds the boards as candidates</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(JSFBoard neighbour </span><span class="s1-90">in</span><span class="si"> candidates){</span></div>
<div class="l li"><span class="si">            temp.Clear(); </span><span class="s1-89">// reset the temp list</span></div>
<div class="l li"><span class="si">            temp.AddRange(list); </span><span class="s1-89">// shallow copy to a new temp list</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!temp.Contains(neighbour)){ </span><span class="s1-89">// not part of the current simulated swipe chain</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!neighbour.isFilled || !isLegalSwipe(neighbour)){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">continue</span><span class="si">; </span><span class="s1-89">// no piece here / not legal swipe ... move on to the next board...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// check for powerMerge...</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(JSFBoard tempBoard </span><span class="s1-90">in</span><span class="si"> temp){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(tempBoard.pd.powerMerge(temp,neighbour.piece,tempBoard.piece,neighbour.arrayRef,</span><span class="s1-90">true</span><span class="si">) ||</span></div>
<div class="l li"><span class="si">                       neighbour.pd.powerMerge(temp,tempBoard.piece,neighbour.piece,neighbour.arrayRef,</span><span class="s1-90">true</span><span class="si">)){ </span><span class="s1-89">// powerMerge?</span></div>
<div class="l li"><span class="si">                        temp.Add(neighbour);</span></div>
<div class="l li"><span class="si">                        JSFSwipeManager.rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// uses up the rainbow swipe each time...</span></div>
<div class="l lc d4"><span class="sc">                        </span><span class="sc2">neighbour</span><span class="sd">.pd</span><span class="sc">.onSwipeAdded(</span><span class="sc2">_board</span><span class="sc">.piece,true); // simulate a swipe added...</span></div>
<div class="l li"><span class="si">                        hasPowerMerge = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">return</span><span class="si"> temp; </span><span class="s1-89">// found a valid suggestion list</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        JSFSwipeManager.limitedSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset limitedSwipe status</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(neighbour.pd.addToSwipeChain(neighbour.piece,JSFSwipeManager.swipeColor,</span><span class="s1-90">true</span><span class="si">) ){</span></div>
<div class="l li"><span class="si">                    temp.Add(neighbour);</span></div>
<div class="l li"><span class="si">                    JSFSwipeManager.rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// uses up the rainbow swipe each time...</span></div>
<div class="l lc d5"><span class="sc">                    </span><span class="sc2">neighbour</span><span class="sd">.pd</span><span class="sc">.onSwipeAdded(</span><span class="sc2">_board</span><span class="sc">.piece,true); // simulate a swipe added...</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(!JSFSwipeManager.limitedSwipe) temp = recursiveFindSuggestion(temp,neighbour);</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(temp.Count &gt;= minSwipeMatch){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">return</span><span class="si"> temp; </span><span class="s1-89">// found a valid suggestion list</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        JSFSwipeManager.limitedSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset limitedSwipe status</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> temp; </span><span class="s1-89">// return the list without any new results</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// resets the board due to no more moves</span></div>
<div class="l li"><span class="si">    IEnumerator resetBoard() {</span></div>
<div class="l li"><span class="si">        animScript.doAnim(JSFanimType.NOMOREMOVES,0,0);</span></div>
<div class="l li"><span class="si">        JSFRelay.onNoMoreMoves();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(noMoreMoveResetTime);</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s1-89">// reset the board status</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// for the board width size</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// for the board height size</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">( </span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">//reset the pieces with a random type..</span></div>
<div class="l li"><span class="si">                board[x,y].reset(pieceTypes[0], ranType());</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        JSFRelay.onComboEnd();</span></div>
<div class="l li"><span class="si">        JSFRelay.onBoardReset();</span></div>
<div class="l li"><span class="si">        isCheckingPossibleMoves = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// suggest a piece after a given time...</span></div>
<div class="l li"><span class="si">    IEnumerator suggestPiece() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(suggestionTimer); </span><span class="s1-89">// wait till it's time</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gameState != JSFGameState.GameActive){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// game no longer active... do not display suggestion...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(GameObject go </span><span class="s1-90">in</span><span class="si"> suggestedPieces){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(go == </span><span class="s1-90">null</span><span class="si"> || !go.activeSelf){</span></div>
<div class="l li"><span class="si">                notifyBoardHasChanged(); </span><span class="s1-89">// something changed... perform checks again!</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">float</span><span class="si"> currentSize = pieceOriginalSize.x;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// main scaler loop</span></div>
<div class="l li"><span class="si">            LeanTween.value(go,suggestPieceScaler,currentSize*0.75f,currentSize*1.25f,1f)</span></div>
<div class="l li"><span class="si">                .setLoopPingPong().setOnUpdateParam(go);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// sub rotate loop</span></div>
<div class="l li"><span class="si">            go.transform.localEulerAngles = </span><span class="s1-90">new</span><span class="si"> Vector3(0,0,340f);</span></div>
<div class="l li"><span class="si">            LeanTween.rotateZ(go,20f,0.8f).setLoopPingPong();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the function for leanTween to scale the suggested pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> suggestPieceScaler(</span><span class="s1-90">float</span><span class="si"> val, </span><span class="s1-90">object</span><span class="si"> go){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(checkedPossibleMove){</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localScale = </span><span class="s1-90">new</span><span class="si"> Vector3(val,val,1); </span><span class="s1-89">// scale to value</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            LeanTween.cancel((GameObject)go); </span><span class="s1-89">// cancel all tweens</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localScale = pieceOriginalSize; </span><span class="s1-89">// resets scale to normal</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localEulerAngles = Vector3.zero; </span><span class="s1-89">// resets rotate to normal</span></div>
<div class="l li"><span class="si">            JSFUtils.autoScalePadded((GameObject)go); </span><span class="s1-89">// as a precaution to reset size</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Board Piece position Fall by gravity function ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// (main gravity function)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> dropPieces(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( !(x &gt;= 0 &amp;&amp; x &lt; boardWidth &amp;&amp; y &gt;=0 &amp;&amp; y &lt; boardHeight) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// index out of bounds... do not continue~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( board[x,y].replacementNeeded()) {</span></div>
<div class="l li"><span class="si">            board[x,y].isBeingDelayed = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// status to verify that board already active in drop sequence</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(newPieceMode){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFNewPieceMethod.FallByGravity : </span><span class="s1-89">// gravity replacement</span></div>
<div class="l li"><span class="si">                StartCoroutine( movePieces(x,y) ); </span><span class="s1-89">// coroutine that can be delayed</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFNewPieceMethod.Appear : </span><span class="s1-89">// self replacement (appear from itself)</span></div>
<div class="l li"><span class="si">                StartCoroutine( appearModePieces(x,y) ); </span><span class="s1-89">// coroutine that can be delayed</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    IEnumerator appearModePieces(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(appearModeDelay); </span><span class="s1-89">// wait for the delay..</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// for custom pieces spawn rate</span></div>
<div class="l li"><span class="si">        JSFPieceDefinition spawned;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> w = 0; w &lt; pieceTypes.Length; w++){</span></div>
<div class="l li"><span class="si">            spawned = pieceTypes[w].chanceToSpawnThis(x,y);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(spawned != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNewAppear(spawned,appearModeSpeed,spawned.skinToUseDuringSpawn(x,y) );</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( w == pieceTypes.Length - 1){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// reached the end, no custom spawn... spawn the default</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNewAppear(pieceTypes[0],appearModeSpeed,ranType());</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s1-89">// board structure changed, so notify the change~!</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(appearModeSpeed); </span><span class="s1-89">// wait for appear mode speed</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].isBeingDelayed = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset status once delay is over</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// secondary gravity function as a coroutine for delay ability</span></div>
<div class="l li"><span class="si">    IEnumerator movePieces(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(delayedGravity &amp;&amp; board[x,y].mustWait){ </span><span class="s1-89">// if delay is required by GameManager or by board</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(gravityDelayTime); </span><span class="s1-89">// delay time between each dropped pieces</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        board[x,y].mustWait = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// change status of board to drop other pieces without delay</span></div>
<div class="l li"><span class="si">        board[x,y].isBeingDelayed = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset status once delay is over</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        JSFBoard tBoard = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.DOWN :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(0,-size,0); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            tBoard = board[x,y].top;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){ </span><span class="s1-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s1-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Left,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.Right,JSFBoardDirection.Bottom};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.BottomLeft,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.BottomRight, JSFBoardDirection.Bottom};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.UP :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(0,size,0); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            tBoard = board[x,y].bottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){ </span><span class="s1-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s1-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Left,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.Right,JSFBoardDirection.Top};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.TopLeft,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.TopRight, JSFBoardDirection.Top};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.LEFT :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(-size,0,0); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){ </span><span class="s1-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s1-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                tBoard = board[x,y].right;</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.Bottom,JSFBoardDirection.Left};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(Random.Range(0,2) == 0){</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].bottomRight;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        JSFBoardDirection.Bottom, JSFBoardDirection.TopLeft};</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].topRight;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        JSFBoardDirection.Bottom, JSFBoardDirection.BottomLeft};</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.RIGHT :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s1-90">new</span><span class="si"> Vector3(size,0,0); </span><span class="s1-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">switch</span><span class="si">(boardType){ </span><span class="s1-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s1-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                tBoard = board[x,y].left;</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.Bottom,JSFBoardDirection.Right};</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(Random.Range(0,2) == 0){</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].bottomLeft;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        JSFBoardDirection.Bottom, JSFBoardDirection.TopRight};</span></div>
<div class="l li"><span class="si">                } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].topLeft;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s1-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        JSFBoardDirection.Bottom, JSFBoardDirection.BottomRight};</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(tBoard == </span><span class="s1-90">null</span><span class="si">){ </span><span class="s1-89">// if board to steal from...</span></div>
<div class="l li"><span class="si">            StartCoroutine(spawnNew(x,y,gravityVector)); </span><span class="s1-89">// spawn a new piece</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// finished gravity on this pass... move to the next</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( tBoard.causesLandslideEffect() ){ </span><span class="s1-89">// check for landslide effect</span></div>
<div class="l li"><span class="si">            JSFBoard boardL = tBoard.boardEnumToReference(bd[0]); </span><span class="s1-89">// the board's hypothetical left</span></div>
<div class="l li"><span class="si">            JSFBoard boardR = tBoard.boardEnumToReference(bd[1]); </span><span class="s1-89">// the board's hypothetical right</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-89">// landslide code</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(boardL != </span><span class="s1-90">null</span><span class="si"> &amp;&amp;</span></div>
<div class="l li"><span class="si">               !boardL.causesLandslideEffect() &amp;&amp; boardL.allowGravity() ){ </span><span class="s1-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                tBoard = boardL;</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(boardR != </span><span class="s1-90">null</span><span class="si"> &amp;&amp;</span></div>
<div class="l li"><span class="si">                      !boardR.causesLandslideEffect() &amp;&amp; boardR.allowGravity() ){ </span><span class="s1-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                tBoard = boardR;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(tBoard != boardL &amp;&amp; tBoard != boardR ){ </span><span class="s1-89">// needs to look deeper down...</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// cause landslide below as the top is blocked...</span></div>
<div class="l li"><span class="si">                List&lt;JSFBoard&gt; list = tBoard.getAllBoardInDirection(bd[2]); </span><span class="s1-89">// list of boards hypothetical bottom</span></div>
<div class="l li"><span class="si">                </span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">foreach</span><span class="si">(JSFBoard boardB </span><span class="s1-90">in</span><span class="si"> list){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(boardB.boardEnumToReference(bd[2]) == </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// we reached the bottom of the board... do not continue...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    x = boardB.boardEnumToReference(bd[2]).arrayRef[0];</span></div>
<div class="l li"><span class="si">                    y = boardB.boardEnumToReference(bd[2]).arrayRef[1];</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(!board[x,y].replacementNeeded()){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// if the board here already has a piece, do not continue...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    boardL = boardB.boardEnumToReference(bd[0]); </span><span class="s1-89">// the board's hypothetical left</span></div>
<div class="l li"><span class="si">                    boardR = boardB.boardEnumToReference(bd[1]); </span><span class="s1-89">// the board's hypothetical right</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(boardL != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; !boardL.causesLandslideEffect()</span></div>
<div class="l li"><span class="si">                       &amp;&amp; boardL.allowGravity() ){ </span><span class="s1-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                        tBoard = boardL;</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(boardR != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; !boardR.causesLandslideEffect()</span></div>
<div class="l li"><span class="si">                              &amp;&amp; boardR.allowGravity() ){ </span><span class="s1-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                        tBoard = boardR;</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( tBoard != </span><span class="s1-90">null</span><span class="si"> &amp;&amp; tBoard.allowGravity() ){ </span><span class="s1-89">// a valid target to steal a piece from...</span></div>
<div class="l li"><span class="si">            JSFSwipeManager.voidSwipeIfNeeded(x,y); </span><span class="s1-89">// void any swipes if needed</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(board[x,y].piece != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].piece.removePiece(); </span><span class="s1-89">// just in case the reference is lost without removal</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            board[x,y].piece = tBoard.piece; </span><span class="s1-89">// steal the piece</span></div>
<div class="l li"><span class="si">            tBoard.piece = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            StartCoroutine(animateMove(x,y)); </span><span class="s1-89">// animate the change</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// do the same check on the board we stole from as itself needs replacement</span></div>
<div class="l li"><span class="si">            dropPieces(tBoard.arrayRef[0],tBoard.arrayRef[1]);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// sub-function to update the board box and tween the piece due to gravity movement</span></div>
<div class="l li"><span class="si">    IEnumerator animateMove (</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// update the local data...</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// board is falling...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> distance = countBlockedUnfilled(x,y, </span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">float</span><span class="si"> delay = gravityDropSpeed;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(acceleratedVelocity){</span></div>
<div class="l li"><span class="si">            delay =  gravityDropSpeed / Mathf.Max(distance, 1);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        board[x,y].applyTweening(delay);</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s1-89">// board structure changed, so notify the change~!</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// the timer according to the drop speed or updatespeed (whichever longer)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(delay);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// update the board box once animation has finished..</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// no longer falling into position</span></div>
<div class="l li"><span class="si">        board[x,y].isActive = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// piece is active for checks</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( distance &lt; 1 ){ </span><span class="s1-89">// check if it has reached bottom</span></div>
<div class="l li"><span class="si">            board[x,y].mustWait = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// reached bottom, re-activate gravity delay</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(pieceDropExtraEffect){ </span><span class="s1-89">// if extra effect is enabled</span></div>
<div class="l li"><span class="si">                board[x,y].applyTweeningAfterEffects(gravityDropSpeed, getVectorEffect(x,y) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            audioScript.DropSoundFx.play(); </span><span class="s1-89">// play the drop sound</span></div>
<div class="l li"><span class="si">        }</span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check if this new piece needs to fall or not...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(board[x,y].boardEnumToReference(bd[2]) != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                dropPieces(board[x,y].boardEnumToReference(bd[2]).arrayRef[0],</span></div>
<div class="l li"><span class="si">                           board[x,y].boardEnumToReference(bd[2]).arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// gravity effect after falling down - simulates easeInBack</span></div>
<div class="l li"><span class="si">    Vector3[] getVectorEffect(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">float</span><span class="si"> offset = 0.35f * size; </span><span class="s1-89">// the amount of offset you wish for effect</span></div>
<div class="l li"><span class="si">        Vector3 position = board[x,y].position;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            position.z = board[x,y].piece.thisPiece.transform.position.z; </span><span class="s1-89">// ensure the Z order stays when tweening</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        Vector3 pos;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.DOWN : </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s1-90">new</span><span class="si"> Vector3( 0f , offset, 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3[] {position, (position - pos ), position, position};</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.UP :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s1-90">new</span><span class="si"> Vector3( 0f , offset/2.5f, 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3[] {(position + pos), position, position, position };</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.LEFT :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s1-90">new</span><span class="si"> Vector3( offset/3, 0f , 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3[] {(position - pos), position, position, position };</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.RIGHT :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s1-90">new</span><span class="si"> Vector3( offset/3, 0f , 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3[] {(position + pos), position, position, position };</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// sub-function to compensate delay of a new spawned piece tweening process</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> IEnumerator spawnNew (</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, Vector3 spawnPoint){</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// board is falling...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> distance = countBlockedUnfilled(x,y, </span><span class="s1-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">float</span><span class="si"> delay = gravityDropSpeed;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(acceleratedVelocity){</span></div>
<div class="l li"><span class="si">            delay =  gravityDropSpeed / Mathf.Max(distance, 1);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// for custom pieces spawn rate</span></div>
<div class="l li"><span class="si">        JSFPieceDefinition spawned;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> w = 0; w &lt; pieceTypes.Length; w++){</span></div>
<div class="l li"><span class="si">            spawned = pieceTypes[w].chanceToSpawnThis(x,y);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(spawned != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNew(spawned, spawnPoint, delay, spawned.skinToUseDuringSpawn(x,y) );</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">( w == pieceTypes.Length - 1){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-89">// reached the end, no custom spawn... spawn the default</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNew(pieceTypes[0],spawnPoint, delay, ranType() );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s1-89">// board structure changed, so notify the change~!</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// the timer according to the drop speed or updatespeed (whichever longer)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">yield</span><span class="si"> </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> WaitForSeconds(delay);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// update the board box once animation has finished..</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].isActive = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].mustWait = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// reached bottom, re-activate gravity delay</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( distance &lt; 1 ){ </span><span class="s1-89">// check if it has reached bottom            </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(pieceDropExtraEffect){ </span><span class="s1-89">// if extra effect is enabled</span></div>
<div class="l li"><span class="si">                board[x,y].applyTweeningAfterEffects(gravityDropSpeed, getVectorEffect(x,y) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            audioScript.DropSoundFx.play(); </span><span class="s1-89">// play the drop sound</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// check if this new piece needs to fall or not...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(board[x,y].boardEnumToReference(bd[2]) != </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                dropPieces(board[x,y].boardEnumToReference(bd[2]).arrayRef[0],</span></div>
<div class="l li"><span class="si">                           board[x,y].boardEnumToReference(bd[2]).arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// used to determine the number of unfilled board boxes beyond the current panel</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// limited by panels that pieces cannot pass through</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> countUnfilled(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">bool</span><span class="si"> ignoreTotalCount){ </span><span class="s1-89">// extra function currently un-used by GameManager...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.UP :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> cols = y+1; cols &lt; boardHeight; cols++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board[x,cols].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                } </span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[x,cols].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.DOWN :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> cols = y-1; cols &gt;= 0 ; cols--){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board[x,cols].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                } </span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[x,cols].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.RIGHT : </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> rows = x+1; rows &lt; boardWidth; rows++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board[rows,y].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[rows,y].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.LEFT :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> rows = x-1; rows &gt;=0 ; rows--){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board[rows,y].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[rows,y].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// used to determine the number of unfilled board boxes beyond the current panel</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// limited by panels that block gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> countBlockedUnfilled(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y, </span><span class="s1-90">bool</span><span class="si"> ignoreTotalCount){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!board[x,y].panel.isStealable()){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// cannot proceed.. distance = 0</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.UP :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> cols = y+1; cols &lt; boardHeight; cols++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board[x,cols].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[x,cols].panel.allowsGravity() || !board[x,cols].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[x,cols].panel.pnd.hasStartingPiece ) count--;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.DOWN :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> cols = y-1; cols &gt;= 0 ; cols--){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board[x,cols].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[x,cols].panel.allowsGravity() || !board[x,cols].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[x,cols].panel.pnd.hasStartingPiece ) count--;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.RIGHT : </span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> rows = x+1; rows &lt; boardWidth; rows++){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board[rows,y].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[rows,y].panel.allowsGravity() || !board[rows,y].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[rows,y].panel.pnd.hasStartingPiece ) count--;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFGravity.LEFT :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> rows = x-1; rows &gt;=0 ; rows--){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board[rows,y].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s1-90">return</span><span class="si"> count; </span><span class="s1-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[rows,y].panel.allowsGravity() || !board[rows,y].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(!board[rows,y].panel.pnd.hasStartingPiece ) count--;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Routine Checks Related</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Helper Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Helper FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// random cubeType generator , just coz the code is too long</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> ranType() {</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> Random.Range(0,Mathf.Min( NumOfActiveType, pieceTypes[0].skin.Length) );</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// limited by normalpieces types available if numOfActiveType is declared out of bounds</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED FUNCTION of getBoardsDistance *range of distance Type*</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;JSFBoard&gt; getBoardsFromDistance(</span><span class="s1-90">int</span><span class="si">[] point, </span><span class="s1-90">int</span><span class="si"> distMin, </span><span class="s1-90">int</span><span class="si"> distMax){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> getBoardsFromDistance(iBoard(point),distMin, distMax );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// get all the board from a specific distance range~!</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;JSFBoard&gt; getBoardsFromDistance(JSFBoard point, </span><span class="s1-90">int</span><span class="si"> distMin, </span><span class="s1-90">int</span><span class="si"> distMax){</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; temp = </span><span class="s1-90">new</span><span class="si"> List&lt;JSFBoard&gt;();</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> x = distMin; x &lt;= distMax; x++){</span></div>
<div class="l li"><span class="si">            temp.AddRange(getBoardsFromDistance(point,x)); </span><span class="s1-89">// add the boards within the range specified</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> temp;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED FUNCTION of getBoardsDistance</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;JSFBoard&gt; getBoardsFromDistance(</span><span class="s1-90">int</span><span class="si">[] point, </span><span class="s1-90">int</span><span class="si"> dist){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> getBoardsFromDistance(iBoard(point),dist);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// get all the board from a specific distance</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> List&lt;JSFBoard&gt; getBoardsFromDistance(JSFBoard point, </span><span class="s1-90">int</span><span class="si"> dist){</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; temp = </span><span class="s1-90">new</span><span class="si"> List&lt;JSFBoard&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(JSFBoard itr </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(boardRadiusDistance(point,itr) == dist){ </span><span class="s1-89">// is on this specific distance</span></div>
<div class="l li"><span class="si">                temp.Add(itr); </span><span class="s1-89">// add the board to the list</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> temp;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// OVERLOADED FUNCTION of boardRadiusDistance</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> boardRadiusDistance(JSFBoard boardA, JSFBoard boardB ){ </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si">  boardRadiusDistance(boardA.arrayRef,boardB.arrayRef);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to calculate the relative distance between two board locations</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> boardRadiusDistance(</span><span class="s1-90">int</span><span class="si">[] bPosA, </span><span class="s1-90">int</span><span class="si">[] bPosB ){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s1-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> totalX = Mathf.Abs( bPosA[0] - bPosB[0] );</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> totalY = Mathf.Abs( bPosA[1] - bPosB[1] );</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(squareSwipeMode == JSFsquareMode.CrossType){ </span><span class="s1-89">// specific for cross-type square</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> totalX + totalY; </span><span class="s1-89">// each box = 1 distance... no diagonals</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si">  Mathf.Max(totalX, Mathf.Max(totalY, Mathf.Abs( totalX - totalY ) ) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            Vector3 vecA = hexGetCalcVector(bPosA);</span></div>
<div class="l li"><span class="si">            Vector3 vecB = hexGetCalcVector(bPosB);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> (</span><span class="s1-90">int</span><span class="si">) Mathf.Max(</span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">float</span><span class="si">[]{ </span><span class="s1-89">// hex distance formula</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.x - vecB.x),</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.y - vecB.y),</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.z - vecB.z)</span></div>
<div class="l li"><span class="si">            });</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> playerMadeAMove(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// TODO moving rest combo currently not used in JSF</span></div>
<div class="l li"><span class="s1-89">//      if(movingResetsCombo) JSFRelay.onComboEnd(); // end the combo if no special override...</span></div>
<div class="l li"><span class="si">        moves++; </span><span class="s1-89">// merging, so number of moves increase</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        JSFRelay.onPlayerMove();</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s1-89">// notify the change~!</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isLegalSwipe(JSFBoard board){ </span><span class="s1-89">// can users make a swipe call?</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// add any other criteria here (if any)</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> ( board.isLegalSwipe() ); </span><span class="s1-89">// meet criteria?</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Helper Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region HEXAGON related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// HEXAGON FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// returns the unsquiggled Hexagon grid</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] hexUnsquiggleArray(</span><span class="s1-90">int</span><span class="si">[] array){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> </span><span class="s1-90">int</span><span class="si">[] { array[0],array[1] - array[0] + (array[0]/2)};</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// returns a vector3 array for distance calculation</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> Vector3 hexGetCalcVector(</span><span class="s1-90">int</span><span class="si">[] array){</span></div>
<div class="l li"><span class="si">        array = hexUnsquiggleArray(array);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">new</span><span class="si"> Vector3(array[0],array[1],(array[0] + array[1])*-1);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion HEXAGON related functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region game-start sequence</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> StartGame() { </span><span class="s1-89">// when the game is actually running...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gameState == JSFGameState.GamePending){</span></div>
<div class="l li"><span class="si">            gameState = JSFGameState.GameActive; </span><span class="s1-89">// change the state to active...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// Initialize Timers and settings</span></div>
<div class="l li"><span class="si">            StartCoroutine(updater()); </span><span class="s1-89">// initiate the update loop</span></div>
<div class="l li"><span class="si">            canMove = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// allows player to move the pieces</span></div>
<div class="l li"><span class="si">            </span><span class="s1-89">// call the gameStart for the board objects</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">                _board.onGameStart();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            JSFRelay.onGameStart();</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s1-85">&quot;Game already started... cannot start the game again!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion game-start sequence</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region Unity Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// UNITY FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> Awake () { </span><span class="s1-89">// board needs to be initialized before other scripts can access it</span></div>
<div class="l li"><span class="si">        JSFUtils.gm = </span><span class="s1-90">this</span><span class="si">; </span><span class="s1-89">// make a easy reference to the GameManager ( this script ! ) </span></div>
<div class="l li"><span class="si">        JSFUtils.wc = GetComponent&lt;JSFWinningConditions&gt;(); </span><span class="s1-89">// make a easy reference to the WinningConditions script~!</span></div>
<div class="l li"><span class="si">        JSFUtils.vm = GetComponent&lt;JSFVisualManager&gt;(); </span><span class="s1-89">// make a easy reference to the GUIManager script~!</span></div>
<div class="l li"><span class="si">        JSFRelay.onPreGameStart();</span></div>
<div class="l li"><span class="si">        initializeGame();</span></div>
<div class="l li"><span class="si">        preGameSetup();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        canMove = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// initially cannot be moved...</span></div>
<div class="l li"><span class="si">        gameState = JSFGameState.GamePending; </span><span class="s1-89">// game is waiting to be started...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">void</span><span class="si"> Start(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// init the board objects</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s1-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.init(); </span><span class="s1-89">// to show the GUIs for the objects</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion Unity Functions</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="JSFGameManager (new).cs"><b>JSFGameManager (new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">   1 </div>
<div class="num">   2 </div>
<div class="num">   3 </div>
<div class="num">   4 </div>
<div class="num">   5 </div>
<div class="num">   6 </div>
<div class="num">   7 </div>
<div class="num">   8 </div>
<div class="num">   9 </div>
<div class="num">  10 </div>
<div class="num">  11 </div>
<div class="num">  12 </div>
<div class="num">  13 </div>
<div class="num">  14 </div>
<div class="num">  15 </div>
<div class="num">  16 </div>
<div class="num">  17 </div>
<div class="num">  18 </div>
<div class="num">  19 </div>
<div class="num">  20 </div>
<div class="num">  21 </div>
<div class="num">  22 </div>
<div class="num">  23 </div>
<div class="num">  24 </div>
<div class="num">  25 </div>
<div class="num">  26 </div>
<div class="num">  27 </div>
<div class="num">  28 </div>
<div class="num">  29 </div>
<div class="num">  30 </div>
<div class="num">  31 </div>
<div class="num">  32 </div>
<div class="num">  33 </div>
<div class="num">  34 </div>
<div class="num">  35 </div>
<div class="num">  36 </div>
<div class="num">  37 </div>
<div class="num">  38 </div>
<div class="num">  39 </div>
<div class="num">  40 </div>
<div class="num">  41 </div>
<div class="num">  42 </div>
<div class="num">  43 </div>
<div class="num">  44 </div>
<div class="num">  45 </div>
<div class="num">  46 </div>
<div class="num">  47 </div>
<div class="num">  48 </div>
<div class="num">  49 </div>
<div class="num">  50 </div>
<div class="num">  51 </div>
<div class="num">  52 </div>
<div class="num">  53 </div>
<div class="num">  54 </div>
<div class="num">  55 </div>
<div class="num">  56 </div>
<div class="num">  57 </div>
<div class="num">  58 </div>
<div class="num">  59 </div>
<div class="num">  60 </div>
<div class="num">  61 </div>
<div class="num">  62 </div>
<div class="num">  63 </div>
<div class="num">  64 </div>
<div class="num">  65 </div>
<div class="num">  66 </div>
<div class="num">  67 </div>
<div class="num">  68 </div>
<div class="num">  69 </div>
<div class="num">  70 </div>
<div class="num">  71 </div>
<div class="num">  72 </div>
<div class="num">  73 </div>
<div class="num">  74 </div>
<div class="num">  75 </div>
<div class="num">  76 </div>
<div class="num">  77 </div>
<div class="num">  78 </div>
<div class="num">  79 </div>
<div class="num">  80 </div>
<div class="num">  81 </div>
<div class="num">  82 </div>
<div class="num">  83 </div>
<div class="num">  84 </div>
<div class="num">  85 </div>
<div class="num">  86 </div>
<div class="num">  87 </div>
<div class="num">  88 </div>
<div class="num">  89 </div>
<div class="num">  90 </div>
<div class="num">  91 </div>
<div class="num">  92 </div>
<div class="num">  93 </div>
<div class="num">  94 </div>
<div class="num">  95 </div>
<div class="num">  96 </div>
<div class="num">  97 </div>
<div class="num">  98 </div>
<div class="num">  99 </div>
<div class="num"> 100 </div>
<div class="num"> 101 </div>
<div class="num"> 102 </div>
<div class="num"> 103 </div>
<div class="num"> 104 </div>
<div class="num"> 105 </div>
<div class="num"> 106 </div>
<div class="num"> 107 </div>
<div class="num"> 108 </div>
<div class="num"> 109 </div>
<div class="num"> 110 </div>
<div class="num"> 111 </div>
<div class="num"> 112 </div>
<div class="num"> 113 </div>
<div class="num"> 114 </div>
<div class="num"> 115 </div>
<div class="num"> 116 </div>
<div class="num"> 117 </div>
<div class="num"> 118 </div>
<div class="num"> 119 </div>
<div class="num"> 120 </div>
<div class="num"> 121 </div>
<div class="num"> 122 </div>
<div class="num"> 123 </div>
<div class="num"> 124 </div>
<div class="num"> 125 </div>
<div class="num"> 126 </div>
<div class="num"> 127 </div>
<div class="num"> 128 </div>
<div class="num"> 129 </div>
<div class="num"> 130 </div>
<div class="num"> 131 </div>
<div class="num"> 132 </div>
<div class="num"> 133 </div>
<div class="num"> 134 </div>
<div class="num"> 135 </div>
<div class="num"> 136 </div>
<div class="num"> 137 </div>
<div class="num"> 138 </div>
<div class="num"> 139 </div>
<div class="num"> 140 </div>
<div class="num"> 141 </div>
<div class="num"> 142 </div>
<div class="num"> 143 </div>
<div class="num"> 144 </div>
<div class="num"> 145 </div>
<div class="num"> 146 </div>
<div class="num"> 147 </div>
<div class="num"> 148 </div>
<div class="num"> 149 </div>
<div class="num"> 150 </div>
<div class="num"> 151 </div>
<div class="num"> 152 </div>
<div class="num"> 153 </div>
<div class="num"> 154 </div>
<div class="num"> 155 </div>
<div class="num"> 156 </div>
<div class="num"> 157 </div>
<div class="num"> 158 </div>
<div class="num"> 159 </div>
<div class="num"> 160 </div>
<div class="num"> 161 </div>
<div class="num"> 162 </div>
<div class="num"> 163 </div>
<div class="num"> 164 </div>
<div class="num"> 165 </div>
<div class="num"> 166 </div>
<div class="num"> 167 </div>
<div class="num"> 168 </div>
<div class="num"> 169 </div>
<div class="num"> 170 </div>
<div class="num"> 171 </div>
<div class="num"> 172 </div>
<div class="num"> 173 </div>
<div class="num"> 174 </div>
<div class="num"> 175 </div>
<div class="num"> 176 </div>
<div class="num"> 177 </div>
<div class="num"> 178 </div>
<div class="num"> 179 </div>
<div class="num"> 180 </div>
<div class="num"> 181 </div>
<div class="num"> 182 </div>
<div class="num"> 183 </div>
<div class="num"> 184 </div>
<div class="num"> 185 </div>
<div class="num"> 186 </div>
<div class="num"> 187 </div>
<div class="num"> 188 </div>
<div class="num"> 189 </div>
<div class="num"> 190 </div>
<div class="num"> 191 </div>
<div class="num"> 192 </div>
<div class="num"> 193 </div>
<div class="num"> 194 </div>
<div class="num"> 195 </div>
<div class="num"> 196 </div>
<div class="num"> 197 </div>
<div class="num"> 198 </div>
<div class="num"> 199 </div>
<div class="num"> 200 </div>
<div class="num"> 201 </div>
<div class="num"> 202 </div>
<div class="num"> 203 </div>
<div class="num"> 204 </div>
<div class="num"> 205 </div>
<div class="num"> 206 </div>
<div class="num"> 207 </div>
<div class="num"> 208 </div>
<div class="num"> 209 </div>
<div class="num"> 210 </div>
<div class="num"> 211 </div>
<div class="num"> 212 </div>
<div class="num"> 213 </div>
<div class="num"> 214 </div>
<div class="num"> 215 </div>
<div class="num"> 216 </div>
<div class="num"> 217 </div>
<div class="num"> 218 </div>
<div class="num"> 219 </div>
<div class="num"> 220 </div>
<div class="num"> 221 </div>
<div class="num"> 222 </div>
<div class="num"> 223 </div>
<div class="num"> 224 </div>
<div class="num"> 225 </div>
<div class="num"> 226 </div>
<div class="num"> 227 </div>
<div class="num"> 228 </div>
<div class="num"> 229 </div>
<div class="num"> 230 </div>
<div class="num"> 231 </div>
<div class="num"> 232 </div>
<div class="num"> 233 </div>
<div class="num"> 234 </div>
<div class="num"> 235 </div>
<div class="num"> 236 </div>
<div class="num"> 237 </div>
<div class="num"> 238 </div>
<div class="num"> 239 </div>
<div class="num"> 240 </div>
<div class="num"> 241 </div>
<div class="num"> 242 </div>
<div class="num"> 243 </div>
<div class="num"> 244 </div>
<div class="num"> 245 </div>
<div class="num"> 246 </div>
<div class="num"> 247 </div>
<div class="num"> 248 </div>
<div class="num"> 249 </div>
<div class="num"> 250 </div>
<div class="num"> 251 </div>
<div class="num"> 252 </div>
<div class="num"> 253 </div>
<div class="num"> 254 </div>
<div class="num"> 255 </div>
<div class="num"> 256 </div>
<div class="num"> 257 </div>
<div class="num"> 258 </div>
<div class="num"> 259 </div>
<div class="num"> 260 </div>
<div class="num"> 261 </div>
<div class="num"> 262 </div>
<div class="num"> 263 </div>
<div class="num"> 264 </div>
<div class="num"> 265 </div>
<div class="num"> 266 </div>
<div class="num"> 267 </div>
<div class="num"> 268 </div>
<div class="num"> 269 </div>
<div class="num"> 270 </div>
<div class="num"> 271 </div>
<div class="num"> 272 </div>
<div class="num"> 273 </div>
<div class="num"> 274 </div>
<div class="num"> 275 </div>
<div class="num"> 276 </div>
<div class="num"> 277 </div>
<div class="num"> 278 </div>
<div class="num"> 279 </div>
<div class="num"> 280 </div>
<div class="num"> 281 </div>
<div class="num"> 282 </div>
<div class="num"> 283 </div>
<div class="num"> 284 </div>
<div class="num"> 285 </div>
<div class="num"> 286 </div>
<div class="num"> 287 </div>
<div class="num"> 288 </div>
<div class="num"> 289 </div>
<div class="num"> 290 </div>
<div class="num"> 291 </div>
<div class="num"> 292 </div>
<div class="num"> 293 </div>
<div class="num"> 294 </div>
<div class="num"> 295 </div>
<div class="num"> 296 </div>
<div class="num"> 297 </div>
<div class="num"> 298 </div>
<div class="num"> 299 </div>
<div class="num"> 300 </div>
<div class="num"> 301 </div>
<div class="num"> 302 </div>
<div class="num"> 303 </div>
<div class="num"> 304 </div>
<div class="num"> 305 </div>
<div class="num"> 306 </div>
<div class="num"> 307 </div>
<div class="num"> 308 </div>
<div class="num"> 309 </div>
<div class="num"> 310 </div>
<div class="num"> 311 </div>
<div class="num"> 312 </div>
<div class="num"> 313 </div>
<div class="num"> 314 </div>
<div class="num"> 315 </div>
<div class="num"> 316 </div>
<div class="num"> 317 </div>
<div class="num"> 318 </div>
<div class="num"> 319 </div>
<div class="num"> 320 </div>
<div class="num"> 321 </div>
<div class="num"> 322 </div>
<div class="num"> 323 </div>
<div class="num"> 324 </div>
<div class="num"> 325 </div>
<div class="num"> 326 </div>
<div class="num"> 327 </div>
<div class="num"> 328 </div>
<div class="num"> 329 </div>
<div class="num"> 330 </div>
<div class="num"> 331 </div>
<div class="num"> 332 </div>
<div class="num"> 333 </div>
<div class="num"> 334 </div>
<div class="num"> 335 </div>
<div class="num"> 336 </div>
<div class="num"> 337 </div>
<div class="num"> 338 </div>
<div class="num"> 339 </div>
<div class="num"> 340 </div>
<div class="num"> 341 </div>
<div class="num"> 342 </div>
<div class="num"> 343 </div>
<div class="num"> 344 </div>
<div class="num"> 345 </div>
<div class="num"> 346 </div>
<div class="num"> 347 </div>
<div class="num"> 348 </div>
<div class="num"> 349 </div>
<div class="num"> 350 </div>
<div class="num"> 351 </div>
<div class="num"> 352 </div>
<div class="num"> 353 </div>
<div class="num"> 354 </div>
<div class="num"> 355 </div>
<div class="num"> 356 </div>
<div class="num"> 357 </div>
<div class="num"> 358 </div>
<div class="num"> 359 </div>
<div class="num"> 360 </div>
<div class="num"> 361 </div>
<div class="num"> 362 </div>
<div class="num"> 363 </div>
<div class="num"> 364 </div>
<div class="num"> 365 </div>
<div class="num"> 366 </div>
<div class="num"> 367 </div>
<div class="num"> 368 </div>
<div class="num"> 369 </div>
<div class="num"> 370 </div>
<div class="num"> 371 </div>
<div class="num"> 372 </div>
<div class="num"> 373 </div>
<div class="num"> 374 </div>
<div class="num"> 375 </div>
<div class="num"> 376 </div>
<div class="num"> 377 </div>
<div class="num"> 378 </div>
<div class="num"> 379 </div>
<div class="num"> 380 </div>
<div class="num"> 381 </div>
<div class="num"> 382 </div>
<div class="num"> 383 </div>
<div class="num"> 384 </div>
<div class="num"> 385 </div>
<div class="num"> 386 </div>
<div class="num"> 387 </div>
<div class="num"> 388 </div>
<div class="num"> 389 </div>
<div class="num"> 390 </div>
<div class="num"> 391 </div>
<div class="num"> 392 </div>
<div class="num"> 393 </div>
<div class="num"> 394 </div>
<div class="num"> 395 </div>
<div class="num"> 396 </div>
<div class="num"> 397 </div>
<div class="num"> 398 </div>
<div class="num"> 399 </div>
<div class="num"> 400 </div>
<div class="num"> 401 </div>
<div class="num"> 402 </div>
<div class="num"> 403 </div>
<div class="num"> 404 </div>
<div class="num"> 405 </div>
<div class="num"> 406 </div>
<div class="num"> 407 </div>
<div class="num"> 408 </div>
<div class="num"> 409 </div>
<div class="num"> 410 </div>
<div class="num"> 411 </div>
<div class="num"> 412 </div>
<div class="num"> 413 </div>
<div class="num"> 414 </div>
<div class="num"> 415 </div>
<div class="num"> 416 </div>
<div class="num"> 417 </div>
<div class="num"> 418 </div>
<div class="num"> 419 </div>
<div class="num"> 420 </div>
<div class="num"> 421 </div>
<div class="num"> 422 </div>
<div class="num"> 423 </div>
<div class="num"> 424 </div>
<div class="num"> 425 </div>
<div class="num"> 426 </div>
<div class="num"> 427 </div>
<div class="num"> 428 </div>
<div class="num"> 429 </div>
<div class="num"> 430 </div>
<div class="num"> 431 </div>
<div class="num"> 432 </div>
<div class="num"> 433 </div>
<div class="num"> 434 </div>
<div class="num"> 435 </div>
<div class="num"> 436 </div>
<div class="num"> 437 </div>
<div class="num"> 438 </div>
<div class="num"> 439 </div>
<div class="num"> 440 </div>
<div class="num"> 441 </div>
<div class="num"> 442 </div>
<div class="num"> 443 </div>
<div class="num"> 444 </div>
<div class="num"> 445 </div>
<div class="num"> 446 </div>
<div class="num"> 447 </div>
<div class="num"> 448 </div>
<div class="num"> 449 </div>
<div class="num"> 450 </div>
<div class="num"> 451 </div>
<div class="num"> 452 </div>
<div class="num"> 453 </div>
<div class="num"> 454 </div>
<div class="num"> 455 </div>
<div class="num"> 456 </div>
<div class="num"> 457 </div>
<div class="num"> 458 </div>
<div class="num"> 459 </div>
<div class="num"> 460 </div>
<div class="num"> 461 </div>
<div class="num"> 462 </div>
<div class="num"> 463 </div>
<div class="num"> 464 </div>
<div class="num"> 465 </div>
<div class="num"> 466 </div>
<div class="num"> 467 </div>
<div class="num"> 468 </div>
<div class="num"> 469 </div>
<div class="num"> 470 </div>
<div class="num"> 471 </div>
<div class="num"> 472 </div>
<div class="num"> 473 </div>
<div class="num"> 474 </div>
<div class="num"> 475 </div>
<div class="num"> 476 </div>
<div class="num"> 477 </div>
<div class="num"> 478 </div>
<div class="num"> 479 </div>
<div class="num"> 480 </div>
<div class="num"> 481 </div>
<div class="num"> 482 </div>
<div class="num"> 483 </div>
<div class="num"> 484 </div>
<div class="num"> 485 </div>
<div class="num"> 486 </div>
<div class="num"> 487 </div>
<div class="num"> 488 </div>
<div class="num"> 489 </div>
<div class="num"> 490 </div>
<div class="num"> 491 </div>
<div class="num"> 492 </div>
<div class="num"> 493 </div>
<div class="num"> 494 </div>
<div class="num"> 495 </div>
<div class="num"> 496 </div>
<div class="num"> 497 </div>
<div class="num"> 498 </div>
<div class="num"> 499 </div>
<div class="num"> 500 </div>
<div class="num"> 501 </div>
<div class="num"> 502 </div>
<div class="num"> 503 </div>
<div class="num"> 504 </div>
<div class="num"> 505 </div>
<div class="num"> 506 </div>
<div class="num"> 507 </div>
<div class="num"> 508 </div>
<div class="num"> 509 </div>
<div class="num"> 510 </div>
<div class="num"> 511 </div>
<div class="num"> 512 </div>
<div class="num"> 513 </div>
<div class="num"> 514 </div>
<div class="num"> 515 </div>
<div class="num"> 516 </div>
<div class="num"> 517 </div>
<div class="num"> 518 </div>
<div class="num"> 519 </div>
<div class="num"> 520 </div>
<div class="num"> 521 </div>
<div class="num"> 522 </div>
<div class="num"> 523 </div>
<div class="num"> 524 </div>
<div class="num"> 525 </div>
<div class="num"> 526 </div>
<div class="num"> 527 </div>
<div class="num"> 528 </div>
<div class="num"> 529 </div>
<div class="num"> 530 </div>
<div class="num"> 531 </div>
<div class="num"> 532 </div>
<div class="num"> 533 </div>
<div class="num"> 534 </div>
<div class="num"> 535 </div>
<div class="num"> 536 </div>
<div class="num"> 537 </div>
<div class="num"> 538 </div>
<div class="num"> 539 </div>
<div class="num"> 540 </div>
<div class="num"> 541 </div>
<div class="num"> 542 </div>
<div class="num"> 543 </div>
<div class="num"> 544 </div>
<div class="num"> 545 </div>
<div class="num"> 546 </div>
<div class="num"> 547 </div>
<div class="num"> 548 </div>
<div class="num"> 549 </div>
<div class="num"> 550 </div>
<div class="num"> 551 </div>
<div class="num"> 552 </div>
<div class="num"> 553 </div>
<div class="num"> 554 </div>
<div class="num"> 555 </div>
<div class="num"> 556 </div>
<div class="num"> 557 </div>
<div class="num"> 558 </div>
<div class="num"> 559 </div>
<div class="num"> 560 </div>
<div class="num"> 561 </div>
<div class="num"> 562 </div>
<div class="num"> 563 </div>
<div class="num"> 564 </div>
<div class="num"> 565 </div>
<div class="num"> 566 </div>
<div class="num"> 567 </div>
<div class="num"> 568 </div>
<div class="num"> 569 </div>
<div class="num"> 570 </div>
<div class="num"> 571 </div>
<div class="num"> 572 </div>
<div class="num"> 573 </div>
<div class="num"> 574 </div>
<div class="num"> 575 </div>
<div class="num"> 576 </div>
<div class="num"> 577 </div>
<div class="num"> 578 </div>
<div class="num"> 579 </div>
<div class="num"> 580 </div>
<div class="num"> 581 </div>
<div class="num"> 582 </div>
<div class="num"> 583 </div>
<div class="num"> 584 </div>
<div class="num"> 585 </div>
<div class="num"> 586 </div>
<div class="num"> 587 </div>
<div class="num"> 588 </div>
<div class="num"> 589 </div>
<div class="num"> 590 </div>
<div class="num"> 591 </div>
<div class="num"> 592 </div>
<div class="num"> 593 </div>
<div class="num"> 594 </div>
<div class="num"> 595 </div>
<div class="num"> 596 </div>
<div class="num"> 597 </div>
<div class="num"> 598 </div>
<div class="num"> 599 </div>
<div class="num"> 600 </div>
<div class="num"> 601 </div>
<div class="num"> 602 </div>
<div class="num"> 603 </div>
<div class="num"> 604 </div>
<div class="num"> 605 </div>
<div class="num"> 606 </div>
<div class="num"> 607 </div>
<div class="num"> 608 </div>
<div class="num"> 609 </div>
<div class="num"> 610 </div>
<div class="num"> 611 </div>
<div class="num"> 612 </div>
<div class="num"> 613 </div>
<div class="num"> 614 </div>
<div class="num"> 615 </div>
<div class="num"> 616 </div>
<div class="num"> 617 </div>
<div class="num"> 618 </div>
<div class="num"> 619 </div>
<div class="num"> 620 </div>
<div class="num"> 621 </div>
<div class="num"> 622 </div>
<div class="num"> 623 </div>
<div class="num"> 624 </div>
<div class="num"> 625 </div>
<div class="num"> 626 </div>
<div class="num"> 627 </div>
<div class="num"> 628 </div>
<div class="num"> 629 </div>
<div class="num"> 630 </div>
<div class="num"> 631 </div>
<div class="num"> 632 </div>
<div class="num"> 633 </div>
<div class="num"> 634 </div>
<div class="num"> 635 </div>
<div class="num"> 636 </div>
<div class="num"> 637 </div>
<div class="num"> 638 </div>
<div class="num"> 639 </div>
<div class="num"> 640 </div>
<div class="num"> 641 </div>
<div class="num"> 642 </div>
<div class="num"> 643 </div>
<div class="num"> 644 </div>
<div class="num"> 645 </div>
<div class="num"> 646 </div>
<div class="num"> 647 </div>
<div class="num"> 648 </div>
<div class="num"> 649 </div>
<div class="num"> 650 </div>
<div class="num"> 651 </div>
<div class="num"> 652 </div>
<div class="num"> 653 </div>
<div class="num"> 654 </div>
<div class="num"> 655 </div>
<div class="num"> 656 </div>
<div class="num"> 657 </div>
<div class="num"> 658 </div>
<div class="num"> 659 </div>
<div class="num"> 660 </div>
<div class="num"> 661 </div>
<div class="num"> 662 </div>
<div class="num"> 663 </div>
<div class="num"> 664 </div>
<div class="num"> 665 </div>
<div class="num"> 666 </div>
<div class="num"> 667 </div>
<div class="num"> 668 </div>
<div class="num"> 669 </div>
<div class="num"> 670 </div>
<div class="num"> 671 </div>
<div class="num"> 672 </div>
<div class="num"> 673 </div>
<div class="num"> 674 </div>
<div class="num"> 675 </div>
<div class="num"> 676 </div>
<div class="num"> 677 </div>
<div class="num"> 678 </div>
<div class="num"> 679 </div>
<div class="num"> 680 </div>
<div class="num"> 681 </div>
<div class="num"> 682 </div>
<div class="num"> 683 </div>
<div class="num"> 684 </div>
<div class="num"> 685 </div>
<div class="num"> 686 </div>
<div class="num"> 687 </div>
<div class="num"> 688 </div>
<div class="num"> 689 </div>
<div class="num"> 690 </div>
<div class="num"> 691 </div>
<div class="num"> 692 </div>
<div class="num"> 693 </div>
<div class="num"> 694 </div>
<div class="num"> 695 </div>
<div class="num"> 696 </div>
<div class="num"> 697 </div>
<div class="num"> 698 </div>
<div class="num"> 699 </div>
<div class="num"> 700 </div>
<div class="num"> 701 </div>
<div class="num"> 702 </div>
<div class="num"> 703 </div>
<div class="num"> 704 </div>
<div class="num"> 705 </div>
<div class="num"> 706 </div>
<div class="num"> 707 </div>
<div class="num"> 708 </div>
<div class="num"> 709 </div>
<div class="num"> 710 </div>
<div class="num"> 711 </div>
<div class="num"> 712 </div>
<div class="num"> 713 </div>
<div class="num"> 714 </div>
<div class="num"> 715 </div>
<div class="num"> 716 </div>
<div class="num"> 717 </div>
<div class="num"> 718 </div>
<div class="num"> 719 </div>
<div class="num"> 720 </div>
<div class="num"> 721 </div>
<div class="num"> 722 </div>
<div class="num"> 723 </div>
<div class="num"> 724 </div>
<div class="num"> 725 </div>
<div class="num"> 726 </div>
<div class="num"> 727 </div>
<div class="num"> 728 </div>
<div class="num"> 729 </div>
<div class="num"> 730 </div>
<div class="num"> 731 </div>
<div class="num"> 732 </div>
<div class="num"> 733 </div>
<div class="num"> 734 </div>
<div class="num"> 735 </div>
<div class="num"> 736 </div>
<div class="num"> 737 </div>
<div class="num"> 738 </div>
<div class="num"> 739 </div>
<div class="num"> 740 </div>
<div class="num"> 741 </div>
<div class="num"> 742 </div>
<div class="num"> 743 </div>
<div class="num"> 744 </div>
<div class="num"> 745 </div>
<div class="num"> 746 </div>
<div class="num"> 747 </div>
<div class="num"> 748 </div>
<div class="num"> 749 </div>
<div class="num"> 750 </div>
<div class="num"> 751 </div>
<div class="num"> 752 </div>
<div class="num"> 753 </div>
<div class="num"> 754 </div>
<div class="num"> 755 </div>
<div class="num"> 756 </div>
<div class="num"> 757 </div>
<div class="num"> 758 </div>
<div class="num"> 759 </div>
<div class="num"> 760 </div>
<div class="num"> 761 </div>
<div class="num"> 762 </div>
<div class="num"> 763 </div>
<div class="num"> 764 </div>
<div class="num"> 765 </div>
<div class="num"> 766 </div>
<div class="num"> 767 </div>
<div class="num"> 768 </div>
<div class="num"> 769 </div>
<div class="num"> 770 </div>
<div class="num"> 771 </div>
<div class="num"> 772 </div>
<div class="num"> 773 </div>
<div class="num"> 774 </div>
<div class="num"> 775 </div>
<div class="num"> 776 </div>
<div class="num"> 777 </div>
<div class="num"> 778 </div>
<div class="num"> 779 </div>
<div class="num"> 780 </div>
<div class="num"> 781 </div>
<div class="num"> 782 </div>
<div class="num"> 783 </div>
<div class="num"> 784 </div>
<div class="num"> 785 </div>
<div class="num"> 786 </div>
<div class="num"> 787 </div>
<div class="num"> 788 </div>
<div class="num"> 789 </div>
<div class="num"> 790 </div>
<div class="num"> 791 </div>
<div class="num"> 792 </div>
<div class="num"> 793 </div>
<div class="num"> 794 </div>
<div class="num"> 795 </div>
<div class="num"> 796 </div>
<div class="num"> 797 </div>
<div class="num"> 798 </div>
<div class="num"> 799 </div>
<div class="num"> 800 </div>
<div class="num"> 801 </div>
<div class="num"> 802 </div>
<div class="num"> 803 </div>
<div class="num"> 804 </div>
<div class="num"> 805 </div>
<div class="num"> 806 </div>
<div class="num"> 807 </div>
<div class="num"> 808 </div>
<div class="num"> 809 </div>
<div class="num"> 810 </div>
<div class="num"> 811 </div>
<div class="num"> 812 </div>
<div class="num"> 813 </div>
<div class="num"> 814 </div>
<div class="num"> 815 </div>
<div class="num"> 816 </div>
<div class="num"> 817 </div>
<div class="num"> 818 </div>
<div class="num"> 819 </div>
<div class="num"> 820 </div>
<div class="num"> 821 </div>
<div class="num"> 822 </div>
<div class="num"> 823 </div>
<div class="num"> 824 </div>
<div class="num"> 825 </div>
<div class="num"> 826 </div>
<div class="num"> 827 </div>
<div class="num"> 828 </div>
<div class="num"> 829 </div>
<div class="num"> 830 </div>
<div class="num"> 831 </div>
<div class="num"> 832 </div>
<div class="num"> 833 </div>
<div class="num"> 834 </div>
<div class="num"> 835 </div>
<div class="num"> 836 </div>
<div class="num"> 837 </div>
<div class="num"> 838 </div>
<div class="num"> 839 </div>
<div class="num"> 840 </div>
<div class="num"> 841 </div>
<div class="num"> 842 </div>
<div class="num"> 843 </div>
<div class="num"> 844 </div>
<div class="num"> 845 </div>
<div class="num"> 846 </div>
<div class="num"> 847 </div>
<div class="num"> 848 </div>
<div class="num"> 849 </div>
<div class="num"> 850 </div>
<div class="num"> 851 </div>
<div class="num"> 852 </div>
<div class="num"> 853 </div>
<div class="num"> 854 </div>
<div class="num"> 855 </div>
<div class="num"> 856 </div>
<div class="num"> 857 </div>
<div class="num"> 858 </div>
<div class="num"> 859 </div>
<div class="num"> 860 </div>
<div class="num"> 861 </div>
<div class="num"> 862 </div>
<div class="num"> 863 </div>
<div class="num"> 864 </div>
<div class="num"> 865 </div>
<div class="num"> 866 </div>
<div class="num"> 867 </div>
<div class="num"> 868 </div>
<div class="num"> 869 </div>
<div class="num"> 870 </div>
<div class="num"> 871 </div>
<div class="num"> 872 </div>
<div class="num"> 873 </div>
<div class="num"> 874 </div>
<div class="num"> 875 </div>
<div class="num"> 876 </div>
<div class="num"> 877 </div>
<div class="num"> 878 </div>
<div class="num"> 879 </div>
<div class="num"> 880 </div>
<div class="num"> 881 </div>
<div class="num"> 882 </div>
<div class="num"> 883 </div>
<div class="num"> 884 </div>
<div class="num"> 885 </div>
<div class="num"> 886 </div>
<div class="num"> 887 </div>
<div class="num"> 888 </div>
<div class="num"> 889 </div>
<div class="num"> 890 </div>
<div class="num"> 891 </div>
<div class="num"> 892 </div>
<div class="num"> 893 </div>
<div class="num"> 894 </div>
<div class="num"> 895 </div>
<div class="num"> 896 </div>
<div class="num"> 897 </div>
<div class="num"> 898 </div>
<div class="num"> 899 </div>
<div class="num"> 900 </div>
<div class="num"> 901 </div>
<div class="num"> 902 </div>
<div class="num"> 903 </div>
<div class="num"> 904 </div>
<div class="num"> 905 </div>
<div class="num"> 906 </div>
<div class="num"> 907 </div>
<div class="num"> 908 </div>
<div class="num"> 909 </div>
<div class="num"> 910 </div>
<div class="num"> 911 </div>
<div class="num"> 912 </div>
<div class="num"> 913 </div>
<div class="num"> 914 </div>
<div class="num"> 915 </div>
<div class="num"> 916 </div>
<div class="num"> 917 </div>
<div class="num"> 918 </div>
<div class="num"> 919 </div>
<div class="num"> 920 </div>
<div class="num"> 921 </div>
<div class="num"> 922 </div>
<div class="num"> 923 </div>
<div class="num"> 924 </div>
<div class="num"> 925 </div>
<div class="num"> 926 </div>
<div class="num"> 927 </div>
<div class="num"> 928 </div>
<div class="num"> 929 </div>
<div class="num"> 930 </div>
<div class="num"> 931 </div>
<div class="num"> 932 </div>
<div class="num"> 933 </div>
<div class="num"> 934 </div>
<div class="num"> 935 </div>
<div class="num"> 936 </div>
<div class="num"> 937 </div>
<div class="num"> 938 </div>
<div class="num"> 939 </div>
<div class="num"> 940 </div>
<div class="num"> 941 </div>
<div class="num"> 942 </div>
<div class="num"> 943 </div>
<div class="num"> 944 </div>
<div class="num"> 945 </div>
<div class="num"> 946 </div>
<div class="num"> 947 </div>
<div class="num"> 948 </div>
<div class="num"> 949 </div>
<div class="num"> 950 </div>
<div class="num"> 951 </div>
<div class="num"> 952 </div>
<div class="num"> 953 </div>
<div class="num"> 954 </div>
<div class="num"> 955 </div>
<div class="num"> 956 </div>
<div class="num"> 957 </div>
<div class="num"> 958 </div>
<div class="num"> 959 </div>
<div class="num"> 960 </div>
<div class="num"> 961 </div>
<div class="num"> 962 </div>
<div class="num"> 963 </div>
<div class="num"> 964 </div>
<div class="num"> 965 </div>
<div class="num"> 966 </div>
<div class="num"> 967 </div>
<div class="num"> 968 </div>
<div class="num"> 969 </div>
<div class="num"> 970 </div>
<div class="num"> 971 </div>
<div class="num"> 972 </div>
<div class="num"> 973 </div>
<div class="num"> 974 </div>
<div class="num"> 975 </div>
<div class="num"> 976 </div>
<div class="num"> 977 </div>
<div class="num"> 978 </div>
<div class="num"> 979 </div>
<div class="num"> 980 </div>
<div class="num"> 981 </div>
<div class="num"> 982 </div>
<div class="num"> 983 </div>
<div class="num"> 984 </div>
<div class="num"> 985 </div>
<div class="num"> 986 </div>
<div class="num"> 987 </div>
<div class="num"> 988 </div>
<div class="num"> 989 </div>
<div class="num"> 990 </div>
<div class="num"> 991 </div>
<div class="num"> 992 </div>
<div class="num"> 993 </div>
<div class="num"> 994 </div>
<div class="num"> 995 </div>
<div class="num"> 996 </div>
<div class="num"> 997 </div>
<div class="num"> 998 </div>
<div class="num"> 999 </div>
<div class="num">1000 </div>
<div class="num">1001 </div>
<div class="num">1002 </div>
<div class="num">1003 </div>
<div class="num">1004 </div>
<div class="num">1005 </div>
<div class="num">1006 </div>
<div class="num">1007 </div>
<div class="num">1008 </div>
<div class="num">1009 </div>
<div class="num">1010 </div>
<div class="num">1011 </div>
<div class="num">1012 </div>
<div class="num">1013 </div>
<div class="num">1014 </div>
<div class="num">1015 </div>
<div class="num">1016 </div>
<div class="num">1017 </div>
<div class="num">1018 </div>
<div class="num">1019 </div>
<div class="num">1020 </div>
<div class="num">1021 </div>
<div class="num">1022 </div>
<div class="num">1023 </div>
<div class="num">1024 </div>
<div class="num">1025 </div>
<div class="num">1026 </div>
<div class="num">1027 </div>
<div class="num">1028 </div>
<div class="num">1029 </div>
<div class="num">1030 </div>
<div class="num">1031 </div>
<div class="num">1032 </div>
<div class="num">1033 </div>
<div class="num">1034 </div>
<div class="num">1035 </div>
<div class="num">1036 </div>
<div class="num">1037 </div>
<div class="num">1038 </div>
<div class="num">1039 </div>
<div class="num">1040 </div>
<div class="num">1041 </div>
<div class="num">1042 </div>
<div class="num">1043 </div>
<div class="num">1044 </div>
<div class="num">1045 </div>
<div class="num">1046 </div>
<div class="num">1047 </div>
<div class="num">1048 </div>
<div class="num">1049 </div>
<div class="num">1050 </div>
<div class="num">1051 </div>
<div class="num">1052 </div>
<div class="num">1053 </div>
<div class="num">1054 </div>
<div class="num">1055 </div>
<div class="num">1056 </div>
<div class="num">1057 </div>
<div class="num">1058 </div>
<div class="num">1059 </div>
<div class="num">1060 </div>
<div class="num">1061 </div>
<div class="num">1062 </div>
<div class="num">1063 </div>
<div class="num">1064 </div>
<div class="num">1065 </div>
<div class="num">1066 </div>
<div class="num">1067 </div>
<div class="num">1068 </div>
<div class="num">1069 </div>
<div class="num">1070 </div>
<div class="num">1071 </div>
<div class="num">1072 </div>
<div class="num">1073 </div>
<div class="num">1074 </div>
<div class="num">1075 </div>
<div class="num">1076 </div>
<div class="num">1077 </div>
<div class="num">1078 </div>
<div class="num">1079 </div>
<div class="num">1080 </div>
<div class="num">1081 </div>
<div class="num">1082 </div>
<div class="num">1083 </div>
<div class="num">1084 </div>
<div class="num">1085 </div>
<div class="num">1086 </div>
<div class="num">1087 </div>
<div class="num">1088 </div>
<div class="num">1089 </div>
<div class="num">1090 </div>
<div class="num">1091 </div>
<div class="num">1092 </div>
<div class="num">1093 </div>
<div class="num">1094 </div>
<div class="num">1095 </div>
<div class="num">1096 </div>
<div class="num">1097 </div>
<div class="num">1098 </div>
<div class="num">1099 </div>
<div class="num">1100 </div>
<div class="num">1101 </div>
<div class="num">1102 </div>
<div class="num">1103 </div>
<div class="num">1104 </div>
<div class="num">1105 </div>
<div class="num">1106 </div>
<div class="num">1107 </div>
<div class="num">1108 </div>
<div class="num">1109 </div>
<div class="num">1110 </div>
<div class="num">1111 </div>
<div class="num">1112 </div>
<div class="num">1113 </div>
<div class="num">1114 </div>
<div class="num">1115 </div>
<div class="num">1116 </div>
<div class="num">1117 </div>
<div class="num">1118 </div>
<div class="num">1119 </div>
<div class="num">1120 </div>
<div class="num">1121 </div>
<div class="num">1122 </div>
<div class="num">1123 </div>
<div class="num">1124 </div>
<div class="num">1125 </div>
<div class="num">1126 </div>
<div class="num">1127 </div>
<div class="num">1128 </div>
<div class="num">1129 </div>
<div class="num">1130 </div>
<div class="num">1131 </div>
<div class="num">1132 </div>
<div class="num">1133 </div>
<div class="num">1134 </div>
<div class="num">1135 </div>
<div class="num">1136 </div>
<div class="num">1137 </div>
<div class="num">1138 </div>
<div class="num">1139 </div>
<div class="num">1140 </div>
<div class="num">1141 </div>
<div class="num">1142 </div>
<div class="num">1143 </div>
<div class="num">1144 </div>
<div class="num">1145 </div>
<div class="num">1146 </div>
<div class="num">1147 </div>
<div class="num">1148 </div>
<div class="num">1149 </div>
<div class="num">1150 </div>
<div class="num">1151 </div>
<div class="num">1152 </div>
<div class="num">1153 </div>
<div class="num">1154 </div>
<div class="num">1155 </div>
<div class="num">1156 </div>
<div class="num">1157 </div>
<div class="num">1158 </div>
<div class="num">1159 </div>
<div class="num">1160 </div>
<div class="num">1161 </div>
<div class="num">1162 </div>
<div class="num">1163 </div>
<div class="num">1164 </div>
<div class="num">1165 </div>
<div class="num">1166 </div>
<div class="num">1167 </div>
<div class="num">1168 </div>
<div class="num">1169 </div>
<div class="num">1170 </div>
<div class="num">1171 </div>
<div class="num">1172 </div>
<div class="num">1173 </div>
<div class="num">1174 </div>
<div class="num">1175 </div>
<div class="num">1176 </div>
<div class="num">1177 </div>
<div class="num">1178 </div>
<div class="num">1179 </div>
<div class="num">1180 </div>
<div class="num">1181 </div>
<div class="num">1182 </div>
<div class="num">1183 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt; ##################################</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// NOTICE :</span></div>
<div class="l li"><span class="s2-89">/// This script is the Mother of all script~!</span></div>
<div class="l li"><span class="s2-89">/// Everything that happens during the game will be controlled in this script.</span></div>
<div class="l li"><span class="s2-89">/// (with public references from support scripts too ofcourse.)</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// DO NOT TOUCH UNLESS REQUIRED</span></div>
<div class="l li"><span class="s2-89">/// </span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt; ##################################</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">// ---</span></div>
<div class="l li"><span class="s2-89">// global access board checking enums</span></div>
<div class="l li"><span class="s2-89">// ---</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> JSFGravity{ UP, DOWN, LEFT, RIGHT};</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> JSFBoardType{ Square, Hexagon};</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> JSFsquareMode{ CrossType, Box9x9Type};</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> JSFNewPieceMethod{ Appear, FallByGravity};</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">enum</span><span class="si"> JSFGameState{GamePending,GameActive,GameFinalizing,GameOver};</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">[RequireComponent(</span><span class="s2-90">typeof</span><span class="si">(JSFDefaultAnimations), </span><span class="s2-90">typeof</span><span class="si">(JSFBoardLayout), </span><span class="s2-90">typeof</span><span class="si">(JSFWinningConditions))]</span></div>
<div class="l li"><span class="si">[RequireComponent(</span><span class="s2-90">typeof</span><span class="si">(JSFVisualManager), </span><span class="s2-90">typeof</span><span class="si">(JSFAudioPlayer), </span><span class="s2-90">typeof</span><span class="si">(JSFVisualizedGrid) )]</span></div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> JSFGameManager : MonoBehaviour {</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// GLOBAL VARIABLES</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The type of board you want to use for this game.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> JSFBoardType boardType = JSFBoardType.Square;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The Square swipe mode, cross-type limits the diagonal neighbours of a board box.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> JSFsquareMode squareSwipeMode = JSFsquareMode.Box9x9Type;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The Square splash mode, cross-type limits the diagonal neighbours of a board box.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> JSFsquareMode squareSplashMode = JSFsquareMode.Box9x9Type;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;If you have the original 'PoolManager' asset, and want to use the integrated pooling feature.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> usingPoolManager = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The current board's Width in boxes&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,20)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> boardWidth=4;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The current board's Height in boxes&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,20)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> boardHeight=4;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The current board's display size (visible in the Scene View if 'Show Grid' is enabled)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> size = 4; </span><span class="s2-89">// the size we want the board to be</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of spacing between each board box. (Does not affect board size)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(0.0f,100.0f)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> spacingPercentage = 0f; </span><span class="s2-89">// the percentage of spacing user wants</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of padding you want for the pieces inside the board box&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(0.0f,100.0f)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> paddingPercentage = 20f; </span><span class="s2-89">// the percentage of padding user wants</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> boxPadding = 0; </span><span class="s2-89">// the padding in each box **updated during &quot;Awake()&quot;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Visualize Grid : shows Corners of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showCorners = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Visualize Grid : shows the Grids of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showGrid = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Visualize Grid : shows the padded Tiles for the pieces of the board in the scene view.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showPaddedTile = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Visualize Grid : shows the extra information relating to the board grid in the scene view&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showToolTips = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The number of active colors in the game. (For non-special pieces)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,9)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> NumOfActiveType = 3; </span><span class="s2-89">// remember not to exceed the normalPieces array~!</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;if Enabled, Players can only swipe when the board has settled during the last move.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> moveOnlyAfterSettle = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// must the player wait for board to settle before next move?</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">//  public bool movingResetsCombo = true; // TODO moving rest combo currently not used in JSF</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// control timer</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The update speed for the Game Engine (the routine checks of Gravity &amp; possible moves)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> gameUpdateSpeed = 0.2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of delay before the board initiates a board reset when no more moves are available.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> noMoreMoveResetTime = 2f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of delay before the board shows the player a legal suggested move.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> suggestionTimer = 5f;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// swipe stuff</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The current minimum swipe length the player must meet for the swipe to be accepted.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    [Range(1,10)] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> minSwipeMatch = 3;</span><span class="s2-89">// swipe chain length</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Shows the swipe indicator when swiping over selected pieces. &quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">        </span><span class="s2-85">&quot;(refer to the VisualManager script to set the Swipe Indicator object)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showSwipedIndicator = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Shows the swipe line between two pieces when swiping over selected pieces. &quot;</span><span class="si"> +</span></div>
<div class="l li"><span class="si">             </span><span class="s2-85">&quot;(refer to the VisualManager script to set the Swipe Line object)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> showSwipeLine = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;How the new pieces will be created after being destroyed.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> JSFNewPieceMethod newPieceMode = JSFNewPieceMethod.Appear;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// appear type...</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The delay before the new pieces start appearing in 'Appear Mode'&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> appearModeDelay = 0.6f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;How fast the new piece will appear in 'Appear Mode' after the delay.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> appearModeSpeed = 0.8f;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// gravity type...</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;How fast the pieces will drop to the next board box.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> gravityDropSpeed = 0.25f;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Give an extra effect when pieces reach the bottom of the box (hardcoded effect)&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> pieceDropExtraEffect = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;Makes the pieces drop faster the longer the distance to the bottom.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> acceleratedVelocity = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// drop pieces fall faster if it need to cover more distance</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;if Enabled, the pieces will be delayed (by the specified amount) before any gravity call&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> delayedGravity = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// delay before a piece drops when there's an empty space</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The amount of delay before gravity takes affect for each individual piece.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">float</span><span class="si"> gravityDelayTime = 0.3f; </span><span class="s2-89">// the delay in float seconds</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The current gravity direction for the board.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> JSFGravity currentGravity = JSFGravity.DOWN; </span><span class="s2-89">// initial gravity of the game</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// control variables for gravity</span></div>
<div class="l li"><span class="si">    Vector3 gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">    JSFBoardDirection[] bd = </span><span class="s2-90">null</span><span class="si">; </span><span class="s2-89">// the direction array for landslide</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// pieces &amp; panels prefabs</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The reference for the PieceManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject pieceManager;</span></div>
<div class="l li"><span class="si">    [Tooltip(</span><span class="s2-85">&quot;The reference for the PanelManager Object.&quot;</span><span class="si">)]</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> GameObject panelManager;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> JSFPieceDefinition[] pieceTypes;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> JSFPanelDefinition[] panelTypes;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> JSFBoard[,] board; </span><span class="s2-89">// the board array</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// scoring stuff</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">long</span><span class="si"> score = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> currentCombo = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> maxCombo = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> JSFComboPopUp comboScript;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> moves = 0;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] matchCount = </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[9];</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// suggestion variables</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> checkedPossibleMove = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isCheckingPossibleMoves = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">bool</span><span class="si"> hasPowerMerge = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    Vector3 pieceOriginalSize;</span></div>
<div class="l li"><span class="si">    List&lt;GameObject&gt; suggestedPieces = </span><span class="s2-90">new</span><span class="si"> List&lt;GameObject&gt;();</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">//TODO canMove variable currently not being used... but it has been integrated into the engine</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> canMove = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// switch to determine if player can make the next move</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// other helper scripts</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> JSFAudioPlayer audioScript;</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> JSFDefaultAnimations animScript;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// environment control variable</span></div>
<div class="l li"><span class="si">    [HideInInspector] </span><span class="s2-90">public</span><span class="si"> JSFGameState gameState = JSFGameState.GameActive;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Easy Access Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Easy Access FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// an easy access function to call the board from an int-array</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> JSFBoard iBoard(</span><span class="s2-90">int</span><span class="si">[] arrayRef){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> board[arrayRef[0],arrayRef[1]];</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector3 getBoardPosition(</span><span class="s2-90">int</span><span class="si">[] boardPosition){ </span><span class="s2-89">// OVERLOAD METHOD for int array</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> board[boardPosition[0],boardPosition[1]].position;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector3 getBoardPosition(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){ </span><span class="s2-89">// OVERLOAD METHOD for int x &amp; y</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> board[x,y].position;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Easy Access Functions</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ================================================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ENGINE FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ================================================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Misc Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Misc. functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// start game preparation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> initializeGame() {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        boxPadding = 1f-(paddingPercentage/100); </span><span class="s2-89">// set the padding value</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        pieceTypes = pieceManager.GetComponents&lt;JSFPieceDefinition&gt;();</span></div>
<div class="l li"><span class="si">        panelTypes = panelManager.GetComponents&lt;JSFPanelDefinition&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// support sub-scripts initialization</span></div>
<div class="l li"><span class="si">        audioScript = GetComponent&lt;JSFAudioPlayer&gt;();</span></div>
<div class="l li"><span class="si">        animScript = GetComponent&lt;JSFDefaultAnimations&gt;();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// creates a 2D board</span></div>
<div class="l li"><span class="si">        board = </span><span class="s2-90">new</span><span class="si"> JSFBoard[boardWidth,boardHeight];</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// loop to create the board with blocks</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s2-89">/// For square type</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// for the board height size</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                    Vector3 pos = </span><span class="s2-90">new</span><span class="si"> Vector3( x - (boardWidth/2.0f) + 0.5f, y -(boardHeight/2.0f) + 0.5f, 0);</span></div>
<div class="l li"><span class="si">                    board[x,y] = </span><span class="s2-90">new</span><span class="si"> JSFBoard(</span><span class="s2-90">this</span><span class="si">, </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[2]{x,y}, pos*size ) ;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">//place a cube here to start with...</span></div>
<div class="l li"><span class="si">                    board[x,y].createObject(pieceTypes[0], ranType());</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Hexagon : </span><span class="s2-89">/// For hexagon type</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// for the board height size</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                    Vector3 pos;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(x%2 == 0){ </span><span class="s2-89">// displacement for hexagon type</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                        pos = </span><span class="s2-90">new</span><span class="si"> Vector3( (x - (boardWidth/2.0f) + 0.5f)*0.865f, y -(boardHeight/2.0f) + 0.75f, 0);</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-89">// create board centralized to the game object in unity</span></div>
<div class="l li"><span class="si">                        pos = </span><span class="s2-90">new</span><span class="si"> Vector3( (x - (boardWidth/2.0f) + 0.5f)*0.865f, y -(boardHeight/2.0f) + 0.25f, 0);</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    board[x,y] = </span><span class="s2-90">new</span><span class="si"> JSFBoard(</span><span class="s2-90">this</span><span class="si">, </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[2]{x,y}, pos*size ) ;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-89">//place a cube here to start with...</span></div>
<div class="l li"><span class="si">                    board[x,y].createObject(pieceTypes[0], ranType());</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.initNeighbourReferences();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> preGameSetup(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// call the board panels preGameSetup...</span></div>
<div class="l li"><span class="si">        GetComponent&lt;JSFBoardLayout&gt;().setupGamePanels();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// call the board piece preGameSetup...</span></div>
<div class="l li"><span class="si">        GetComponent&lt;JSFBoardLayout&gt;().setupGamePieces();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the gravity check as a function call - to keep the updater() neat</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> gravityCheck(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth ; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                dropPieces(x,y);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// primarily for the suggestion functions... </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// but you can do other stuff when the board change as you like...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> notifyBoardHasChanged(){</span></div>
<div class="l li"><span class="si">        checkedPossibleMove = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// board has changed, will check possible moves again</span></div>
<div class="l li"><span class="si">        StopCoroutine(</span><span class="s2-85">&quot;suggestPiece&quot;</span><span class="si">); </span><span class="s2-89">// if it was still pending, stop the routine from executing...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// increase the combo counter &amp; display to GUI(dont worry, combo is reset elsewhere)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> increaseCombo() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// increase combo count!</span></div>
<div class="l li"><span class="si">        currentCombo += 1;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        JSFRelay.onCombo();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// relay to the combo script</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(comboScript != </span><span class="s2-90">null</span><span class="si">){ </span><span class="s2-89">// show combo to GUI (relay to GUI script)</span></div>
<div class="l li"><span class="si">            comboScript.executeCombo(currentCombo);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(maxCombo &lt; currentCombo){</span></div>
<div class="l li"><span class="si">            maxCombo = currentCombo; </span><span class="s2-89">// just to keep track of the max combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD FUNCTION for increaseScore</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> increaseScore(</span><span class="s2-90">int</span><span class="si"> num, </span><span class="s2-90">int</span><span class="si">[] arrayRef) {</span></div>
<div class="l li"><span class="si">        increaseScore(num,arrayRef[0],arrayRef[1]);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// increase the score counter (for external scripts to update)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> increaseScore(</span><span class="s2-90">int</span><span class="si"> num, </span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        num = JSFRelay.onScoreIssue(num,x,y); </span><span class="s2-89">// relay call for modified score</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(currentCombo &gt; 0){</span></div>
<div class="l li"><span class="si">            num = (</span><span class="s2-90">int</span><span class="si">) (num * (1.5+(currentCombo/10.0)) ); </span><span class="s2-89">// increase with multiplier from combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(JSFUtils.vm.displayScoreHUD &amp;&amp; board[x,y].scoreHUD != </span><span class="s2-90">null</span><span class="si">){ </span><span class="s2-89">// display the HUD?</span></div>
<div class="l li"><span class="si">            board[x,y].scoreHUD.display(num);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        score += num; </span><span class="s2-89">// add to the game score</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTime(</span><span class="s2-90">int</span><span class="si">[] arrayRef, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTime(iBoard(arrayRef),delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTime(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y,</span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTime(board[x,y],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTime</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTime(JSFBoard _board,</span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeRoutine(_board,delay,mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// destroys the box after a given time so that it looks cooler</span></div>
<div class="l li"><span class="si">    IEnumerator destroyInTimeRoutine(JSFBoard _board,</span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( _board.isFilled &amp;&amp; _board.piece.markedForDestroy ){ </span><span class="s2-89">// ignore those marked for destroy</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not continue... it is already marked</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(delay); </span><span class="s2-89">// wait for it...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(_board.isFilled &amp;&amp; !_board.piece.markedForDestroy &amp;&amp; _board.piece.pd.isDestructible){</span></div>
<div class="l li"><span class="si">            increaseScore( mScore, _board.arrayRef ); </span><span class="s2-89">// add to the score</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        _board.destroyBox();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!_board.panel.isDestructible()){ </span><span class="s2-89">// if the panel is NOT a solid type with no piece to destroy...</span></div>
<div class="l li"><span class="si">            _board.panelHit(); </span><span class="s2-89">// got hit by power attack~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTimeMarked(</span><span class="s2-90">int</span><span class="si">[] arrayRef, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(arrayRef[0],arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTimeMarked(JSFBoard _board, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        destroyInTimeMarked(_board.arrayRef[0],_board.arrayRef[1],delay,mScore);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOAD METHOD for destroyInTimeMarked</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> destroyInTimeMarked(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        StartCoroutine( destroyInTimeMarkedRoutine(x, y, delay, mScore) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// destroys the box after a given time so that it looks cooler - object being marked for delayed destruction</span></div>
<div class="l li"><span class="si">    IEnumerator destroyInTimeMarkedRoutine(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">float</span><span class="si"> delay, </span><span class="s2-90">int</span><span class="si"> mScore){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            board[x,y].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// save the piece reference</span></div>
<div class="l li"><span class="si">        JSFGamePiece refPiece = board[x,y].piece;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(refPiece.markedForDestroy){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not continue as it is already marked...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// mark the piece as to be destroyed later</span></div>
<div class="l li"><span class="si">        refPiece.markedForDestroy = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        refPiece.thisPiece.GetComponent&lt;JSFPieceTracker&gt;().enabled = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// no longer movable</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(delay); </span><span class="s2-89">// wait for it...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(refPiece.master.isFilled){</span></div>
<div class="l li"><span class="si">            increaseScore( mScore, refPiece.master.arrayRef[0], refPiece.master.arrayRef[1] ); </span><span class="s2-89">// add to the score</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        refPiece.master.destroyMarked();</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!refPiece.master.panel.isDestructible()){ </span><span class="s2-89">// if the panel is a solid type with no piece to destroy...</span></div>
<div class="l li"><span class="si">            refPiece.master.panelHit(); </span><span class="s2-89">// got hit by power attack~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function call for the ieNumerator version</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> lockJustCreated (</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">float</span><span class="si"> time){</span></div>
<div class="l li"><span class="si">        StartCoroutine( lockJustCreatedRoutine(x,y,time) );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to lock a piece from being destroyed with a cooldown timer</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> IEnumerator lockJustCreatedRoutine (</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">float</span><span class="si"> time){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// lock the piece so that it isnt destroyed so fast</span></div>
<div class="l li"><span class="si">        JSFGamePiece refPiece = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            refPiece = board[x,y].piece;</span></div>
<div class="l li"><span class="si">            refPiece.justCreated = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            refPiece.master.isActive = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(time); </span><span class="s2-89">// wait for it...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// un-lock the piece again</span></div>
<div class="l li"><span class="si">            refPiece.justCreated = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            refPiece.master.isActive = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Misc Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Routine Checks Related</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ##################################################</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Routine checks and it's related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ##################################################</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// status update on given intervals</span></div>
<div class="l li"><span class="si">    IEnumerator updater () {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si"> (gameState != JSFGameState.GameOver){  </span><span class="s2-89">// loop again (infinite) until game over</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(JSFSwipeManager.isSwiping &amp;&amp; !Input.GetMouseButton(0)){</span></div>
<div class="l li"><span class="si">                JSFSwipeManager.validateSwipe(); </span><span class="s2-89">// validate current swipes (if any)</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            gravityCheck(); </span><span class="s2-89">// for dropping pieces into empty board box</span></div>
<div class="l li"><span class="si">            detectPossibleMoves(); </span><span class="s2-89">// to make sure the game doesn't get stuck with no more possible moves</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(gameUpdateSpeed); </span><span class="s2-89">// wait for the given intervals</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// possible moves detector + suggestor  ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// detects any possibles moves, find suggestions or resets the board is necessary</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> detectPossibleMoves() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//checks through each board boxes</span></div>
<div class="l lc d1"><span class="sc">        if(!checkedPossibleMove &amp;&amp; !isCheckingPossibleMoves </span><span class="sa">&amp;&amp; !JSFSwipeManager.isSwiping</span><span class="sc">){</span></div>
<div class="l li"><span class="si">            isCheckingPossibleMoves = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth ; x++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">( board[x,y].isBeingDelayed || board[x,y].isFalling ) {</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-89">// &quot;board.isActive&quot; is no longer used atm *to be evaluated of its use*</span></div>
<div class="l li"><span class="si">                        isCheckingPossibleMoves = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// do not continue, wait for board to clear and stabilize</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            checkedPossibleMove = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// once we checked, no need to check again until needed</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            JSFRelay.onBoardStabilize();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-89">// to hold all the pieces for the suggested move</span></div>
<div class="l li"><span class="si">            List&lt;JSFBoard&gt; suggestedBoards = findSuggestionMove();</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si"> (suggestedBoards.Count == 0) { </span><span class="s2-89">// no more possible moves</span></div>
<div class="l li"><span class="si">                StartCoroutine( resetBoard() ); </span><span class="s2-89">// reset board in co-routine mode for delayed event</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// suggest the found possible move to player</span></div>
<div class="l li"><span class="si">                suggestedPieces.Clear(); </span><span class="s2-89">// clear the current list</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s2-90">in</span><span class="si"> suggestedBoards){</span></div>
<div class="l li"><span class="si">                    suggestedPieces.Add(_board.piece.thisPiece); </span><span class="s2-89">// add the new chain to the list</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                suggestedBoards.Clear(); </span><span class="s2-89">// remove stored memory</span></div>
<div class="l li"><span class="si">                pieceOriginalSize = suggestedPieces[0].transform.localScale; </span><span class="s2-89">// remember the current size</span></div>
<div class="l li"><span class="si">                StartCoroutine(</span><span class="s2-85">&quot;suggestPiece&quot;</span><span class="si">); </span><span class="s2-89">// its a string coroutine so that we can use StopCoroutine!</span></div>
<div class="l li"><span class="si">                isCheckingPossibleMoves = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to find a valid chain of suggestion boards</span></div>
<div class="l li"><span class="si">    List&lt;JSFBoard&gt; findSuggestionMove(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// remember current swipe status before using swipeManager for checks...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">bool</span><span class="si"> limitedSwipe = JSFSwipeManager.limitedSwipe;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">bool</span><span class="si"> rainbowSwipe = JSFSwipeManager.rainbowSwipe;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> swipeColor = JSFSwipeManager.swipeColor;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; randomised = </span><span class="s2-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s2-89">// to select a random board for suggestion check</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; list = </span><span class="s2-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s2-89">// the list of boards in the suggestion found</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            list.Add(_board); </span><span class="s2-89">// add to the list of all available boards</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> randomNum = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">while</span><span class="si">(list.Count &gt; 0){ </span><span class="s2-89">// transfer all the boards to the randomise list</span></div>
<div class="l li"><span class="si">            randomNum = Random.Range(0,list.Count);</span></div>
<div class="l li"><span class="si">            randomised.Add(list[randomNum]); </span><span class="s2-89">// add to the random list</span></div>
<div class="l li"><span class="si">            list.RemoveAt(randomNum); </span><span class="s2-89">// remove from this list</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-89">// at the end will have a randomised list</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s2-90">in</span><span class="si"> randomised){</span></div>
<div class="l li"><span class="si">            hasPowerMerge = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset status for powerMerge</span></div>
<div class="l li"><span class="si">            JSFSwipeManager.limitedSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset status for limitedSwipe</span></div>
<div class="l li"><span class="si">            list.Clear(); </span><span class="s2-89">// clear it each time before checking</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!_board.isFilled || !isLegalSwipe(_board)){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">continue</span><span class="si">; </span><span class="s2-89">// cannot proceed... move on to the next board...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( _board.pd.useAsFirstSwipe(_board.piece,</span><span class="s2-90">true</span><span class="si">) ) { </span><span class="s2-89">// simulate a swipe start</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">                list.Add(_board);</span></div>
<div class="l li"><span class="si">                JSFSwipeManager.rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// uses up the rainbow swipe each time...</span></div>
<div class="l lc d2"><span class="sc">                </span><span class="sc2">JSFRelay</span><span class="sc">.onSwipeAdded(_board.piece,true); // simulate a swipe added...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                list = recursiveFindSuggestion(list,_board);</span></div>
<div class="l lg"> </div>
<div class="l la d3"><span class="sa">                list.Reverse(); // reverses the list for swipeRemove function</span></div>
<div class="l la d3"><span class="sa">                foreach(JSFBoard bt in list){</span></div>
<div class="l la d3"><span class="sa">                    JSFRelay.onSwipeRemoved(bt.piece,true); // simulate a removed piece</span></div>
<div class="l la d3"><span class="sa">                }</span></div>
<div class="l lg"> </div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(list.Count &gt;= minSwipeMatch || hasPowerMerge){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// found a valid suggestion list</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            list.Clear(); </span><span class="s2-89">// clear it each time after checking</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">//reset the old status of the swipe...</span></div>
<div class="l li"><span class="si">        JSFSwipeManager.limitedSwipe = limitedSwipe;</span></div>
<div class="l li"><span class="si">        JSFSwipeManager.rainbowSwipe = rainbowSwipe;</span></div>
<div class="l li"><span class="si">        JSFSwipeManager.swipeColor = swipeColor;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> list; </span><span class="s2-89">// returns the list (be it empty OR with suggestions)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to recursively add valid boards to the suggestion chain</span></div>
<div class="l li"><span class="si">    List&lt;JSFBoard&gt; recursiveFindSuggestion(List&lt;JSFBoard&gt; list,JSFBoard _board){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(list.Count &gt;= minSwipeMatch || hasPowerMerge){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> list; </span><span class="s2-89">// already found a suggested list... go back!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; temp = </span><span class="s2-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s2-89">// a temp list being chained...</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; candidates = </span><span class="s2-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s2-89">// list of all the candidate boards</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> w = _board.pd.minSwipeDistance(_board.piece); </span></div>
<div class="l li"><span class="si">            w &lt;= _board.pd.maxSwipeDistance(_board.piece); w++){ </span><span class="s2-89">// within min/max range</span></div>
<div class="l li"><span class="si">            candidates.AddRange( getBoardsFromDistance(_board,w) ); </span><span class="s2-89">// adds the boards as candidates</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(JSFBoard neighbour </span><span class="s2-90">in</span><span class="si"> candidates){</span></div>
<div class="l li"><span class="si">            temp.Clear(); </span><span class="s2-89">// reset the temp list</span></div>
<div class="l li"><span class="si">            temp.AddRange(list); </span><span class="s2-89">// shallow copy to a new temp list</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!temp.Contains(neighbour)){ </span><span class="s2-89">// not part of the current simulated swipe chain</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!neighbour.isFilled || !isLegalSwipe(neighbour)){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">continue</span><span class="si">; </span><span class="s2-89">// no piece here / not legal swipe ... move on to the next board...</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// check for powerMerge...</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(JSFBoard tempBoard </span><span class="s2-90">in</span><span class="si"> temp){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(tempBoard.pd.powerMerge(temp,neighbour.piece,tempBoard.piece,neighbour.arrayRef,</span><span class="s2-90">true</span><span class="si">) ||</span></div>
<div class="l li"><span class="si">                       neighbour.pd.powerMerge(temp,tempBoard.piece,neighbour.piece,neighbour.arrayRef,</span><span class="s2-90">true</span><span class="si">)){ </span><span class="s2-89">// powerMerge?</span></div>
<div class="l li"><span class="si">                        temp.Add(neighbour);</span></div>
<div class="l li"><span class="si">                        JSFSwipeManager.rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// uses up the rainbow swipe each time...</span></div>
<div class="l lc d4"><span class="sc">                        </span><span class="sc2">JSFRelay</span><span class="sc">.onSwipeAdded(</span><span class="sc2">neighbour</span><span class="sc">.piece,true); // simulate a swipe added...</span></div>
<div class="l li"><span class="si">                        hasPowerMerge = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">return</span><span class="si"> temp; </span><span class="s2-89">// found a valid suggestion list</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        JSFSwipeManager.limitedSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset limitedSwipe status</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(neighbour.pd.addToSwipeChain(neighbour.piece,JSFSwipeManager.swipeColor,</span><span class="s2-90">true</span><span class="si">) ){</span></div>
<div class="l li"><span class="si">                    temp.Add(neighbour);</span></div>
<div class="l li"><span class="si">                    JSFSwipeManager.rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// uses up the rainbow swipe each time...</span></div>
<div class="l lc d5"><span class="sc">                    </span><span class="sc2">JSFRelay</span><span class="sc">.onSwipeAdded(</span><span class="sc2">neighbour</span><span class="sc">.piece,true); // simulate a swipe added...</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(!JSFSwipeManager.limitedSwipe) temp = recursiveFindSuggestion(temp,neighbour);</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(temp.Count &gt;= minSwipeMatch){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">return</span><span class="si"> temp; </span><span class="s2-89">// found a valid suggestion list</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                        JSFSwipeManager.limitedSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset limitedSwipe status</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> temp; </span><span class="s2-89">// return the list without any new results</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// resets the board due to no more moves</span></div>
<div class="l li"><span class="si">    IEnumerator resetBoard() {</span></div>
<div class="l li"><span class="si">        animScript.doAnim(JSFanimType.NOMOREMOVES,0,0);</span></div>
<div class="l li"><span class="si">        JSFRelay.onNoMoreMoves();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(noMoreMoveResetTime);</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s2-89">// reset the board status</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// for the board width size</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; boardWidth; x++) {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// for the board height size</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">( </span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; boardHeight; y++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">//reset the pieces with a random type..</span></div>
<div class="l li"><span class="si">                board[x,y].reset(pieceTypes[0], ranType());</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        JSFRelay.onComboEnd();</span></div>
<div class="l li"><span class="si">        JSFRelay.onBoardReset();</span></div>
<div class="l li"><span class="si">        isCheckingPossibleMoves = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// suggest a piece after a given time...</span></div>
<div class="l li"><span class="si">    IEnumerator suggestPiece() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(suggestionTimer); </span><span class="s2-89">// wait till it's time</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gameState != JSFGameState.GameActive){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// game no longer active... do not display suggestion...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(GameObject go </span><span class="s2-90">in</span><span class="si"> suggestedPieces){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(go == </span><span class="s2-90">null</span><span class="si"> || !go.activeSelf){</span></div>
<div class="l li"><span class="si">                notifyBoardHasChanged(); </span><span class="s2-89">// something changed... perform checks again!</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">float</span><span class="si"> currentSize = pieceOriginalSize.x;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// main scaler loop</span></div>
<div class="l li"><span class="si">            LeanTween.value(go,suggestPieceScaler,currentSize*0.75f,currentSize*1.25f,1f)</span></div>
<div class="l li"><span class="si">                .setLoopPingPong().setOnUpdateParam(go);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// sub rotate loop</span></div>
<div class="l li"><span class="si">            go.transform.localEulerAngles = </span><span class="s2-90">new</span><span class="si"> Vector3(0,0,340f);</span></div>
<div class="l li"><span class="si">            LeanTween.rotateZ(go,20f,0.8f).setLoopPingPong();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the function for leanTween to scale the suggested pieces</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> suggestPieceScaler(</span><span class="s2-90">float</span><span class="si"> val, </span><span class="s2-90">object</span><span class="si"> go){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(checkedPossibleMove){</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localScale = </span><span class="s2-90">new</span><span class="si"> Vector3(val,val,1); </span><span class="s2-89">// scale to value</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            LeanTween.cancel((GameObject)go); </span><span class="s2-89">// cancel all tweens</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localScale = pieceOriginalSize; </span><span class="s2-89">// resets scale to normal</span></div>
<div class="l li"><span class="si">            ((GameObject)go).transform.localEulerAngles = Vector3.zero; </span><span class="s2-89">// resets rotate to normal</span></div>
<div class="l li"><span class="si">            JSFUtils.autoScalePadded((GameObject)go); </span><span class="s2-89">// as a precaution to reset size</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Board Piece position Fall by gravity function ( DO NOT TOUCH UNLESS NECCESSARY~! )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// (main gravity function)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> dropPieces(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( !(x &gt;= 0 &amp;&amp; x &lt; boardWidth &amp;&amp; y &gt;=0 &amp;&amp; y &lt; boardHeight) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// index out of bounds... do not continue~!</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( board[x,y].replacementNeeded()) {</span></div>
<div class="l li"><span class="si">            board[x,y].isBeingDelayed = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// status to verify that board already active in drop sequence</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(newPieceMode){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFNewPieceMethod.FallByGravity : </span><span class="s2-89">// gravity replacement</span></div>
<div class="l li"><span class="si">                StartCoroutine( movePieces(x,y) ); </span><span class="s2-89">// coroutine that can be delayed</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFNewPieceMethod.Appear : </span><span class="s2-89">// self replacement (appear from itself)</span></div>
<div class="l li"><span class="si">                StartCoroutine( appearModePieces(x,y) ); </span><span class="s2-89">// coroutine that can be delayed</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    IEnumerator appearModePieces(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(appearModeDelay); </span><span class="s2-89">// wait for the delay..</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// for custom pieces spawn rate</span></div>
<div class="l li"><span class="si">        JSFPieceDefinition spawned;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> w = 0; w &lt; pieceTypes.Length; w++){</span></div>
<div class="l li"><span class="si">            spawned = pieceTypes[w].chanceToSpawnThis(x,y);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(spawned != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNewAppear(spawned,appearModeSpeed,spawned.skinToUseDuringSpawn(x,y) );</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( w == pieceTypes.Length - 1){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// reached the end, no custom spawn... spawn the default</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNewAppear(pieceTypes[0],appearModeSpeed,ranType());</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s2-89">// board structure changed, so notify the change~!</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(appearModeSpeed); </span><span class="s2-89">// wait for appear mode speed</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].isBeingDelayed = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset status once delay is over</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// secondary gravity function as a coroutine for delay ability</span></div>
<div class="l li"><span class="si">    IEnumerator movePieces(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(delayedGravity &amp;&amp; board[x,y].mustWait){ </span><span class="s2-89">// if delay is required by GameManager or by board</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(gravityDelayTime); </span><span class="s2-89">// delay time between each dropped pieces</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        board[x,y].mustWait = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// change status of board to drop other pieces without delay</span></div>
<div class="l li"><span class="si">        board[x,y].isBeingDelayed = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset status once delay is over</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        JSFBoard tBoard = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.DOWN :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(0,-size,0); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            tBoard = board[x,y].top;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){ </span><span class="s2-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s2-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Left,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.Right,JSFBoardDirection.Bottom};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.BottomLeft,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.BottomRight, JSFBoardDirection.Bottom};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.UP :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(0,size,0); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            tBoard = board[x,y].bottom;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){ </span><span class="s2-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s2-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Left,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.Right,JSFBoardDirection.Top};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.TopLeft,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.TopRight, JSFBoardDirection.Top};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.LEFT :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(-size,0,0); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){ </span><span class="s2-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s2-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                tBoard = board[x,y].right;</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.Bottom,JSFBoardDirection.Left};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(Random.Range(0,2) == 0){</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].bottomRight;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        JSFBoardDirection.Bottom, JSFBoardDirection.TopLeft};</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].topRight;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        JSFBoardDirection.Bottom, JSFBoardDirection.BottomLeft};</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.RIGHT :</span></div>
<div class="l li"><span class="si">            gravityVector = </span><span class="s2-90">new</span><span class="si"> Vector3(size,0,0); </span><span class="s2-89">// gravity in vector3</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">switch</span><span class="si">(boardType){ </span><span class="s2-89">// get the landslide's position to take from...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s2-90">default</span><span class="si">:</span></div>
<div class="l li"><span class="si">                tBoard = board[x,y].left;</span></div>
<div class="l li"><span class="si">                bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                    JSFBoardDirection.Bottom,JSFBoardDirection.Right};</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(Random.Range(0,2) == 0){</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].bottomLeft;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        JSFBoardDirection.Bottom, JSFBoardDirection.TopRight};</span></div>
<div class="l li"><span class="si">                } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                    tBoard = board[x,y].topLeft;</span></div>
<div class="l li"><span class="si">                    bd = </span><span class="s2-90">new</span><span class="si"> JSFBoardDirection[]{JSFBoardDirection.Top,</span></div>
<div class="l li"><span class="si">                        JSFBoardDirection.Bottom, JSFBoardDirection.BottomRight};</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(tBoard == </span><span class="s2-90">null</span><span class="si">){ </span><span class="s2-89">// if board to steal from...</span></div>
<div class="l li"><span class="si">            StartCoroutine(spawnNew(x,y,gravityVector)); </span><span class="s2-89">// spawn a new piece</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// finished gravity on this pass... move to the next</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( tBoard.causesLandslideEffect() ){ </span><span class="s2-89">// check for landslide effect</span></div>
<div class="l li"><span class="si">            JSFBoard boardL = tBoard.boardEnumToReference(bd[0]); </span><span class="s2-89">// the board's hypothetical left</span></div>
<div class="l li"><span class="si">            JSFBoard boardR = tBoard.boardEnumToReference(bd[1]); </span><span class="s2-89">// the board's hypothetical right</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-89">// landslide code</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(boardL != </span><span class="s2-90">null</span><span class="si"> &amp;&amp;</span></div>
<div class="l li"><span class="si">               !boardL.causesLandslideEffect() &amp;&amp; boardL.allowGravity() ){ </span><span class="s2-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                tBoard = boardL;</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(boardR != </span><span class="s2-90">null</span><span class="si"> &amp;&amp;</span></div>
<div class="l li"><span class="si">                      !boardR.causesLandslideEffect() &amp;&amp; boardR.allowGravity() ){ </span><span class="s2-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                tBoard = boardR;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(tBoard != boardL &amp;&amp; tBoard != boardR ){ </span><span class="s2-89">// needs to look deeper down...</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// cause landslide below as the top is blocked...</span></div>
<div class="l li"><span class="si">                List&lt;JSFBoard&gt; list = tBoard.getAllBoardInDirection(bd[2]); </span><span class="s2-89">// list of boards hypothetical bottom</span></div>
<div class="l li"><span class="si">                </span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">foreach</span><span class="si">(JSFBoard boardB </span><span class="s2-90">in</span><span class="si"> list){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(boardB.boardEnumToReference(bd[2]) == </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// we reached the bottom of the board... do not continue...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    x = boardB.boardEnumToReference(bd[2]).arrayRef[0];</span></div>
<div class="l li"><span class="si">                    y = boardB.boardEnumToReference(bd[2]).arrayRef[1];</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(!board[x,y].replacementNeeded()){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// if the board here already has a piece, do not continue...</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span></div>
<div class="l li"><span class="si">                    boardL = boardB.boardEnumToReference(bd[0]); </span><span class="s2-89">// the board's hypothetical left</span></div>
<div class="l li"><span class="si">                    boardR = boardB.boardEnumToReference(bd[1]); </span><span class="s2-89">// the board's hypothetical right</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(boardL != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; !boardL.causesLandslideEffect()</span></div>
<div class="l li"><span class="si">                       &amp;&amp; boardL.allowGravity() ){ </span><span class="s2-89">// find pieces on the left</span></div>
<div class="l li"><span class="si">                        tBoard = boardL;</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(boardR != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; !boardR.causesLandslideEffect()</span></div>
<div class="l li"><span class="si">                              &amp;&amp; boardR.allowGravity() ){ </span><span class="s2-89">// find pieces on the right</span></div>
<div class="l li"><span class="si">                        tBoard = boardR;</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( tBoard != </span><span class="s2-90">null</span><span class="si"> &amp;&amp; tBoard.allowGravity() ){ </span><span class="s2-89">// a valid target to steal a piece from...</span></div>
<div class="l li"><span class="si">            JSFSwipeManager.voidSwipeIfNeeded(x,y); </span><span class="s2-89">// void any swipes if needed</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(board[x,y].piece != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].piece.removePiece(); </span><span class="s2-89">// just in case the reference is lost without removal</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            board[x,y].piece = tBoard.piece; </span><span class="s2-89">// steal the piece</span></div>
<div class="l li"><span class="si">            tBoard.piece = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">            StartCoroutine(animateMove(x,y)); </span><span class="s2-89">// animate the change</span></div>
<div class="l li"><span class="si">            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// do the same check on the board we stole from as itself needs replacement</span></div>
<div class="l li"><span class="si">            dropPieces(tBoard.arrayRef[0],tBoard.arrayRef[1]);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// sub-function to update the board box and tween the piece due to gravity movement</span></div>
<div class="l li"><span class="si">    IEnumerator animateMove (</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y) {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// update the local data...</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// board is falling...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> distance = countBlockedUnfilled(x,y, </span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">float</span><span class="si"> delay = gravityDropSpeed;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(acceleratedVelocity){</span></div>
<div class="l li"><span class="si">            delay =  gravityDropSpeed / Mathf.Max(distance, 1);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        board[x,y].applyTweening(delay);</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s2-89">// board structure changed, so notify the change~!</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// the timer according to the drop speed or updatespeed (whichever longer)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(delay);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// update the board box once animation has finished..</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// no longer falling into position</span></div>
<div class="l li"><span class="si">        board[x,y].isActive = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// piece is active for checks</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( distance &lt; 1 ){ </span><span class="s2-89">// check if it has reached bottom</span></div>
<div class="l li"><span class="si">            board[x,y].mustWait = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// reached bottom, re-activate gravity delay</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(pieceDropExtraEffect){ </span><span class="s2-89">// if extra effect is enabled</span></div>
<div class="l li"><span class="si">                board[x,y].applyTweeningAfterEffects(gravityDropSpeed, getVectorEffect(x,y) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            audioScript.DropSoundFx.play(); </span><span class="s2-89">// play the drop sound</span></div>
<div class="l li"><span class="si">        }</span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check if this new piece needs to fall or not...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(board[x,y].boardEnumToReference(bd[2]) != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                dropPieces(board[x,y].boardEnumToReference(bd[2]).arrayRef[0],</span></div>
<div class="l li"><span class="si">                           board[x,y].boardEnumToReference(bd[2]).arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// gravity effect after falling down - simulates easeInBack</span></div>
<div class="l li"><span class="si">    Vector3[] getVectorEffect(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">float</span><span class="si"> offset = 0.35f * size; </span><span class="s2-89">// the amount of offset you wish for effect</span></div>
<div class="l li"><span class="si">        Vector3 position = board[x,y].position;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">            position.z = board[x,y].piece.thisPiece.transform.position.z; </span><span class="s2-89">// ensure the Z order stays when tweening</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        Vector3 pos;</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.DOWN : </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s2-90">new</span><span class="si"> Vector3( 0f , offset, 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3[] {position, (position - pos ), position, position};</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.UP :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s2-90">new</span><span class="si"> Vector3( 0f , offset/2.5f, 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3[] {(position + pos), position, position, position };</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.LEFT :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s2-90">new</span><span class="si"> Vector3( offset/3, 0f , 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3[] {(position - pos), position, position, position };</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.RIGHT :</span></div>
<div class="l li"><span class="si">            pos = </span><span class="s2-90">new</span><span class="si"> Vector3( offset/3, 0f , 0f);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3[] {(position + pos), position, position, position };</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// sub-function to compensate delay of a new spawned piece tweening process</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> IEnumerator spawnNew (</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, Vector3 spawnPoint){</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// board is falling...</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> distance = countBlockedUnfilled(x,y, </span><span class="s2-90">false</span><span class="si">);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">float</span><span class="si"> delay = gravityDropSpeed;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(acceleratedVelocity){</span></div>
<div class="l li"><span class="si">            delay =  gravityDropSpeed / Mathf.Max(distance, 1);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// for custom pieces spawn rate</span></div>
<div class="l li"><span class="si">        JSFPieceDefinition spawned;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> w = 0; w &lt; pieceTypes.Length; w++){</span></div>
<div class="l li"><span class="si">            spawned = pieceTypes[w].chanceToSpawnThis(x,y);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(spawned != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNew(spawned, spawnPoint, delay, spawned.skinToUseDuringSpawn(x,y) );</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">( w == pieceTypes.Length - 1){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-89">// reached the end, no custom spawn... spawn the default</span></div>
<div class="l li"><span class="si">                board[x,y].spawnNew(pieceTypes[0],spawnPoint, delay, ranType() );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s2-89">// board structure changed, so notify the change~!</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// the timer according to the drop speed or updatespeed (whichever longer)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">yield</span><span class="si"> </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> WaitForSeconds(delay);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// update the board box once animation has finished..</span></div>
<div class="l li"><span class="si">        board[x,y].isFalling = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].isActive = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">        board[x,y].mustWait = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// reached bottom, re-activate gravity delay</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( distance &lt; 1 ){ </span><span class="s2-89">// check if it has reached bottom            </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(pieceDropExtraEffect){ </span><span class="s2-89">// if extra effect is enabled</span></div>
<div class="l li"><span class="si">                board[x,y].applyTweeningAfterEffects(gravityDropSpeed, getVectorEffect(x,y) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            audioScript.DropSoundFx.play(); </span><span class="s2-89">// play the drop sound</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// check if this new piece needs to fall or not...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(board[x,y].boardEnumToReference(bd[2]) != </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">                dropPieces(board[x,y].boardEnumToReference(bd[2]).arrayRef[0],</span></div>
<div class="l li"><span class="si">                           board[x,y].boardEnumToReference(bd[2]).arrayRef[1]);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// used to determine the number of unfilled board boxes beyond the current panel</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// limited by panels that pieces cannot pass through</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> countUnfilled(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">bool</span><span class="si"> ignoreTotalCount){ </span><span class="s2-89">// extra function currently un-used by GameManager...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.UP :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> cols = y+1; cols &lt; boardHeight; cols++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board[x,cols].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                } </span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[x,cols].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.DOWN :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> cols = y-1; cols &gt;= 0 ; cols--){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board[x,cols].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                } </span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[x,cols].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.RIGHT : </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> rows = x+1; rows &lt; boardWidth; rows++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board[rows,y].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[rows,y].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.LEFT :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> rows = x-1; rows &gt;=0 ; rows--){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board[rows,y].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[rows,y].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// used to determine the number of unfilled board boxes beyond the current panel</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// limited by panels that block gravity</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> countBlockedUnfilled(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y, </span><span class="s2-90">bool</span><span class="si"> ignoreTotalCount){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> count = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!board[x,y].panel.isStealable()){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// cannot proceed.. distance = 0</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(currentGravity){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.UP :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> cols = y+1; cols &lt; boardHeight; cols++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board[x,cols].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[x,cols].panel.allowsGravity() || !board[x,cols].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[x,cols].panel.pnd.hasStartingPiece ) count--;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.DOWN :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> cols = y-1; cols &gt;= 0 ; cols--){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board[x,cols].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[x,cols].panel.allowsGravity() || !board[x,cols].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[x,cols].panel.pnd.hasStartingPiece ) count--;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.RIGHT : </span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> rows = x+1; rows &lt; boardWidth; rows++){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board[rows,y].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[rows,y].panel.allowsGravity() || !board[rows,y].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[rows,y].panel.pnd.hasStartingPiece ) count--;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFGravity.LEFT :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> rows = x-1; rows &gt;=0 ; rows--){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board[rows,y].replacementNeeded() ){</span></div>
<div class="l li"><span class="si">                    count++;</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(ignoreTotalCount &amp;&amp; count &gt; 0 ) </span><span class="s2-90">return</span><span class="si"> count; </span><span class="s2-89">// performance saver, reduce redundant check</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[rows,y].panel.allowsGravity() || !board[rows,y].panel.isStealable() ){</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// do not check further as it cannot pass through here</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(!board[rows,y].panel.pnd.hasStartingPiece ) count--;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> count;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Routine Checks Related</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Helper Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Helper FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// random cubeType generator , just coz the code is too long</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> ranType() {</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> Random.Range(0,Mathf.Min( NumOfActiveType, pieceTypes[0].skin.Length) );</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// limited by normalpieces types available if numOfActiveType is declared out of bounds</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED FUNCTION of getBoardsDistance *range of distance Type*</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;JSFBoard&gt; getBoardsFromDistance(</span><span class="s2-90">int</span><span class="si">[] point, </span><span class="s2-90">int</span><span class="si"> distMin, </span><span class="s2-90">int</span><span class="si"> distMax){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> getBoardsFromDistance(iBoard(point),distMin, distMax );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// get all the board from a specific distance range~!</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;JSFBoard&gt; getBoardsFromDistance(JSFBoard point, </span><span class="s2-90">int</span><span class="si"> distMin, </span><span class="s2-90">int</span><span class="si"> distMax){</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; temp = </span><span class="s2-90">new</span><span class="si"> List&lt;JSFBoard&gt;();</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> x = distMin; x &lt;= distMax; x++){</span></div>
<div class="l li"><span class="si">            temp.AddRange(getBoardsFromDistance(point,x)); </span><span class="s2-89">// add the boards within the range specified</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> temp;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED FUNCTION of getBoardsDistance</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;JSFBoard&gt; getBoardsFromDistance(</span><span class="s2-90">int</span><span class="si">[] point, </span><span class="s2-90">int</span><span class="si"> dist){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> getBoardsFromDistance(iBoard(point),dist);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// get all the board from a specific distance</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> List&lt;JSFBoard&gt; getBoardsFromDistance(JSFBoard point, </span><span class="s2-90">int</span><span class="si"> dist){</span></div>
<div class="l li"><span class="si">        List&lt;JSFBoard&gt; temp = </span><span class="s2-90">new</span><span class="si"> List&lt;JSFBoard&gt;();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(JSFBoard itr </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(boardRadiusDistance(point,itr) == dist){ </span><span class="s2-89">// is on this specific distance</span></div>
<div class="l li"><span class="si">                temp.Add(itr); </span><span class="s2-89">// add the board to the list</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> temp;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// OVERLOADED FUNCTION of boardRadiusDistance</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> boardRadiusDistance(JSFBoard boardA, JSFBoard boardB ){ </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si">  boardRadiusDistance(boardA.arrayRef,boardB.arrayRef);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to calculate the relative distance between two board locations</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> boardRadiusDistance(</span><span class="s2-90">int</span><span class="si">[] bPosA, </span><span class="s2-90">int</span><span class="si">[] bPosB ){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">switch</span><span class="si">(boardType){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Square : </span><span class="s2-90">default</span><span class="si"> :</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> totalX = Mathf.Abs( bPosA[0] - bPosB[0] );</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> totalY = Mathf.Abs( bPosA[1] - bPosB[1] );</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(squareSwipeMode == JSFsquareMode.CrossType){ </span><span class="s2-89">// specific for cross-type square</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> totalX + totalY; </span><span class="s2-89">// each box = 1 distance... no diagonals</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si">  Mathf.Max(totalX, Mathf.Max(totalY, Mathf.Abs( totalX - totalY ) ) );</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">case</span><span class="si"> JSFBoardType.Hexagon :</span></div>
<div class="l li"><span class="si">            Vector3 vecA = hexGetCalcVector(bPosA);</span></div>
<div class="l li"><span class="si">            Vector3 vecB = hexGetCalcVector(bPosB);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> (</span><span class="s2-90">int</span><span class="si">) Mathf.Max(</span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">float</span><span class="si">[]{ </span><span class="s2-89">// hex distance formula</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.x - vecB.x),</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.y - vecB.y),</span></div>
<div class="l li"><span class="si">                Mathf.Abs(vecA.z - vecB.z)</span></div>
<div class="l li"><span class="si">            });</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> playerMadeAMove(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// TODO moving rest combo currently not used in JSF</span></div>
<div class="l li"><span class="s2-89">//      if(movingResetsCombo) JSFRelay.onComboEnd(); // end the combo if no special override...</span></div>
<div class="l li"><span class="si">        moves++; </span><span class="s2-89">// merging, so number of moves increase</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        JSFRelay.onPlayerMove();</span></div>
<div class="l li"><span class="si">        notifyBoardHasChanged(); </span><span class="s2-89">// notify the change~!</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isLegalSwipe(JSFBoard board){ </span><span class="s2-89">// can users make a swipe call?</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// add any other criteria here (if any)</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> ( board.isLegalSwipe() ); </span><span class="s2-89">// meet criteria?</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Helper Functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region HEXAGON related functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// HEXAGON FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// returns the unsquiggled Hexagon grid</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] hexUnsquiggleArray(</span><span class="s2-90">int</span><span class="si">[] array){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> </span><span class="s2-90">int</span><span class="si">[] { array[0],array[1] - array[0] + (array[0]/2)};</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// returns a vector3 array for distance calculation</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> Vector3 hexGetCalcVector(</span><span class="s2-90">int</span><span class="si">[] array){</span></div>
<div class="l li"><span class="si">        array = hexUnsquiggleArray(array);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">new</span><span class="si"> Vector3(array[0],array[1],(array[0] + array[1])*-1);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion HEXAGON related functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region game-start sequence</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> StartGame() { </span><span class="s2-89">// when the game is actually running...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gameState == JSFGameState.GamePending){</span></div>
<div class="l li"><span class="si">            gameState = JSFGameState.GameActive; </span><span class="s2-89">// change the state to active...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// Initialize Timers and settings</span></div>
<div class="l li"><span class="si">            StartCoroutine(updater()); </span><span class="s2-89">// initiate the update loop</span></div>
<div class="l li"><span class="si">            canMove = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// allows player to move the pieces</span></div>
<div class="l li"><span class="si">            </span><span class="s2-89">// call the gameStart for the board objects</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">                _board.onGameStart();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            JSFRelay.onGameStart();</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">            Debug.Log(</span><span class="s2-85">&quot;Game already started... cannot start the game again!&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion game-start sequence</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region Unity Functions</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// UNITY FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ===========================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> Awake () { </span><span class="s2-89">// board needs to be initialized before other scripts can access it</span></div>
<div class="l li"><span class="si">        JSFUtils.gm = </span><span class="s2-90">this</span><span class="si">; </span><span class="s2-89">// make a easy reference to the GameManager ( this script ! ) </span></div>
<div class="l li"><span class="si">        JSFUtils.wc = GetComponent&lt;JSFWinningConditions&gt;(); </span><span class="s2-89">// make a easy reference to the WinningConditions script~!</span></div>
<div class="l li"><span class="si">        JSFUtils.vm = GetComponent&lt;JSFVisualManager&gt;(); </span><span class="s2-89">// make a easy reference to the GUIManager script~!</span></div>
<div class="l li"><span class="si">        JSFRelay.onPreGameStart();</span></div>
<div class="l li"><span class="si">        initializeGame();</span></div>
<div class="l li"><span class="si">        preGameSetup();</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        canMove = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// initially cannot be moved...</span></div>
<div class="l li"><span class="si">        gameState = JSFGameState.GamePending; </span><span class="s2-89">// game is waiting to be started...</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">void</span><span class="si"> Start(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// init the board objects</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(JSFBoard _board </span><span class="s2-90">in</span><span class="si"> board){</span></div>
<div class="l li"><span class="si">            _board.init(); </span><span class="s2-89">// to show the GUIs for the objects</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion Unity Functions</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs">Number of differences: <b>5</b></div><div id="colors"><div class="sa" title="4 added lines and 1 inline additions in changed lines">Added(4,1)</div><div class="sd" title="0 deleted lines and 3 inline deletions in changed lines">Deleted(0,3)</div><div class="sc" title="4 changed lines">Changed(4)</div><div class="sc2" title="5 inline changes in changed lines">Changed in changed(5)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on March 18, 2015, 9:43 PM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 7.0.1.4.
    </div>
</div>
</body>

</html>

