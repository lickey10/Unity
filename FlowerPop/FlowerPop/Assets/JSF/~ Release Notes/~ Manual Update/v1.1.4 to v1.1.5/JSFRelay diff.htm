<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 7.0.1.4 -->
<!-- saved from url=(0014)about:internet -->

<head><script type="text/javascript" src="/4B6D6BB14090486CAB497E737B878663/35D3A13F-66EF-C24D-B172-A7B29EC1F0B3/main.js" charset="UTF-8"></script>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0;height: 13px;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 1824px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 1824
    var $diffs = [
null,
{d:'Diff 1: Add 1 line (26, second file) after line 25 (first file)',l:[25,25]},
{d:'Diff 2: Add 1 line (29, second file) after line 27 (first file)',l:[28,28]},
{d:'Diff 3: Add 1 line (53, second file) after line 50 (first file)',l:[52,52]},
{d:'Diff 4: Add 1 line (55, second file) after line 51 (first file)',l:[54,54]},
{d:'Diff 5: Add 13 lines (214 - 226, second file) after line 208 (first file)',l:[213,225]},
{d:'Diff 6: Add 15 lines (241 - 255, second file) after line 221 (first file)',l:[240,254]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="JSFRelay (old).cs"><b>JSFRelay (old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num">    </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num">    </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num">    </div>
<div class="num"> 51 </div>
<div class="num">    </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="s1-89">/// JSF Relay static class. </span></div>
<div class="l li"><span class="s1-89">/// WARNING~! Do not call JSFRelay.onXXX(); explicitly... it is not meant to be called!</span></div>
<div class="l li"><span class="s1-89">/// *** already called by fixed coding positions in GameManager. ***</span></div>
<div class="l li"><span class="s1-89">/// &lt;/summary&gt;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> JSFRelay {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> JSFGameManager gm {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> JSFUtils.gm;}} </span><span class="s1-89">// getter methods for gameManager reference</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> JSFWinningConditions wc {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> JSFUtils.wc;}} </span><span class="s1-89">// getter methods for WinningConditions reference</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">delegate</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onEventDelegate();</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegate dlgOnGameStart;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegate dlgOnPlayerMove;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegate dlgOnBoardStabilize;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegate dlgOnCombo;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegate dlgOnComboEnd;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegate dlgOnNoMoreMoves;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegate dlgOnBoardReset;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">delegate</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onEventDelegateSwipe(JSFGamePiece gp, </span><span class="s1-90">bool</span><span class="si"> isBoardCheck);</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegateSwipe dlgOnSwipeAdded;</span></div>
<div class="l la d1"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegateSwipe dlgOnSwipeBackTracked;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">delegate</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onEventDelegateSwipeValidating(JSFGamePiece gp);</span></div>
<div class="l la d2"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegateSwipeValidating dlgOnSwipeValidating;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">delegate</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onEventDelegateSwipeValidated(</span><span class="s1-90">bool</span><span class="si"> status, </span><span class="s1-90">int</span><span class="si"> ChainLength);</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegateSwipeValidated dlgOnSwipeValidated;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">delegate</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> onEventDelegateScore(</span><span class="s1-90">int</span><span class="si"> num,</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y);</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegateScore dlgOnScoreIssue;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">delegate</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onEventDelegateClick(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y);</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegateClick dlgOnPieceClick;</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> onEventDelegateClick dlgOnPanelClick;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPreGameStart (){ </span><span class="s1-89">// called before GameManager does anything... NOTHING IS SET UP YET</span></div>
<div class="l li"><span class="si">        dlgOnGameStart = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnPlayerMove = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnBoardStabilize = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnCombo = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnComboEnd = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnNoMoreMoves = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnBoardReset = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnPieceClick = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnPanelClick = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnScoreIssue = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnSwipeAdded = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l la d3"> </div>
<div class="l li"><span class="si">        dlgOnSwipeBackTracked = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l la d4"> </div>
<div class="l li"><span class="si">        dlgOnSwipeValidating = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnSwipeValidated = </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// WARNING : board HAS NOT been set up yet... you can do final board modifications here... </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// stuff like abilities that modify the current GameManager set up before board inits</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// e.g., board size, board width/height etc...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// when the board has been finalized, and are being initiated ( GUI output of pieces and panels )</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onGameStart (){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnGameStart != </span><span class="s1-90">null</span><span class="si">) dlgOnGameStart.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPlayerMove() { </span><span class="s1-89">// called when player makes a move</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// custom piece / panels onPlayerMove function call</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth ; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(gm.board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].piece.pd.onPlayerMove(gm.board[x,y]);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                gm.board[x,y].panel.pnd.onPlayerMove(gm.board[x,y].panel);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnPlayerMove != </span><span class="s1-90">null</span><span class="si">) dlgOnPlayerMove.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// called when all pieces stop moving and suggestion is being calculated</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onBoardStabilize (){</span></div>
<div class="l li"><span class="si">        onComboEnd(); </span><span class="s1-89">// end the combo when board stabilizes</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// custom piece / panels onBoardStabilize function call</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth ; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">for</span><span class="si"> (</span><span class="s1-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(gm.board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].piece.pd.onBoardStabilize(gm.board[x,y]);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                gm.board[x,y].panel.pnd.onBoardStabilize(gm.board[x,y].panel);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnBoardStabilize != </span><span class="s1-90">null</span><span class="si">) dlgOnBoardStabilize.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onCombo(){ </span><span class="s1-89">// called directly after combo+1, but before GUI output </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnCombo != </span><span class="s1-90">null</span><span class="si">) dlgOnCombo.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onComboEnd(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.currentCombo &gt; 7){</span></div>
<div class="l li"><span class="si">            gm.audioScript.comboHighFx.play(); </span><span class="s1-89">// play sound for hi combo</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(gm.currentCombo &gt; 5){</span></div>
<div class="l li"><span class="si">            gm.audioScript.comboMidFx.play(); </span><span class="s1-89">// play sound for mid combo</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> </span><span class="s1-90">if</span><span class="si">(gm.currentCombo &gt; 3){</span></div>
<div class="l li"><span class="si">            gm.audioScript.comboLowFx.play(); </span><span class="s1-89">// play sound for low combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        gm.currentCombo = 0; </span><span class="s1-89">// reset combo counter...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnComboEnd != </span><span class="s1-90">null</span><span class="si">) dlgOnComboEnd.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onNoMoreMoves(){ </span><span class="s1-89">// called before board reset happens</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnNoMoreMoves != </span><span class="s1-90">null</span><span class="si">) dlgOnNoMoreMoves.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onBoardReset(){ </span><span class="s1-89">// called after board reset happens</span></div>
<div class="l li"><span class="si">        JSFSwipeManager.voidCurrentSwipe(); </span><span class="s1-89">// voids any left over swipe on the old board</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnBoardReset != </span><span class="s1-90">null</span><span class="si">) dlgOnBoardReset.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPieceClick(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        gm.board[x,y].pd.onPieceClicked(gm.board[x,y].piece); </span><span class="s1-89">// call PieceDefinition's onPieceClick</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// the panel click is here because the panel will be next to be clicked after the piece</span></div>
<div class="l li"><span class="si">        onPanelClick(x,y); </span><span class="s1-89">// call PanelDefinition's onPanelClick</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// x / y is the board position of which the piece located was clicked.</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// e.g., JSFUtils.gm.board[x,y] ....</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnPieceClick != </span><span class="s1-90">null</span><span class="si">) dlgOnPieceClick.Invoke(x,y);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onPanelClick(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        gm.board[x,y].panel.pnd.onPanelClicked(gm.board[x,y].panel); </span><span class="s1-89">// call PanelDefinition's onPanelClick</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// x / y is the board position of which the piece located was clicked.</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// e.g., JSFUtils.gm.board[x,y] ....</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnPanelClick != </span><span class="s1-90">null</span><span class="si">) dlgOnPanelClick.Invoke(x,y);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the &quot;RAW&quot; score given for destroyed pieces / matches of an individual box</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// the score HAS NOT been multiplied by combo bonus yet~!</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> onScoreIssue(</span><span class="s1-90">int</span><span class="si"> scoreGain, </span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> modifiedGains = scoreGain;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// modifiedGains = something else?? ;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnScoreIssue != </span><span class="s1-90">null</span><span class="si">) modifiedGains = dlgOnScoreIssue.Invoke(modifiedGains,x,y);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> modifiedGains;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ==============================</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// Swipe related stuff</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ==============================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// when a piece has been ADDED (already happened!) to the swipe list</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onSwipeAdded(JSFGamePiece gp, </span><span class="s1-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        gp.pd.onSwipeAdded(gp,isBoardCheck); </span><span class="s1-89">// piece definition relay call</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// you can call JSFSwipeManager for swipe related variables</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// e.g. &gt; &quot;JSFSwipeManager.swipeColor&quot; &lt;-- returns slotNum of type int</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnSwipeAdded != </span><span class="s1-90">null</span><span class="si">) dlgOnSwipeAdded.Invoke(gp,isBoardCheck);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l la d5"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// when a swipe was back tracked... (already happened!)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onSwipeBackTracked(JSFGamePiece gp, </span><span class="s1-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        gp.pd.onSwipeBackTracked(gp,isBoardCheck); </span><span class="s1-89">// piece definition relay call</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// you can call JSFSwipeManager for swipe related variables</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// e.g. &gt; &quot;JSFSwipeManager.swipeColor&quot; &lt;-- returns slotNum of type int</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnSwipeBackTracked != </span><span class="s1-90">null</span><span class="si">) dlgOnSwipeBackTracked.Invoke(gp,isBoardCheck);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l lg"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onSwipeValidating(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here... before piece validation</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        gp.pd.onSwipeValidating(gp); </span><span class="s1-89">// piece definition relay call</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnSwipeValidating != </span><span class="s1-90">null</span><span class="si">) dlgOnSwipeValidating.Invoke(gp);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here... after piece validation</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// when a swipe sequence has been validated.. (already happened!)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> onSwipeValidated(</span><span class="s1-90">bool</span><span class="si"> status, </span><span class="s1-90">int</span><span class="si"> ChainLength){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// chainLength = the number of pieces linked in the validated swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// status == false means the swipe sequence was rejected</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// status == false means the swipe sequence was accepted and the pieces are already destroyed</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// you can call JSFSwipeManager for swipe related variables</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// e.g. &gt; &quot;JSFSwipeManager.swipeColor&quot; &lt;-- returns slotNum of type int</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(dlgOnSwipeValidated != </span><span class="s1-90">null</span><span class="si">) dlgOnSwipeValidated.Invoke(status,ChainLength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="JSFRelay (new).cs"><b>JSFRelay (new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">    </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-89">/// &lt;summary&gt;</span></div>
<div class="l li"><span class="s2-89">/// JSF Relay static class. </span></div>
<div class="l li"><span class="s2-89">/// WARNING~! Do not call JSFRelay.onXXX(); explicitly... it is not meant to be called!</span></div>
<div class="l li"><span class="s2-89">/// *** already called by fixed coding positions in GameManager. ***</span></div>
<div class="l li"><span class="s2-89">/// &lt;/summary&gt;</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> JSFRelay {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> JSFGameManager gm {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> JSFUtils.gm;}} </span><span class="s2-89">// getter methods for gameManager reference</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> JSFWinningConditions wc {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> JSFUtils.wc;}} </span><span class="s2-89">// getter methods for WinningConditions reference</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">delegate</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onEventDelegate();</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegate dlgOnGameStart;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegate dlgOnPlayerMove;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegate dlgOnBoardStabilize;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegate dlgOnCombo;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegate dlgOnComboEnd;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegate dlgOnNoMoreMoves;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegate dlgOnBoardReset;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">delegate</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onEventDelegateSwipe(JSFGamePiece gp, </span><span class="s2-90">bool</span><span class="si"> isBoardCheck);</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegateSwipe dlgOnSwipeAdded;</span></div>
<div class="l la d1"><span class="sa">    public static onEventDelegateSwipe dlgOnSwipeRemoved;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegateSwipe dlgOnSwipeBackTracked;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">delegate</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onEventDelegateSwipeValidating(JSFGamePiece gp);</span></div>
<div class="l la d2"><span class="sa">    public static onEventDelegateSwipeValidating dlgOnSwipeFailed;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegateSwipeValidating dlgOnSwipeValidating;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">delegate</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onEventDelegateSwipeValidated(</span><span class="s2-90">bool</span><span class="si"> status, </span><span class="s2-90">int</span><span class="si"> ChainLength);</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegateSwipeValidated dlgOnSwipeValidated;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">delegate</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> onEventDelegateScore(</span><span class="s2-90">int</span><span class="si"> num,</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y);</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegateScore dlgOnScoreIssue;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">delegate</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onEventDelegateClick(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y);</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegateClick dlgOnPieceClick;</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> onEventDelegateClick dlgOnPanelClick;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPreGameStart (){ </span><span class="s2-89">// called before GameManager does anything... NOTHING IS SET UP YET</span></div>
<div class="l li"><span class="si">        dlgOnGameStart = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnPlayerMove = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnBoardStabilize = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnCombo = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnComboEnd = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnNoMoreMoves = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnBoardReset = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnPieceClick = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnPanelClick = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnScoreIssue = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnSwipeAdded = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l la d3"><span class="sa">        dlgOnSwipeRemoved = null;</span></div>
<div class="l li"><span class="si">        dlgOnSwipeBackTracked = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l la d4"><span class="sa">        dlgOnSwipeFailed = null;</span></div>
<div class="l li"><span class="si">        dlgOnSwipeValidating = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        dlgOnSwipeValidated = </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// WARNING : board HAS NOT been set up yet... you can do final board modifications here... </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// stuff like abilities that modify the current GameManager set up before board inits</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// e.g., board size, board width/height etc...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// when the board has been finalized, and are being initiated ( GUI output of pieces and panels )</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onGameStart (){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnGameStart != </span><span class="s2-90">null</span><span class="si">) dlgOnGameStart.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPlayerMove() { </span><span class="s2-89">// called when player makes a move</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// custom piece / panels onPlayerMove function call</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth ; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(gm.board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].piece.pd.onPlayerMove(gm.board[x,y]);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                gm.board[x,y].panel.pnd.onPlayerMove(gm.board[x,y].panel);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnPlayerMove != </span><span class="s2-90">null</span><span class="si">) dlgOnPlayerMove.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// called when all pieces stop moving and suggestion is being calculated</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onBoardStabilize (){</span></div>
<div class="l li"><span class="si">        onComboEnd(); </span><span class="s2-89">// end the combo when board stabilizes</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// custom piece / panels onBoardStabilize function call</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> x = 0; x &lt; gm.boardWidth ; x++){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">for</span><span class="si"> (</span><span class="s2-90">int</span><span class="si"> y = 0; y &lt; gm.boardHeight ; y++) {</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(gm.board[x,y].isFilled){</span></div>
<div class="l li"><span class="si">                    gm.board[x,y].piece.pd.onBoardStabilize(gm.board[x,y]);</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                gm.board[x,y].panel.pnd.onBoardStabilize(gm.board[x,y].panel);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnBoardStabilize != </span><span class="s2-90">null</span><span class="si">) dlgOnBoardStabilize.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onCombo(){ </span><span class="s2-89">// called directly after combo+1, but before GUI output </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnCombo != </span><span class="s2-90">null</span><span class="si">) dlgOnCombo.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onComboEnd(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.currentCombo &gt; 7){</span></div>
<div class="l li"><span class="si">            gm.audioScript.comboHighFx.play(); </span><span class="s2-89">// play sound for hi combo</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(gm.currentCombo &gt; 5){</span></div>
<div class="l li"><span class="si">            gm.audioScript.comboMidFx.play(); </span><span class="s2-89">// play sound for mid combo</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> </span><span class="s2-90">if</span><span class="si">(gm.currentCombo &gt; 3){</span></div>
<div class="l li"><span class="si">            gm.audioScript.comboLowFx.play(); </span><span class="s2-89">// play sound for low combo</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        gm.currentCombo = 0; </span><span class="s2-89">// reset combo counter...</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnComboEnd != </span><span class="s2-90">null</span><span class="si">) dlgOnComboEnd.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onNoMoreMoves(){ </span><span class="s2-89">// called before board reset happens</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnNoMoreMoves != </span><span class="s2-90">null</span><span class="si">) dlgOnNoMoreMoves.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onBoardReset(){ </span><span class="s2-89">// called after board reset happens</span></div>
<div class="l li"><span class="si">        JSFSwipeManager.voidCurrentSwipe(); </span><span class="s2-89">// voids any left over swipe on the old board</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnBoardReset != </span><span class="s2-90">null</span><span class="si">) dlgOnBoardReset.Invoke();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPieceClick(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        gm.board[x,y].pd.onPieceClicked(gm.board[x,y].piece); </span><span class="s2-89">// call PieceDefinition's onPieceClick</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// the panel click is here because the panel will be next to be clicked after the piece</span></div>
<div class="l li"><span class="si">        onPanelClick(x,y); </span><span class="s2-89">// call PanelDefinition's onPanelClick</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// x / y is the board position of which the piece located was clicked.</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// e.g., JSFUtils.gm.board[x,y] ....</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnPieceClick != </span><span class="s2-90">null</span><span class="si">) dlgOnPieceClick.Invoke(x,y);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onPanelClick(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        gm.board[x,y].panel.pnd.onPanelClicked(gm.board[x,y].panel); </span><span class="s2-89">// call PanelDefinition's onPanelClick</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// x / y is the board position of which the piece located was clicked.</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// e.g., JSFUtils.gm.board[x,y] ....</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnPanelClick != </span><span class="s2-90">null</span><span class="si">) dlgOnPanelClick.Invoke(x,y);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the &quot;RAW&quot; score given for destroyed pieces / matches of an individual box</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// the score HAS NOT been multiplied by combo bonus yet~!</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> onScoreIssue(</span><span class="s2-90">int</span><span class="si"> scoreGain, </span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> modifiedGains = scoreGain;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// modifiedGains = something else?? ;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnScoreIssue != </span><span class="s2-90">null</span><span class="si">) modifiedGains = dlgOnScoreIssue.Invoke(modifiedGains,x,y);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> modifiedGains;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ==============================</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// Swipe related stuff</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ==============================</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// when a piece has been ADDED (already happened!) to the swipe list</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onSwipeAdded(JSFGamePiece gp, </span><span class="s2-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        gp.pd.onSwipeAdded(gp,isBoardCheck); </span><span class="s2-89">// piece definition relay call</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// you can call JSFSwipeManager for swipe related variables</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// e.g. &gt; &quot;JSFSwipeManager.swipeColor&quot; &lt;-- returns slotNum of type int</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnSwipeAdded != </span><span class="s2-90">null</span><span class="si">) dlgOnSwipeAdded.Invoke(gp,isBoardCheck);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l lg"> </div>
<div class="l la d5"><span class="sa">    // when a piece is being &quot;Removed&quot; (Happening!) from the swipe list</span></div>
<div class="l la d5"><span class="sa">    public static void onSwipeRemoved(JSFGamePiece gp, bool isBoardCheck){</span></div>
<div class="l la d5"><span class="sa">        gp.pd.onSwipeRemoved(gp,isBoardCheck); // piece definition relay call</span></div>
<div class="l lg d5"><span class="sig">        </span></div>
<div class="l la d5"><span class="sa">        // -----------------------------------</span></div>
<div class="l la d5"><span class="sa">        // your own stuff here...</span></div>
<div class="l la d5"><span class="sa">        // you can call JSFSwipeManager for swipe related variables</span></div>
<div class="l la d5"><span class="sa">        // e.g. &gt; &quot;JSFSwipeManager.swipeColor&quot; &lt;-- returns slotNum of type int</span></div>
<div class="l lg d5"><span class="sig">        </span></div>
<div class="l la d5"><span class="sa">        // -----------------------------------</span></div>
<div class="l lg d5"><span class="sig">        </span></div>
<div class="l la d5"><span class="sa">        if(dlgOnSwipeRemoved != null) dlgOnSwipeRemoved.Invoke(gp,isBoardCheck);</span></div>
<div class="l la d5"><span class="sa">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// when a swipe was back tracked... (already happened!)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onSwipeBackTracked(JSFGamePiece gp, </span><span class="s2-90">bool</span><span class="si"> isBoardCheck){</span></div>
<div class="l li"><span class="si">        gp.pd.onSwipeBackTracked(gp,isBoardCheck); </span><span class="s2-89">// piece definition relay call</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// you can call JSFSwipeManager for swipe related variables</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// e.g. &gt; &quot;JSFSwipeManager.swipeColor&quot; &lt;-- returns slotNum of type int</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnSwipeBackTracked != </span><span class="s2-90">null</span><span class="si">) dlgOnSwipeBackTracked.Invoke(gp,isBoardCheck);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l lg"> </div>
<div class="l la d6"><span class="sa">    // when the swipe is illegal, void and being removed...</span></div>
<div class="l la d6"><span class="sa">    // this is per piece call function</span></div>
<div class="l la d6"><span class="sa">    public static void onSwipeFailed(JSFGamePiece gp){</span></div>
<div class="l la d6"><span class="sa">        // -----------------------------------</span></div>
<div class="l la d6"><span class="sa">        // your own stuff here... before swipe fail call</span></div>
<div class="l la d6"><span class="sa">        // -----------------------------------</span></div>
<div class="l la d6"><span class="sa">        gp.pd.onSwipeFailed(gp); // piece definition relay call</span></div>
<div class="l la d6"><span class="sa">        if(dlgOnSwipeFailed != null) dlgOnSwipeFailed.Invoke(gp);</span></div>
<div class="l la d6"><span class="sa">        // -----------------------------------</span></div>
<div class="l la d6"><span class="sa">        // your own stuff here... after swipe fail call</span></div>
<div class="l la d6"><span class="sa">        // -----------------------------------</span></div>
<div class="l la d6"><span class="sa">    }</span></div>
<div class="l lg d6"> </div>
<div class="l la d6"><span class="sa">    // when the piece is being removed 1 by 1 (swipe is valid and being processed) </span></div>
<div class="l la d6"><span class="sa">    // this is per piece call function</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onSwipeValidating(JSFGamePiece gp){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here... before piece validation</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        gp.pd.onSwipeValidating(gp); </span><span class="s2-89">// piece definition relay call</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnSwipeValidating != </span><span class="s2-90">null</span><span class="si">) dlgOnSwipeValidating.Invoke(gp);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here... after piece validation</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// when a swipe sequence has been validated.. (already happened!)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> onSwipeValidated(</span><span class="s2-90">bool</span><span class="si"> status, </span><span class="s2-90">int</span><span class="si"> ChainLength){</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// your own stuff here...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// chainLength = the number of pieces linked in the validated swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// status == false means the swipe sequence was rejected</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// status == false means the swipe sequence was accepted and the pieces are already destroyed</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">//</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// you can call JSFSwipeManager for swipe related variables</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// e.g. &gt; &quot;JSFSwipeManager.swipeColor&quot; &lt;-- returns slotNum of type int</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// -----------------------------------</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(dlgOnSwipeValidated != </span><span class="s2-90">null</span><span class="si">) dlgOnSwipeValidated.Invoke(status,ChainLength);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs">Number of differences: <b>6</b></div><div id="colors"><div class="sa" title="32 added lines and 0 inline additions in changed lines">Added(32,0)</div><div class="sd" title="0 deleted lines and 0 inline deletions in changed lines">Deleted(0,0)</div><div class="sc" title="0 changed lines">Changed(0)</div><div class="sc2" title="0 inline changes in changed lines">Changed in changed(0)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on March 18, 2015, 9:55 PM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 7.0.1.4.
    </div>
</div>
</body>

</html>

