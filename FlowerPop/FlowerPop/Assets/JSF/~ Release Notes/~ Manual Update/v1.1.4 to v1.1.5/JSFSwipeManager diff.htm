<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 7.0.1.4 -->
<!-- saved from url=(0014)about:internet -->

<head><script type="text/javascript" src="/4B6D6BB14090486CAB497E737B878663/55687CEA-4274-114D-8F0B-01867AF5B3BA/main.js" charset="UTF-8"></script>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0;height: 13px;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2240px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2240
    var $diffs = [
null,
{d:'Diff 1: Change 1 line (131, first file) to 1 line (131, second file)',l:[130,130]},
{d:'Diff 2: Change 1 line (178, first file) to 6 lines (178 - 183, second file)',l:[177,182]},
{d:'Diff 3: Add 1 line (186, second file) after line 180 (first file)',l:[185,185]},
{d:'Diff 4: Add 3 lines (214 - 216, second file) after line 207 (first file)',l:[213,215]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            markCurrentDiff(1);

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="JSFSwipeManager (old).cs"><b>JSFSwipeManager (old).cs</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">    </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s1-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"><span class="s1-90">using</span><span class="si"> PathologicalGames;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">class</span><span class="si"> JSFSwipeManager {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// for any color swipe</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> limitedSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// to limit further swipes from happening</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isSwiping = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// is currently swiping?</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> hasPowerMerge = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// has a powerMerge within the swipe</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> List&lt;JSFBoard&gt; swipeChain = </span><span class="s1-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s1-89">// the current swipe chain</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> List&lt;GameObject&gt; swipeIndicatorChain = </span><span class="s1-90">new</span><span class="si"> List&lt;GameObject&gt;(); </span><span class="s1-89">// the indicators in a list</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> List&lt;GameObject&gt; swipeLineChain = </span><span class="s1-90">new</span><span class="si"> List&lt;GameObject&gt;(); </span><span class="s1-89">// the indicator-line in a list</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> swipeColor; </span><span class="s1-89">// the current swipe color (AKA slotNum)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> JSFGameManager gm {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> JSFUtils.gm;}} </span><span class="s1-89">// easy access variable</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> JSFVisualManager vm {</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> JSFUtils.vm;}} </span><span class="s1-89">// easy access variable</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// easy access variables</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> JSFBoard lastSwipeChainBoard { </span><span class="s1-90">get</span><span class="si">{</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(swipeChain.Count-1 &gt;= 0){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> swipeChain[swipeChain.Count-1];</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }}</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// easy access variables</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> JSFBoard secondLastSwipeChainBoard { </span><span class="s1-90">get</span><span class="si">{</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(swipeChain.Count-2 &gt;= 0){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> swipeChain[swipeChain.Count-2];</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }}</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">int</span><span class="si"> currentSwipeCount{</span><span class="s1-90">get</span><span class="si">{</span><span class="s1-90">return</span><span class="si"> swipeChain.Count;}}</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region public functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to get the GamePiece reference of previous added swipe chain using index and num of index previous</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> JSFGamePiece getPrevChainedFromHere(JSFBoard refIndex, </span><span class="s1-90">int</span><span class="si"> num){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> newIndex = swipeChain.IndexOf(refIndex) - num;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(newIndex &gt;= 0 &amp;&amp; newIndex &lt; swipeChain.Count){ </span><span class="s1-89">// if index not out of bounds...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si"> swipeChain[newIndex].piece; </span><span class="s1-89">// return the index..</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">null</span><span class="si">; </span><span class="s1-89">// out of bounds, return null</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to void (cancels) the current swipe if the current swiped chain is modified...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> voidSwipeIfNeeded(</span><span class="s1-90">int</span><span class="si"> x,</span><span class="s1-90">int</span><span class="si"> y ){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isSwiping){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(JSFBoard check </span><span class="s1-90">in</span><span class="si"> swipeChain){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(check.arrayRef[0] == x &amp;&amp; check.arrayRef[1] == y){ </span><span class="s1-89">// if the swipe current has this board selected..</span></div>
<div class="l li"><span class="si">                    voidCurrentSwipe(); </span><span class="s1-89">// resets the swipe...</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to void (cancels) the current swipe no matter what...</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> voidCurrentSwipe(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// resets the swipe...</span></div>
<div class="l li"><span class="si">        swipeChain.Clear();</span></div>
<div class="l li"><span class="si">        removeSwipeVisuals(0);</span></div>
<div class="l li"><span class="si">        limitedSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset swipe limit</span></div>
<div class="l li"><span class="si">        hasPowerMerge = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset powerMerge status</span></div>
<div class="l li"><span class="si">        rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">        isSwiping = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// disable swiping after validated</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to allow any swipe color once</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> allowAnyColorOnce(){</span></div>
<div class="l li"><span class="si">        rainbowSwipe = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// allow it ( will only work once and then reset during the next swipe )</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to stop further swipes</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> stopFurtherSwipes(){</span></div>
<div class="l li"><span class="si">        limitedSwipe = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// stops further swipes to add to chain.. (max chain reach for this swipe)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to allow swipes again</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> allowFurtherSwipes(){</span></div>
<div class="l li"><span class="si">        limitedSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// allow swipes again..</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> swipeStart(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(isSwiping){</span></div>
<div class="l li"><span class="si">            validateSwipe(); </span><span class="s1-89">// prevent refresh bug hack</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isLegalSwipe(board)){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// not a legal swipe... do not proceed with swiping</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( board.pd.useAsFirstSwipe(board.piece,</span><span class="s1-90">false</span><span class="si">) ){ </span><span class="s1-89">// check if pieceDefinition allows to swipe start</span></div>
<div class="l li"><span class="si">            isSwiping = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            swipeAdd(board);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> swipeCall(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// check backtracking?</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(swipeChain.Contains(board) ){ </span><span class="s1-89">// check if we are backtracking the current selection</span></div>
<div class="l li"><span class="si">            hasPowerMerge = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// resets any powerMerge status</span></div>
<div class="l li"><span class="si">            rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">            limitedSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// resets the limit of swipe</span></div>
<div class="l li"><span class="si">            backTrackSelection(board); </span><span class="s1-89">// default proceeds with back tracking...</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// do not continue further... backtracked</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// check legality of swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(!isSwiping || limitedSwipe || !isLegalSwipe(board) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// not legal... do not continue</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// check distance requirements</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> distance = gm.boardRadiusDistance( board, lastSwipeChainBoard);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( distance &lt; board.pd.minSwipeDistance(board.piece) || distance &gt; board.pd.maxSwipeDistance(board.piece) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// not within distance... do not proceed with swipe...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// check for powerMerge...</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(JSFBoard checkBoard </span><span class="s1-90">in</span><span class="si"> swipeChain ){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(checkBoard.pd.powerMerge(swipeChain,board.piece,checkBoard.piece,board.arrayRef,</span><span class="s1-90">true</span><span class="si">) ||</span></div>
<div class="l li"><span class="si">               board.pd.powerMerge(swipeChain,checkBoard.piece,board.piece,board.arrayRef,</span><span class="s1-90">true</span><span class="si">)){ </span><span class="s1-89">// powerMerge?</span></div>
<div class="l li"><span class="si">                rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">                swipeAdd(board); </span><span class="s1-89">// add to chain</span></div>
<div class="l li"><span class="si">                hasPowerMerge = </span><span class="s1-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// added as powerMerge...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-89">// does the pieceDefinition allow to add to swipe chain?</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(board.pd.addToSwipeChain(board.piece,swipeColor,</span><span class="s1-90">false</span><span class="si">) || </span><span class="s1-89">// normal add to swipe OR</span></div>
<div class="l li"><span class="si">                (rainbowSwipe &amp;&amp; !board.pd.isSpecial) ) { </span><span class="s1-89">// check for rainbow OR</span></div>
<div class="l lc d1"><span class="sc">            if(rainbowSwipe) swipeColor = board.piece.slotNum; // change to this color if it was from rainbowSwipe</span></div>
<div class="l li"><span class="si">            rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">            swipeAdd(board); </span><span class="s1-89">// add to chain</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to validate the swipe chain</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">public</span><span class="si"> </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> validateSwipe(){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">bool</span><span class="si"> validateStatus = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> swipeNum = currentSwipeCount;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">int</span><span class="si"> comboTracker = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">( gm.gameState == JSFGameState.GameActive &amp;&amp; </span><span class="s1-89">// game has not ended...</span></div>
<div class="l li"><span class="si">            (swipeChain.Count &gt;= gm.minSwipeMatch || hasPowerMerge)){ </span><span class="s1-89">// meet the minimum required length</span></div>
<div class="l li"><span class="si">            gm.audioScript.matchSoundFx.play();</span></div>
<div class="l li"><span class="si">            gm.playerMadeAMove();</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(hasPowerMerge){ </span><span class="s1-89">// perform powerMerges if there is...</span></div>
<div class="l li"><span class="si">                List&lt;JSFBoard&gt; mergeCheck = </span><span class="s1-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s1-89">// a power merge check list</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">bool</span><span class="si"> powerMerged = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">for</span><span class="si">(</span><span class="s1-90">int</span><span class="si"> w = swipeChain.Count-1; w &gt;= 0; w-- ){</span></div>
<div class="l li"><span class="si">                    mergeCheck.Clear(); </span><span class="s1-89">// clear the list for each check</span></div>
<div class="l li"><span class="si">                    mergeCheck.AddRange(swipeChain); </span><span class="s1-89">// copy the current list</span></div>
<div class="l li"><span class="si">                    mergeCheck.Remove(swipeChain[w]); </span><span class="s1-89">// as to not check itself</span></div>
<div class="l li"><span class="si">                    mergeCheck.Reverse(); </span><span class="s1-89">// reverse the list to start from last swiped</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">foreach</span><span class="si">(JSFBoard innerLoop </span><span class="s1-90">in</span><span class="si"> mergeCheck){ </span><span class="s1-89">// check against all swiped pieceDefinitions</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">if</span><span class="si">(innerLoop.pd.powerMerge(swipeChain,swipeChain[w].piece,innerLoop.piece,swipeChain[w].arrayRef,</span><span class="s1-90">false</span><span class="si">) ||</span></div>
<div class="l li"><span class="si">                           swipeChain[w].pd.powerMerge(swipeChain,innerLoop.piece,swipeChain[w].piece,swipeChain[w].arrayRef,</span><span class="s1-90">false</span><span class="si">) ){</span></div>
<div class="l li"><span class="si">                            powerMerged = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// powerMerge called...</span></div>
<div class="l li"><span class="si">                            </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// done power merging... ( break inner loop )</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span><span class="s1-90">if</span><span class="si">(powerMerged){</span></div>
<div class="l li"><span class="si">                        </span><span class="s1-90">break</span><span class="si">; </span><span class="s1-89">// done power merging... ( break outer loop too )</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s1-90">foreach</span><span class="si">(JSFBoard board </span><span class="s1-90">in</span><span class="si"> swipeChain){</span></div>
<div class="l li"><span class="si">                comboTracker++;</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(comboTracker &gt; gm.minSwipeMatch){</span></div>
<div class="l li"><span class="si">                    gm.increaseCombo(); </span><span class="s1-89">// increases combo by 1 for each after the min swipe num</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">if</span><span class="si">(board.isFilled){ </span><span class="s1-89">// if not already destroyed by power merge</span></div>
<div class="l li"><span class="si">                    JSFRelay.onSwipeValidating(board.piece); </span><span class="s1-89">// relay call</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            validateStatus = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// swipe chain has been validated...</span></div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"> </div>
<div class="l lc d2"><span class="sc">        </span><span class="sd">} else</span><span class="sc"> if(swipeNum &gt; 1){</span></div>
<div class="l li"><span class="si">            gm.audioScript.badMoveSoundFx.play();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l la d3"> </div>
<div class="l li"><span class="si">        swipeChain.Clear();</span></div>
<div class="l li"><span class="si">        removeSwipeVisuals(0);</span></div>
<div class="l li"><span class="si">        limitedSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset swipe limit</span></div>
<div class="l li"><span class="si">        hasPowerMerge = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// reset powerMerge status</span></div>
<div class="l li"><span class="si">        rainbowSwipe = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">        isSwiping = </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// disable swiping after validated</span></div>
<div class="l li"><span class="si">        JSFRelay.onSwipeValidated(validateStatus,swipeNum); </span><span class="s1-89">// relay call</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion public functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region private functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to check for swipe legality (can users swipe?)</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">bool</span><span class="si"> isLegalSwipe(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.moveOnlyAfterSettle){ </span><span class="s1-89">// move only after settle?</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(!gm.checkedPossibleMove){</span></div>
<div class="l li"><span class="si">                </span><span class="s1-90">return</span><span class="si"> </span><span class="s1-90">false</span><span class="si">; </span><span class="s1-89">// not ready to move</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">return</span><span class="si"> (gm.canMove &amp;&amp; gm.gameState == JSFGameState.GameActive &amp;&amp; gm.isLegalSwipe(board) ); </span><span class="s1-89">// meets criteria?</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to backtrack the swipe chain</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> backTrackSelection(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// ==== BACK TRACK SWIPE CODE ====</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(swipeChain.Contains(board)){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">int</span><span class="si"> index = swipeChain.IndexOf(board);</span></div>
<div class="l la d4"> </div>
<div class="l la d4"> </div>
<div class="l la d4"> </div>
<div class="l li"><span class="si">            swipeChain.RemoveRange( index, swipeChain.Count - index );</span></div>
<div class="l li"><span class="si">            removeSwipeVisuals(index);</span></div>
<div class="l li"><span class="si">            JSFRelay.onSwipeBackTracked(board.piece,</span><span class="s1-90">false</span><span class="si">); </span><span class="s1-89">// relay call</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(swipeChain.Count == 0){</span></div>
<div class="l li"><span class="si">                isSwiping = </span><span class="s1-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                swipeStart(board); </span><span class="s1-89">// add back this board with its call criterias</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                rainbowSwipe = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// in case we have changed color before this... revert to this color</span></div>
<div class="l li"><span class="si">                swipeCall(board); </span><span class="s1-89">// add back this board with its call criterias</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// function to add to the swipe chain</span></div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> swipeAdd(JSFBoard board){</span></div>
<div class="l li"><span class="si">        isSwiping = </span><span class="s1-90">true</span><span class="si">; </span><span class="s1-89">// swiping is active</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// ==== SWIPE CHAIN CODE ====</span></div>
<div class="l li"><span class="si">        swipeChain.Add(board);</span></div>
<div class="l li"><span class="si">        addVisualChain(board.arrayRef[0],board.arrayRef[1]);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        JSFRelay.onSwipeAdded(board.piece,</span><span class="s1-90">false</span><span class="si">); </span><span class="s1-89">// relay call</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion private functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-86">#region swipeGUI</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ##########################</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// SWIPE GUI SECTION</span></div>
<div class="l li"><span class="si">    </span><span class="s1-89">// ##########################</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> addVisualChain(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.showSwipedIndicator) addSwipeIndicator(x,y);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.showSwipeLine) addSwipeLine(x,y);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> addSwipeIndicator(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(vm.swipeIndicatorObj == </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            Debug.LogError(</span><span class="s1-85">&quot;Warning : No swipe indicator object. Check JSFVisualManager.&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// no object defined</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        GameObject obj;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.usingPoolManager){ </span><span class="s1-89">// POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            obj = PoolManager.Pools[JSFUtils.miscPoolName].Spawn(vm.swipeIndicatorObj.transform).gameObject;</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// NON-POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            obj = GameObject.Instantiate(vm.swipeIndicatorObj) </span><span class="s1-90">as</span><span class="si"> GameObject;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        obj.transform.position = gm.board[x,y].position + </span><span class="s1-90">new</span><span class="si"> Vector3(0,0,-20);</span></div>
<div class="l li"><span class="si">        JSFUtils.autoScalePadded(obj);</span></div>
<div class="l li"><span class="si">        swipeIndicatorChain.Add(obj);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> addSwipeLine(</span><span class="s1-90">int</span><span class="si"> x, </span><span class="s1-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(vm.swipeLineObj == </span><span class="s1-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            Debug.LogError(</span><span class="s1-85">&quot;Warning : No swipe line object. Check JSFVisualManager.&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// no object defined</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(swipeChain.Count &lt; 2){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">return</span><span class="si">; </span><span class="s1-89">// not enough to create a line between two objects yet</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        GameObject obj;</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.usingPoolManager){ </span><span class="s1-89">// POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            obj = PoolManager.Pools[JSFUtils.miscPoolName].Spawn(vm.swipeLineObj.transform).gameObject;</span></div>
<div class="l li"><span class="si">        } </span><span class="s1-90">else</span><span class="si"> { </span><span class="s1-89">// NON-POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            obj = GameObject.Instantiate(vm.swipeLineObj) </span><span class="s1-90">as</span><span class="si"> GameObject;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        JSFBoard board = swipeChain[swipeChain.Count-2]; </span><span class="s1-89">// get the previous swipe entry</span></div>
<div class="l li"><span class="si">        JSFUtils.creatSwipeLine(obj, gm.getBoardPosition(x,y), board.position, -19.99f );</span></div>
<div class="l li"><span class="si">        swipeLineChain.Add(obj);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> removeSwipeVisuals(</span><span class="s1-90">int</span><span class="si"> index){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.showSwipedIndicator) removeSwipeIndicator(index);</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(gm.showSwipeLine) removeSwipeLine(index);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s1-90">if</span><span class="si">(index == 0){</span></div>
<div class="l li"><span class="si">            swipeIndicatorChain.Clear();</span></div>
<div class="l li"><span class="si">            swipeLineChain.Clear();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> removeSwipeIndicator(</span><span class="s1-90">int</span><span class="si"> index){</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// remove swipe indicators</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(GameObject go </span><span class="s1-90">in</span><span class="si"> swipeIndicatorChain.GetRange(index, swipeIndicatorChain.Count - index )){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(gm.usingPoolManager){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[JSFUtils.miscPoolName].Despawn(go.transform); </span><span class="s1-89">// POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                GameObject.Destroy(go); </span><span class="s1-89">// NON-POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        swipeIndicatorChain.RemoveRange( index, swipeIndicatorChain.Count - index );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s1-90">static</span><span class="si"> </span><span class="s1-90">void</span><span class="si"> removeSwipeLine(</span><span class="s1-90">int</span><span class="si"> index){</span></div>
<div class="l li"><span class="si">        index = Mathf.Max(index-1,0); </span><span class="s1-89">// to compensate for swipe line less 1 array</span></div>
<div class="l li"><span class="si">        </span><span class="s1-89">// remove swipe lines</span></div>
<div class="l li"><span class="si">        </span><span class="s1-90">foreach</span><span class="si">(GameObject go </span><span class="s1-90">in</span><span class="si"> swipeLineChain.GetRange(index, swipeLineChain.Count - index )){</span></div>
<div class="l li"><span class="si">            </span><span class="s1-90">if</span><span class="si">(gm.usingPoolManager){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[JSFUtils.miscPoolName].Despawn(go.transform); </span><span class="s1-89">// POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            } </span><span class="s1-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                GameObject.Destroy(go); </span><span class="s1-89">// NON-POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        swipeLineChain.RemoveRange( index, swipeLineChain.Count - index );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s1-86">#endregion swipeGUI</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="JSFSwipeManager (new).cs"><b>JSFSwipeManager (new).cs</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="s2-90">using</span><span class="si"> UnityEngine;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> System.Collections.Generic;</span></div>
<div class="l li"><span class="s2-90">using</span><span class="si"> PathologicalGames;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">class</span><span class="si"> JSFSwipeManager {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// for any color swipe</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> limitedSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// to limit further swipes from happening</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isSwiping = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// is currently swiping?</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> hasPowerMerge = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// has a powerMerge within the swipe</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> List&lt;JSFBoard&gt; swipeChain = </span><span class="s2-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s2-89">// the current swipe chain</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> List&lt;GameObject&gt; swipeIndicatorChain = </span><span class="s2-90">new</span><span class="si"> List&lt;GameObject&gt;(); </span><span class="s2-89">// the indicators in a list</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> List&lt;GameObject&gt; swipeLineChain = </span><span class="s2-90">new</span><span class="si"> List&lt;GameObject&gt;(); </span><span class="s2-89">// the indicator-line in a list</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> swipeColor; </span><span class="s2-89">// the current swipe color (AKA slotNum)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> JSFGameManager gm {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> JSFUtils.gm;}} </span><span class="s2-89">// easy access variable</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> JSFVisualManager vm {</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> JSFUtils.vm;}} </span><span class="s2-89">// easy access variable</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// easy access variables</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> JSFBoard lastSwipeChainBoard { </span><span class="s2-90">get</span><span class="si">{</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(swipeChain.Count-1 &gt;= 0){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> swipeChain[swipeChain.Count-1];</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }}</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// easy access variables</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> JSFBoard secondLastSwipeChainBoard { </span><span class="s2-90">get</span><span class="si">{</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(swipeChain.Count-2 &gt;= 0){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> swipeChain[swipeChain.Count-2];</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">null</span><span class="si">;</span></div>
<div class="l li"><span class="si">        }}</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">int</span><span class="si"> currentSwipeCount{</span><span class="s2-90">get</span><span class="si">{</span><span class="s2-90">return</span><span class="si"> swipeChain.Count;}}</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region public functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to get the GamePiece reference of previous added swipe chain using index and num of index previous</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> JSFGamePiece getPrevChainedFromHere(JSFBoard refIndex, </span><span class="s2-90">int</span><span class="si"> num){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> newIndex = swipeChain.IndexOf(refIndex) - num;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(newIndex &gt;= 0 &amp;&amp; newIndex &lt; swipeChain.Count){ </span><span class="s2-89">// if index not out of bounds...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si"> swipeChain[newIndex].piece; </span><span class="s2-89">// return the index..</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">null</span><span class="si">; </span><span class="s2-89">// out of bounds, return null</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to void (cancels) the current swipe if the current swiped chain is modified...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> voidSwipeIfNeeded(</span><span class="s2-90">int</span><span class="si"> x,</span><span class="s2-90">int</span><span class="si"> y ){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isSwiping){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(JSFBoard check </span><span class="s2-90">in</span><span class="si"> swipeChain){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(check.arrayRef[0] == x &amp;&amp; check.arrayRef[1] == y){ </span><span class="s2-89">// if the swipe current has this board selected..</span></div>
<div class="l li"><span class="si">                    voidCurrentSwipe(); </span><span class="s2-89">// resets the swipe...</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">break</span><span class="si">;</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to void (cancels) the current swipe no matter what...</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> voidCurrentSwipe(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// resets the swipe...</span></div>
<div class="l li"><span class="si">        swipeChain.Clear();</span></div>
<div class="l li"><span class="si">        removeSwipeVisuals(0);</span></div>
<div class="l li"><span class="si">        limitedSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset swipe limit</span></div>
<div class="l li"><span class="si">        hasPowerMerge = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset powerMerge status</span></div>
<div class="l li"><span class="si">        rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">        isSwiping = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// disable swiping after validated</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to allow any swipe color once</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> allowAnyColorOnce(){</span></div>
<div class="l li"><span class="si">        rainbowSwipe = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// allow it ( will only work once and then reset during the next swipe )</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to stop further swipes</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> stopFurtherSwipes(){</span></div>
<div class="l li"><span class="si">        limitedSwipe = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// stops further swipes to add to chain.. (max chain reach for this swipe)</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to allow swipes again</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> allowFurtherSwipes(){</span></div>
<div class="l li"><span class="si">        limitedSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// allow swipes again..</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> swipeStart(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(isSwiping){</span></div>
<div class="l li"><span class="si">            validateSwipe(); </span><span class="s2-89">// prevent refresh bug hack</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isLegalSwipe(board)){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// not a legal swipe... do not proceed with swiping</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( board.pd.useAsFirstSwipe(board.piece,</span><span class="s2-90">false</span><span class="si">) ){ </span><span class="s2-89">// check if pieceDefinition allows to swipe start</span></div>
<div class="l li"><span class="si">            isSwiping = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">            swipeAdd(board);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> swipeCall(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// check backtracking?</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(swipeChain.Contains(board) ){ </span><span class="s2-89">// check if we are backtracking the current selection</span></div>
<div class="l li"><span class="si">            hasPowerMerge = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// resets any powerMerge status</span></div>
<div class="l li"><span class="si">            rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">            limitedSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// resets the limit of swipe</span></div>
<div class="l li"><span class="si">            backTrackSelection(board); </span><span class="s2-89">// default proceeds with back tracking...</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// do not continue further... backtracked</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// check legality of swipe</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(!isSwiping || limitedSwipe || !isLegalSwipe(board) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// not legal... do not continue</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// check distance requirements</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> distance = gm.boardRadiusDistance( board, lastSwipeChainBoard);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( distance &lt; board.pd.minSwipeDistance(board.piece) || distance &gt; board.pd.maxSwipeDistance(board.piece) ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// not within distance... do not proceed with swipe...</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// check for powerMerge...</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(JSFBoard checkBoard </span><span class="s2-90">in</span><span class="si"> swipeChain ){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(checkBoard.pd.powerMerge(swipeChain,board.piece,checkBoard.piece,board.arrayRef,</span><span class="s2-90">true</span><span class="si">) ||</span></div>
<div class="l li"><span class="si">               board.pd.powerMerge(swipeChain,checkBoard.piece,board.piece,board.arrayRef,</span><span class="s2-90">true</span><span class="si">)){ </span><span class="s2-89">// powerMerge?</span></div>
<div class="l li"><span class="si">                rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">                swipeAdd(board); </span><span class="s2-89">// add to chain</span></div>
<div class="l li"><span class="si">                hasPowerMerge = </span><span class="s2-90">true</span><span class="si">;</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// added as powerMerge...</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-89">// does the pieceDefinition allow to add to swipe chain?</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(board.pd.addToSwipeChain(board.piece,swipeColor,</span><span class="s2-90">false</span><span class="si">) || </span><span class="s2-89">// normal add to swipe OR</span></div>
<div class="l li"><span class="si">                (rainbowSwipe &amp;&amp; !board.pd.isSpecial) ) { </span><span class="s2-89">// check for rainbow OR</span></div>
<div class="l lc d1"><span class="sc">            if(rainbowSwipe </span><span class="sa">&amp;&amp; !board.pd.isSpecial</span><span class="sc">) swipeColor = board.piece.slotNum; // change to this color if it was from rainbowSwipe</span></div>
<div class="l li"><span class="si">            rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">            swipeAdd(board); </span><span class="s2-89">// add to chain</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to validate the swipe chain</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">public</span><span class="si"> </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> validateSwipe(){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">bool</span><span class="si"> validateStatus = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> swipeNum = currentSwipeCount;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">int</span><span class="si"> comboTracker = 0;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">( gm.gameState == JSFGameState.GameActive &amp;&amp; </span><span class="s2-89">// game has not ended...</span></div>
<div class="l li"><span class="si">            (swipeChain.Count &gt;= gm.minSwipeMatch || hasPowerMerge)){ </span><span class="s2-89">// meet the minimum required length</span></div>
<div class="l li"><span class="si">            gm.audioScript.matchSoundFx.play();</span></div>
<div class="l li"><span class="si">            gm.playerMadeAMove();</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(hasPowerMerge){ </span><span class="s2-89">// perform powerMerges if there is...</span></div>
<div class="l li"><span class="si">                List&lt;JSFBoard&gt; mergeCheck = </span><span class="s2-90">new</span><span class="si"> List&lt;JSFBoard&gt;(); </span><span class="s2-89">// a power merge check list</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">bool</span><span class="si"> powerMerged = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">for</span><span class="si">(</span><span class="s2-90">int</span><span class="si"> w = swipeChain.Count-1; w &gt;= 0; w-- ){</span></div>
<div class="l li"><span class="si">                    mergeCheck.Clear(); </span><span class="s2-89">// clear the list for each check</span></div>
<div class="l li"><span class="si">                    mergeCheck.AddRange(swipeChain); </span><span class="s2-89">// copy the current list</span></div>
<div class="l li"><span class="si">                    mergeCheck.Remove(swipeChain[w]); </span><span class="s2-89">// as to not check itself</span></div>
<div class="l li"><span class="si">                    mergeCheck.Reverse(); </span><span class="s2-89">// reverse the list to start from last swiped</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">foreach</span><span class="si">(JSFBoard innerLoop </span><span class="s2-90">in</span><span class="si"> mergeCheck){ </span><span class="s2-89">// check against all swiped pieceDefinitions</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">if</span><span class="si">(innerLoop.pd.powerMerge(swipeChain,swipeChain[w].piece,innerLoop.piece,swipeChain[w].arrayRef,</span><span class="s2-90">false</span><span class="si">) ||</span></div>
<div class="l li"><span class="si">                           swipeChain[w].pd.powerMerge(swipeChain,innerLoop.piece,swipeChain[w].piece,swipeChain[w].arrayRef,</span><span class="s2-90">false</span><span class="si">) ){</span></div>
<div class="l li"><span class="si">                            powerMerged = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// powerMerge called...</span></div>
<div class="l li"><span class="si">                            </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// done power merging... ( break inner loop )</span></div>
<div class="l li"><span class="si">                        }</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                    </span><span class="s2-90">if</span><span class="si">(powerMerged){</span></div>
<div class="l li"><span class="si">                        </span><span class="s2-90">break</span><span class="si">; </span><span class="s2-89">// done power merging... ( break outer loop too )</span></div>
<div class="l li"><span class="si">                    }</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">            </span><span class="s2-90">foreach</span><span class="si">(JSFBoard board </span><span class="s2-90">in</span><span class="si"> swipeChain){</span></div>
<div class="l li"><span class="si">                comboTracker++;</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(comboTracker &gt; gm.minSwipeMatch){</span></div>
<div class="l li"><span class="si">                    gm.increaseCombo(); </span><span class="s2-89">// increases combo by 1 for each after the min swipe num</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">if</span><span class="si">(board.isFilled){ </span><span class="s2-89">// if not already destroyed by power merge</span></div>
<div class="l li"><span class="si">                    JSFRelay.onSwipeValidating(board.piece); </span><span class="s2-89">// relay call</span></div>
<div class="l li"><span class="si">                }</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            validateStatus = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// swipe chain has been validated...</span></div>
<div class="l lc d2"><span class="sc">        </span><span class="sa">} else {</span></div>
<div class="l lc d2"><span class="sc">            </span><span class="sa">swipeChain.Reverse(); // change order from back to front...</span></div>
<div class="l lc d2"><span class="sc">            </span><span class="sa">foreach(JSFBoard board in swipeChain){</span></div>
<div class="l lc d2"><span class="sc">                </span><span class="sa">JSFRelay.onSwipeFailed(board.piece); // calls the individual swipeFailed function</span></div>
<div class="l lc d2"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lc d2"><span class="sc">            if(swipeNum &gt; 1){</span></div>
<div class="l li"><span class="si">                gm.audioScript.badMoveSoundFx.play();</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l la d3"><span class="sa">        }</span></div>
<div class="l li"><span class="si">        swipeChain.Clear();</span></div>
<div class="l li"><span class="si">        removeSwipeVisuals(0);</span></div>
<div class="l li"><span class="si">        limitedSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset swipe limit</span></div>
<div class="l li"><span class="si">        hasPowerMerge = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// reset powerMerge status</span></div>
<div class="l li"><span class="si">        rainbowSwipe = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// resets the any swipe status</span></div>
<div class="l li"><span class="si">        isSwiping = </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// disable swiping after validated</span></div>
<div class="l li"><span class="si">        JSFRelay.onSwipeValidated(validateStatus,swipeNum); </span><span class="s2-89">// relay call</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion public functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region private functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to check for swipe legality (can users swipe?)</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">bool</span><span class="si"> isLegalSwipe(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.moveOnlyAfterSettle){ </span><span class="s2-89">// move only after settle?</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(!gm.checkedPossibleMove){</span></div>
<div class="l li"><span class="si">                </span><span class="s2-90">return</span><span class="si"> </span><span class="s2-90">false</span><span class="si">; </span><span class="s2-89">// not ready to move</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">return</span><span class="si"> (gm.canMove &amp;&amp; gm.gameState == JSFGameState.GameActive &amp;&amp; gm.isLegalSwipe(board) ); </span><span class="s2-89">// meets criteria?</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to backtrack the swipe chain</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> backTrackSelection(JSFBoard board){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// ==== BACK TRACK SWIPE CODE ====</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(swipeChain.Contains(board)){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">int</span><span class="si"> index = swipeChain.IndexOf(board);</span></div>
<div class="l la d4"><span class="sa">            for(int x = 0; x &lt;= swipeChain.Count-1-index; x++){</span></div>
<div class="l la d4"><span class="sa">                JSFRelay.onSwipeRemoved(swipeChain[swipeChain.Count-1-x].piece,false);</span></div>
<div class="l la d4"><span class="sa">            }</span></div>
<div class="l li"><span class="si">            swipeChain.RemoveRange( index, swipeChain.Count - index );</span></div>
<div class="l li"><span class="si">            removeSwipeVisuals(index);</span></div>
<div class="l li"><span class="si">            JSFRelay.onSwipeBackTracked(board.piece,</span><span class="s2-90">false</span><span class="si">); </span><span class="s2-89">// relay call</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(swipeChain.Count == 0){</span></div>
<div class="l li"><span class="si">                isSwiping = </span><span class="s2-90">false</span><span class="si">;</span></div>
<div class="l li"><span class="si">                swipeStart(board); </span><span class="s2-89">// add back this board with its call criterias</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                rainbowSwipe = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// in case we have changed color before this... revert to this color</span></div>
<div class="l li"><span class="si">                swipeCall(board); </span><span class="s2-89">// add back this board with its call criterias</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// function to add to the swipe chain</span></div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> swipeAdd(JSFBoard board){</span></div>
<div class="l li"><span class="si">        isSwiping = </span><span class="s2-90">true</span><span class="si">; </span><span class="s2-89">// swiping is active</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// ==== SWIPE CHAIN CODE ====</span></div>
<div class="l li"><span class="si">        swipeChain.Add(board);</span></div>
<div class="l li"><span class="si">        addVisualChain(board.arrayRef[0],board.arrayRef[1]);</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">        JSFRelay.onSwipeAdded(board.piece,</span><span class="s2-90">false</span><span class="si">); </span><span class="s2-89">// relay call</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion private functions</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-86">#region swipeGUI</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ##########################</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// SWIPE GUI SECTION</span></div>
<div class="l li"><span class="si">    </span><span class="s2-89">// ##########################</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> addVisualChain(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.showSwipedIndicator) addSwipeIndicator(x,y);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.showSwipeLine) addSwipeLine(x,y);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> addSwipeIndicator(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(vm.swipeIndicatorObj == </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            Debug.LogError(</span><span class="s2-85">&quot;Warning : No swipe indicator object. Check JSFVisualManager.&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// no object defined</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        GameObject obj;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.usingPoolManager){ </span><span class="s2-89">// POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            obj = PoolManager.Pools[JSFUtils.miscPoolName].Spawn(vm.swipeIndicatorObj.transform).gameObject;</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// NON-POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            obj = GameObject.Instantiate(vm.swipeIndicatorObj) </span><span class="s2-90">as</span><span class="si"> GameObject;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        obj.transform.position = gm.board[x,y].position + </span><span class="s2-90">new</span><span class="si"> Vector3(0,0,-20);</span></div>
<div class="l li"><span class="si">        JSFUtils.autoScalePadded(obj);</span></div>
<div class="l li"><span class="si">        swipeIndicatorChain.Add(obj);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> addSwipeLine(</span><span class="s2-90">int</span><span class="si"> x, </span><span class="s2-90">int</span><span class="si"> y){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(vm.swipeLineObj == </span><span class="s2-90">null</span><span class="si">){</span></div>
<div class="l li"><span class="si">            Debug.LogError(</span><span class="s2-85">&quot;Warning : No swipe line object. Check JSFVisualManager.&quot;</span><span class="si">);</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// no object defined</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(swipeChain.Count &lt; 2){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">return</span><span class="si">; </span><span class="s2-89">// not enough to create a line between two objects yet</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        GameObject obj;</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.usingPoolManager){ </span><span class="s2-89">// POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            obj = PoolManager.Pools[JSFUtils.miscPoolName].Spawn(vm.swipeLineObj.transform).gameObject;</span></div>
<div class="l li"><span class="si">        } </span><span class="s2-90">else</span><span class="si"> { </span><span class="s2-89">// NON-POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            obj = GameObject.Instantiate(vm.swipeLineObj) </span><span class="s2-90">as</span><span class="si"> GameObject;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        JSFBoard board = swipeChain[swipeChain.Count-2]; </span><span class="s2-89">// get the previous swipe entry</span></div>
<div class="l li"><span class="si">        JSFUtils.creatSwipeLine(obj, gm.getBoardPosition(x,y), board.position, -19.99f );</span></div>
<div class="l li"><span class="si">        swipeLineChain.Add(obj);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> removeSwipeVisuals(</span><span class="s2-90">int</span><span class="si"> index){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.showSwipedIndicator) removeSwipeIndicator(index);</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(gm.showSwipeLine) removeSwipeLine(index);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        </span><span class="s2-90">if</span><span class="si">(index == 0){</span></div>
<div class="l li"><span class="si">            swipeIndicatorChain.Clear();</span></div>
<div class="l li"><span class="si">            swipeLineChain.Clear();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> removeSwipeIndicator(</span><span class="s2-90">int</span><span class="si"> index){</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// remove swipe indicators</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(GameObject go </span><span class="s2-90">in</span><span class="si"> swipeIndicatorChain.GetRange(index, swipeIndicatorChain.Count - index )){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(gm.usingPoolManager){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[JSFUtils.miscPoolName].Despawn(go.transform); </span><span class="s2-89">// POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                GameObject.Destroy(go); </span><span class="s2-89">// NON-POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        swipeIndicatorChain.RemoveRange( index, swipeIndicatorChain.Count - index );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    </span><span class="s2-90">static</span><span class="si"> </span><span class="s2-90">void</span><span class="si"> removeSwipeLine(</span><span class="s2-90">int</span><span class="si"> index){</span></div>
<div class="l li"><span class="si">        index = Mathf.Max(index-1,0); </span><span class="s2-89">// to compensate for swipe line less 1 array</span></div>
<div class="l li"><span class="si">        </span><span class="s2-89">// remove swipe lines</span></div>
<div class="l li"><span class="si">        </span><span class="s2-90">foreach</span><span class="si">(GameObject go </span><span class="s2-90">in</span><span class="si"> swipeLineChain.GetRange(index, swipeLineChain.Count - index )){</span></div>
<div class="l li"><span class="si">            </span><span class="s2-90">if</span><span class="si">(gm.usingPoolManager){</span></div>
<div class="l li"><span class="si">                PoolManager.Pools[JSFUtils.miscPoolName].Despawn(go.transform); </span><span class="s2-89">// POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            } </span><span class="s2-90">else</span><span class="si"> {</span></div>
<div class="l li"><span class="si">                GameObject.Destroy(go); </span><span class="s2-89">// NON-POOLMANAGER CODE</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        swipeLineChain.RemoveRange( index, swipeLineChain.Count - index );</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span><span class="s2-86">#endregion swipeGUI</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs">Number of differences: <b>4</b></div><div id="colors"><div class="sa" title="4 added lines and 6 inline additions in changed lines">Added(4,6)</div><div class="sd" title="0 deleted lines and 1 inline deletions in changed lines">Deleted(0,1)</div><div class="sc" title="7 changed lines">Changed(7)</div><div class="sc2" title="0 inline changes in changed lines">Changed in changed(0)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on March 18, 2015, 9:46 PM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 7.0.1.4.
    </div>
</div>
</body>

</html>

